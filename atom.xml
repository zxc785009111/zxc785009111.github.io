<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡丘的博客</title>
  
  <subtitle>java新手</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-23T11:50:59.005Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>卡丘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot(4)访问数据库</title>
    <link href="http://yoursite.com/2018/12/23/SpringBoot-4-%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/12/23/SpringBoot-4-访问数据库/</id>
    <published>2018-12-23T11:24:11.000Z</published>
    <updated>2018-12-23T11:50:59.005Z</updated>
    
    <content type="html"><![CDATA[<p>关于持久层框架  常用的比如说Hibernate、Mybatis<br>由于现在主流的框架是MyBatis，所以这里就简单说一下MyBatis</p><p>简介：<br>    MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><p>默认的Spring是不支持Mybatis的，但是Mybatis社区自己整合了Spring并提供出来jar包，所以我们可以在POM文件中添加依赖来使用MyBatis</p><h3 id="在pom文件中添加依赖"><a href="#在pom文件中添加依赖" class="headerlink" title="在pom文件中添加依赖"></a>在pom文件中添加依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--MyBatis基础包  --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>MyBatis是一种基于SqlSessionFactory构建的框架。对于SqlSessionFactory而言，它的作用是生成SqlSession接口对象，这个对象是MyBatis操作的核心 </p><h3 id="属性文件配置"><a href="#属性文件配置" class="headerlink" title="属性文件配置"></a>属性文件配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 该配置节点为独立的节点，不在spring的节点下</span></span><br><span class="line"><span class="comment">## Mybatis 配置</span></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml  <span class="comment">#注意：一定要对应mapper映射xml文件的所在路径</span></span><br><span class="line">  <span class="built_in">type</span>-aliases-package: com.ithwua.entity  <span class="comment"># 注意：对应实体类的路径,配合@Alias注解使用</span></span><br><span class="line">  <span class="comment">#驼峰命名规范 如：数据库字段是  order_id 那么 实体字段就要写成 orderId，</span></span><br><span class="line">  <span class="comment">#这个配置是为我们简化ResultMap的配置</span></span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="使用Mybatis注解实现类别名"><a href="#使用Mybatis注解实现类别名" class="headerlink" title="使用Mybatis注解实现类别名"></a>使用Mybatis注解实现类别名</h3><p>类别名也就是在类的上方使用@Alias(“别名”)，这样的话在对应的mapper文件中 resultType 就可以写成别名了，就不需要从包开始全部写完了。</p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Alias(<span class="string">"user"</span>)</span><br><span class="line">public class User &#123;</span><br><span class="line">       </span><br><span class="line">       private Long id;</span><br><span class="line">       private String user_name;</span><br><span class="line">       private String password;</span><br><span class="line">       //省略get  <span class="built_in">set</span> 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写Mapper文件"><a href="#编写Mapper文件" class="headerlink" title="编写Mapper文件"></a>编写Mapper文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.ekingwin.bas.cloud.project.basi.srvgov.dao.PrepareServiceInfoDao"</span> &gt;</span><br><span class="line"></span><br><span class="line">  &lt;select id=<span class="string">"selectAll"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">       select id,user_name as userName,password from User</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>这里的Mapper 中有几个需要注意的</p><p>1.<strong>namespace</strong>:   这个就是指接口的路径，下面的ID就会和这个接口中的方法名进行匹配。</p><p>2.<strong>select</strong> : 标明这是一个查询SQL</p><p>3.<strong>select</strong>中的id：与上面namespace指的接口中的方法名对应</p><p>4.<strong>resultType</strong>：指定返回集的类型，默认应该是写全名的，这里由于加了@Alias注解，所以可以使用别名user；</p><h3 id="自定义Mybatis插件"><a href="#自定义Mybatis插件" class="headerlink" title="自定义Mybatis插件"></a>自定义Mybatis插件</h3><p>假设存在一个Mybatis插件，其代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Intercepts(&#123;@Signature(<span class="built_in">type</span>=StatementHandler.class,method=<span class="string">"prepare"</span>,args= &#123;Connection.class,Integer.class&#125;)&#125;)</span><br><span class="line">public class MyPlugin implements Interceptor&#123;</span><br><span class="line">       </span><br><span class="line">       Properties propertise = null;</span><br><span class="line">       </span><br><span class="line">       //拦截器逻辑</span><br><span class="line">       @Override</span><br><span class="line">       public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">              System.out.println(<span class="string">"插件拦截方法"</span>);</span><br><span class="line">              <span class="built_in">return</span> invocation.proceed();//回调方法</span><br><span class="line">       &#125;</span><br><span class="line">       //生成MyBatis拦截器代理对象</span><br><span class="line">       @Override</span><br><span class="line">       public Object plugin(Object target) &#123;</span><br><span class="line">              <span class="built_in">return</span> Plugin.wrap(target, this);</span><br><span class="line">       &#125;</span><br><span class="line">       //设置插件属性</span><br><span class="line">       @Override</span><br><span class="line">       public void setProperties(Properties properties) &#123;</span><br><span class="line">              this.propertise = properties;</span><br><span class="line">              </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一个Mybatis插件就创建出来了，但是没有把他配置到MyBatis中，这个时候完全可以通过application.yml文件中添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis-config.xml</span><br></pre></td></tr></table></figure><p>这样就指定了配置文件的位置，这样我们在对应的路径下创建这个配置值文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">       &lt;plguins&gt;</span><br><span class="line">              &lt;plugin interceptor = <span class="string">"com.wangshun.leaning.plugin.MyPlugin"</span>&gt;</span><br><span class="line">                     &lt;property name=<span class="string">"key1"</span> value=<span class="string">"value1"</span>&gt;&lt;/property&gt;</span><br><span class="line">                     &lt;property name=<span class="string">"key2"</span> value=<span class="string">"value2"</span>&gt;&lt;/property&gt;</span><br><span class="line">                     &lt;property name=<span class="string">"key3"</span> value=<span class="string">"value3"</span>&gt;&lt;/property&gt;</span><br><span class="line">              &lt;/plugin&gt;</span><br><span class="line">       &lt;/plguins&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>这样就可以完成对于mybatis 一些组件的配置了，实际编写中可以按照实际的需求来进行编写。</p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于持久层框架  常用的比如说Hibernate、Mybatis&lt;br&gt;由于现在主流的框架是MyBatis，所以这里就简单说一下MyBatis&lt;/p&gt;
&lt;p&gt;简介：&lt;br&gt;    MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBat
      
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(3)AOP编程</title>
    <link href="http://yoursite.com/2018/12/23/SpringBoot-3-AOP%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/12/23/SpringBoot-3-AOP编程/</id>
    <published>2018-12-23T03:29:24.000Z</published>
    <updated>2018-12-23T11:51:16.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP理论"><a href="#AOP理论" class="headerlink" title="AOP理论"></a>AOP理论</h2><h3 id="AOP的概念："><a href="#AOP的概念：" class="headerlink" title="AOP的概念："></a>AOP的概念：</h3><p>面向切面编程，其实也就是一定的规则，我就可以把代码织入到事先约定好的流程中。实际上Spring AOP 也是一种约定流程编程…..<a id="more"></a></p><h3 id="为什么要使用AOP"><a href="#为什么要使用AOP" class="headerlink" title="为什么要使用AOP"></a>为什么要使用AOP</h3><p>AOP最为典型的应用就是数据库事务的管控，比如我们要保存一个用户的信息的时候，也需要把这个用户的角色信息保存了(2张表)，如果说数据库事务中的要求是 要么一起成功，要么一起失败的时候，这种情况下OOP是做不到的，那么使用AOP就可以解决这个问题。<br>再比如写入数据库这个操作的过程应该是：获取数据库连接–&gt;执行Sql–&gt;提交事务(或者回滚事务)–&gt;释放数据库连接<br>关于获取连接、提交、释放数据库连接这种重复的操作，就可以使用流程去实现，而不同的地方就在于编写SQL，其实在Spring中有大量的这样类似的代码。<br>比如我们经常会使用的一个事务注解：<strong>@Transactional</strong>,   这个注解就是标明此方法需要事务运行，并没有任何关于数据库打开和关闭的代码，也没有提交和回滚的代码，但是还是实现了这些功能，大致就是Spring帮你把写入的方法织入流程中，而那些 事务操作都帮你默认实现了，也就是它可以把大量重复的流程通过约定的方式抽象出来，然后给予默认的实现，，可见它可以帮助我们减少大量的代码，尤其是那些try….catch…..</p><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><p>1.连接点（join point）：对应具体的被拦截的对象，由于Spring只支持方法，所以被拦截的对象往往是指特定的方法。此方法为一个连接点，AOP通过动态代理技术把它织入到对应流程中。</p><p>2.切点(point cut):有时候，我们的切面不单单应用于单个方法，也可能是多各类不同的方法，这时，可以通过正则表达式和指示器的规则去定义，从而适配连接点，切点就是提供这个功能的概念。</p><p>3.通知(advice):就是按照约定的流程下的方法，分为前置通知(before advice) 后置通知(after advice) 环绕通知(around advice) 事后返回通知(afterReturning advice) 和异常通知(afterThrowing advice),他会根据约定织入流程中，需要弄明白他们在流程中的顺序和运行条件。</p><p>4.目标对象(target) ： 即被代理对象，例如：约定编程中的HelloServiceImpl实例就是一个目标对象，它被代理了。</p><p>5.引入(introduction): 是指引入新的类和方法，增强现有Bean的功能。</p><p>6.织入(weaving): 它是一个通过动态代理技术，为原有服务对象生成代理对象，然后与切点定义匹配的连接点拦截，并按照约束将各类通知织入约定流程的过程。</p><p>7.切面(aspect)： 十四一个可以定义切点、各类通知和引入的内容，Spring AOP将通过它的信息来增强Bean的功能或者将对应的方法织入流程。<br><img src="/images/SpringBoot/SpringBoot3/sp3-1.png"></p><h2 id="AOP-小例子"><a href="#AOP-小例子" class="headerlink" title="AOP 小例子"></a>AOP 小例子</h2><h3 id="定义Service接口"><a href="#定义Service接口" class="headerlink" title="定义Service接口"></a>定义Service接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">       /**</span><br><span class="line">        * 打印用户信息</span><br><span class="line">        * @param user</span><br><span class="line">        */</span><br><span class="line">       public void printUser(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void printUser(User user) &#123;</span><br><span class="line">             <span class="keyword">if</span>(user==null) &#123;</span><br><span class="line">                    throw new RuntimeException(<span class="string">"检查用户名参数为空"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             System.out.println(<span class="string">"id:"</span>+user.getId());</span><br><span class="line">             System.out.println(<span class="string">"userName:"</span>+ user.getUserName());</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line">       @Pointcut(<span class="string">"execution(*com.wangshun.leaning.chapter4.service.UserService(..))"</span>)</span><br><span class="line">       public void <span class="function"><span class="title">pointCut</span></span>() &#123;&#125;</span><br><span class="line">       @Before(<span class="string">"pointCut()"</span>)</span><br><span class="line">       public boolean <span class="function"><span class="title">before</span></span>() &#123;</span><br><span class="line">             System.out.println(<span class="string">"before...."</span>);</span><br><span class="line">             <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       @After(<span class="string">"pointCut()"</span>)</span><br><span class="line">       public void <span class="function"><span class="title">after</span></span>() &#123;</span><br><span class="line">             System.out.println(<span class="string">"after....."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       @AfterReturning(<span class="string">"pointCut()"</span>)</span><br><span class="line">       public void <span class="function"><span class="title">afterReturning</span></span>() &#123;</span><br><span class="line">             System.out.println(<span class="string">"afterReturning....."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       @AfterThrowing(<span class="string">"pointCut()"</span>)</span><br><span class="line">       public void <span class="function"><span class="title">afterThrowing</span></span>() &#123;</span><br><span class="line">             System.out.println(<span class="string">"afterThrowing....."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Aspect</strong> 这个注解也就是声明切面的一个注解，就相当于是告诉Spring，这是一个切面。然后@Before 那些注解就和AOP的概念一样的意思，比如前置通知之类的…</p><p><strong>@Pointcut</strong> 此注解用于定义切点，它被标注在方法pointCut上，则后面的通知注解中就可以使用方法的名称来定义了其含义就是对这个切点的引用，而这个注解里面的正则表达式就是告诉Spring 哪些方法需要进行AOP编程</p><p><strong>正则表达式 execution(* com.wangshun.leaning.chapter4.service.UserServiceImpl.printUser(..))</strong></p><p>execution表示在执行的时候，拦截里面的正则匹配的方法;</p><p>*表示任意返回类型的方法;</p><p>com.wangshun.leaning.chapter4.service.UserServiceImpl 指定目标对象的全限定名称;</p><p>printUser 指定目标对象的方法;</p><p>(..)表示任意参数进行匹配。</p><p>这样Spring就可以通过这个正则表达式知道你需要对UserServiceImpl类的printUser方法进行AOP增强，它就会将正则表达式匹配的方法和对应切面的方法织入到约定流程中，从而完成AOP编程。</p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">       @Autowired</span><br><span class="line">       UserService userService;</span><br><span class="line">       </span><br><span class="line">       @GetMapping(<span class="string">"/print"</span>)</span><br><span class="line">       public User printUser(String userName,Long id) &#123;</span><br><span class="line">             User user = new User();</span><br><span class="line">             user.setUserName(userName);</span><br><span class="line">             user.setId(id);</span><br><span class="line">             user.setNote(<span class="string">"note1"</span>);</span><br><span class="line">             userService.printUser(user);</span><br><span class="line">             <span class="built_in">return</span> user;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在地址栏输入：localhost:8080/print，来观察控制台的变化<br><img src="/images/SpringBoot/SpringBoot3/sp3-2.png"><br>从上图中可以看到这个方法被拦截，先执行了before，然后执行我的方法中定义的东西，然后执行了after，没有报错的情况下执行了afterReturning，<strong>注意： after，无论其报错与否都会执行</strong></p><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>环绕通知是所有通知中最强大的通知，一般而言，使用它的场景是在你需要大幅度修改原有目标对象的服务逻辑时，环绕通知是一个取代原有目标对象方法的通知，当然它也提供了回调原有目标对象方法的能力~</p><h3 id="在Aspect代码中加入以下部分"><a href="#在Aspect代码中加入以下部分" class="headerlink" title="在Aspect代码中加入以下部分"></a>在Aspect代码中加入以下部分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Around(<span class="string">"pointCut()"</span>)</span><br><span class="line">       public void around(ProceedingJoinPoint jp) throws Throwable &#123;</span><br><span class="line">             System.out.println(<span class="string">"around.....before"</span>);</span><br><span class="line">             //回调目标对象的原有方法</span><br><span class="line">             jp.proceed();</span><br><span class="line">             System.out.println(<span class="string">"around.....after"</span>);</span><br><span class="line">             </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/images/SpringBoot/SpringBoot3/sp3-3.png"><br>emmmmm这个和我想要的结果好像不太一样，想的应该是先执行before再执行这个，所以说….谨慎使用吧..要改的逻辑好像挺多的…</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在测试AOP的时候，我们打印了用户信息，如果信息为空，则抛出异常，事实上，假设改一下需求，如果信息为空则不打印，假设这里userService不是自己写的，是外部提供的，我们不能修改他，这时Spring允许增强这个接口的功能，我们可以为这个接口引入新的接口，例如要引入一个用户检测的接口<strong>UserValidator</strong></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface UserValidator &#123;</span><br><span class="line">       </span><br><span class="line">       public boolean validator(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class UserValidatorImpl implements UserValidator &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean validator(User user) &#123;</span><br><span class="line">        System.out.println(<span class="string">"引入新的接口"</span> + UserValidator.class.getSimpleName());</span><br><span class="line">        <span class="built_in">return</span> user !=null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在MyAspect-里面引入新接口"><a href="#在MyAspect-里面引入新接口" class="headerlink" title="在MyAspect 里面引入新接口"></a>在MyAspect 里面引入新接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">       * 引入新接口</span><br><span class="line">       */</span><br><span class="line">      @DeclareParents(value=<span class="string">"com.wangshun.leaning.chapter4.service.impl.UserServiceImpl+"</span>,</span><br><span class="line">                   defaultImpl=UserValidatorImpl.class)</span><br><span class="line">      public UserValidator userValidatorService;</span><br></pre></td></tr></table></figure><p><strong>@DeclareParents</strong> 这个注解的意思就是，它的作用就是引入新的类来增强服务，它有2个必须的属性<strong>value</strong>和<strong>defaultImpl</strong>。</p><p>   <strong>value</strong>:只想你要增强的目标对象，这里要增强的是<br>UserServiceImpl对象，因此可以看到配置为com.wangshun.leaning.chapter4.service.impl.UserServiceImpl+(最后那个+不要忘了)</p><p>   <strong>defaultImpl</strong>：引入增强功能的类，这里配置的是UserValidatorImpl，用来提供校验用户是否为空的功能</p><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/vp"</span>)</span><br><span class="line">      public User validateAndPrint(Long id,String userName,String note) &#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            user.setId(id);</span><br><span class="line">            user.setUserName(userName);</span><br><span class="line">            user.setNote(note);</span><br><span class="line">            //强制转换</span><br><span class="line">            UserValidator userValidatorService = (UserValidator) userService;</span><br><span class="line">            <span class="keyword">if</span>(userValidatorService.validator(user)) &#123;</span><br><span class="line">                   userService.printUser(user);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> user;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="增强原理"><a href="#增强原理" class="headerlink" title="增强原理"></a>增强原理</h3><p>之前的代码中有一段生成代理对象的代码为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object proxyObject = Proxy.newProxyInstance(Target.class.getClassLoader(), Target.class.getInterfaces(), proxyBean)</span><br></pre></td></tr></table></figure></p><p>这里的<strong>newProxyInstance</strong>的第二个参数作为一个数组，也就是说这里产生代理对象的时候，会把UserService 和UserValidator2个接口传递进去，让代理对象挂到这2个接口下面，这样这个代理对象就可以相互转换并且使用它们的方法了。</p><p>织入是一个生成动态代理服务对象并且将切面和目标对象方法编织成为约定流程的过程，对于流程上的通知，我们一般采用的是接口+实现类的模式，这是Spring推荐的，但是对于是否拥有接口SpringAOP 是不做强制要求的，对于动态代理也有多种实现的方式，比如CGLIB就是不需要接口的，所以Spring中就会做一个判断 如果是接口+实现类 那就用JDK的实现方式 生成代理 ，如果只有类 没有接口 那就用CGLIB的方式实现。</p><h2 id="通知获取参数"><a href="#通知获取参数" class="headerlink" title="通知获取参数"></a>通知获取参数</h2><p>如果我们需要传递参数给通知，这样也是可以的，只需要在切入点加入对应的正则表达式即可，当然对于非环绕型通知，我们还可以使用一个连接点(JoinPoint)类型的参数来获取参数</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Before(<span class="string">"pointCut() &amp;&amp;args(user)"</span>)</span><br><span class="line">       public boolean before(JoinPoint point,User user) &#123;</span><br><span class="line">              Object[] args = point.getArgs();</span><br><span class="line">              System.out.println(<span class="string">"before...."</span>);</span><br><span class="line">              <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>ps：对于非环绕通知的参数，JoinPoint 是可行的，SpringAOP会把它自动传递到通知中，如果是环绕行通知，则可以使用ProceedingJoinPoint</strong></p><p><strong>对于多个切面同时拦截一个接口的时候 可以使用@order注解去进行排序 ，来决定 多个切面的执行顺序。</strong></p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP理论&quot;&gt;&lt;a href=&quot;#AOP理论&quot; class=&quot;headerlink&quot; title=&quot;AOP理论&quot;&gt;&lt;/a&gt;AOP理论&lt;/h2&gt;&lt;h3 id=&quot;AOP的概念：&quot;&gt;&lt;a href=&quot;#AOP的概念：&quot; class=&quot;headerlink&quot; title=&quot;AOP的概念：&quot;&gt;&lt;/a&gt;AOP的概念：&lt;/h3&gt;&lt;p&gt;面向切面编程，其实也就是一定的规则，我就可以把代码织入到事先约定好的流程中。实际上Spring AOP 也是一种约定流程编程…..
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot(2)SpringBoot日志配置</title>
    <link href="http://yoursite.com/2018/12/23/springBoot-2-SpringBoot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/12/23/springBoot-2-SpringBoot日志配置/</id>
    <published>2018-12-23T03:14:06.000Z</published>
    <updated>2018-12-23T03:27:25.150Z</updated>
    
    <content type="html"><![CDATA[<p>简介：SpringBoot 是为了简化 Spring 应用的创建、运行、调试、部署等一系列问题而诞生的产物，自动装配的特性让我们可以更好的关注业务本身而不是外部的XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个 WEB 工程</p><p>很多情况下，我们会需要使用一些日志来查看SpringBoot中的一些东西，比如最常用的就是打印Sql了，在后台显示Sql也可以帮助我们迅速的解决出现的一些Sql问题等等，下面来说说如何在SpringBoot中配置日志……<a id="more"></a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>首先SpringBoot的日志配置是通过配置文件来完成的，默认支持的两种配置文件分别是properties 和yml。这里推荐使用yml，因为看起来更加简洁、舒适</p><p>显示日志只需要在配置文件中添加以下内容即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##日志配置,这里只是写了显示日志，后面服务器需要可能需要记录日志可以参考battch的博客</span></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    <span class="comment">#root: warn</span></span><br><span class="line">    <span class="comment">#设置Mybatis打印Sql,下面的包是dao层的包路径，不是mapper的路径</span></span><br><span class="line">    com.ithwua.dao: DEBUG</span><br><span class="line">    <span class="comment">#org:</span></span><br><span class="line">      <span class="comment">#hibernate: ERROR</span></span><br><span class="line">      mybatis: INFO</span><br><span class="line">      springframework:</span><br><span class="line">        web: debug</span><br></pre></td></tr></table></figure><h3 id="propertise文件的写法"><a href="#propertise文件的写法" class="headerlink" title="propertise文件的写法:"></a>propertise文件的写法:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logging.level.root = WARN</span><br><span class="line">logging.level.org.springframework.web = DEBUG</span><br><span class="line">logging.level.org.hibernate = ERROR</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如 mybatis sql日志</span></span><br><span class="line">logging.level.org.mybatis = INFO</span><br><span class="line">logging.level.mapper的Dao所在的包 = DEBUG</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://blog.battcn.com/2018/04/23/springboot/v2-config-logs/" target="_blank" rel="noopener">http://blog.battcn.com/2018/04/23/springboot/v2-config-logs/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：SpringBoot 是为了简化 Spring 应用的创建、运行、调试、部署等一系列问题而诞生的产物，自动装配的特性让我们可以更好的关注业务本身而不是外部的XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个 WEB 工程&lt;/p&gt;
&lt;p&gt;很多情况下，我们会需要使用一些日志来查看SpringBoot中的一些东西，比如最常用的就是打印Sql了，在后台显示Sql也可以帮助我们迅速的解决出现的一些Sql问题等等，下面来说说如何在SpringBoot中配置日志……
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot(1)使用MyEclipse构建一个SpringBoot</title>
    <link href="http://yoursite.com/2018/12/23/springBoot-1-%E4%BD%BF%E7%94%A8MyEclipse%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AASpringBoot/"/>
    <id>http://yoursite.com/2018/12/23/springBoot-1-使用MyEclipse构建一个SpringBoot/</id>
    <published>2018-12-23T02:38:56.000Z</published>
    <updated>2018-12-23T03:01:18.682Z</updated>
    
    <content type="html"><![CDATA[<p>简介：SpringBoot 是为了简化 Spring 应用的创建、运行、调试、部署等一系列问题而诞生的产物，自动装配的特性让我们可以更好的关注业务本身而不是外部的XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个 WEB 工程</p><p>我使用的是MyEclipse2018，接下来就说一下如何使用MyEclipse构建一个SpringBoot项目……<a id="more"></a></p><h3 id="新建Spring-项目"><a href="#新建Spring-项目" class="headerlink" title="新建Spring 项目"></a>新建Spring 项目</h3><p>右击新建一个Spring 项目，搜索Spring，选择Spring Starter Project<br><img src="/images/SpringBoot/SpringBoot1/sp1-1.png"></p><h3 id="输入项目名称-分组-描述-以及起始包"><a href="#输入项目名称-分组-描述-以及起始包" class="headerlink" title="输入项目名称/分组/描述/以及起始包"></a>输入项目名称/分组/描述/以及起始包</h3><p><img src="/images/SpringBoot/SpringBoot1/p2.png"></p><h3 id="选择SpringBoot的版本以及相应的组件-比如web-mybatis等等"><a href="#选择SpringBoot的版本以及相应的组件-比如web-mybatis等等" class="headerlink" title="选择SpringBoot的版本以及相应的组件(比如web/mybatis等等)"></a>选择SpringBoot的版本以及相应的组件(比如web/mybatis等等)</h3><p><img src="/images/SpringBoot/SpringBoot1/p3.png"></p><h3 id="点击finishe即可，其中首次创建会比较慢，因为需要下载jar包-需要提前配置好Maven-。"><a href="#点击finishe即可，其中首次创建会比较慢，因为需要下载jar包-需要提前配置好Maven-。" class="headerlink" title="点击finishe即可，其中首次创建会比较慢，因为需要下载jar包(需要提前配置好Maven)。"></a>点击finishe即可，其中首次创建会比较慢，因为需要下载jar包(需要提前配置好Maven)。</h3><h3 id="可选-为了以后的方便的话，可以去网上安装一些插件，比如说中文propertise-插件参考地址"><a href="#可选-为了以后的方便的话，可以去网上安装一些插件，比如说中文propertise-插件参考地址" class="headerlink" title="(可选) 为了以后的方便的话，可以去网上安装一些插件，比如说中文propertise 插件参考地址"></a>(可选) 为了以后的方便的话，可以去网上安装一些插件，比如说中文propertise 插件<a href="https://blog.csdn.net/qq_31151929/article/details/51121750" target="_blank" rel="noopener">参考地址</a></h3><pre><code>安装完成之后，在windows-&gt;propertise里面选择一下默认即可：</code></pre><p><img src="/images/SpringBoot/SpringBoot1/p4.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：SpringBoot 是为了简化 Spring 应用的创建、运行、调试、部署等一系列问题而诞生的产物，自动装配的特性让我们可以更好的关注业务本身而不是外部的XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个 WEB 工程&lt;/p&gt;
&lt;p&gt;我使用的是MyEclipse2018，接下来就说一下如何使用MyEclipse构建一个SpringBoot项目……
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习(1)：使用Hexo搭建博客</title>
    <link href="http://yoursite.com/2018/12/21/hello-world/"/>
    <id>http://yoursite.com/2018/12/21/hello-world/</id>
    <published>2018-12-21T15:41:39.000Z</published>
    <updated>2018-12-23T02:51:46.136Z</updated>
    
    <content type="html"><![CDATA[<p>经过一次偶然的机会，我发现了Hexo这个简单快捷的博客框架，这让我想搭建一个博客自己写东西的想法更近了一步，接下来来说说如何使用Hexo 搭建博客…..<a id="more"></a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装Hexo必要的环境"><a href="#安装Hexo必要的环境" class="headerlink" title="安装Hexo必要的环境"></a>安装Hexo必要的环境</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>安装node.js过程暂时省略额<br>确认自己电脑是否安装node.js命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node --version</span><br></pre></td></tr></table></figure></p><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>安装git过程暂时省略<br>确认自己电脑是否安装git命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git version</span><br></pre></td></tr></table></figure><h3 id="开始安装Hexo"><a href="#开始安装Hexo" class="headerlink" title="开始安装Hexo"></a>开始安装Hexo</h3><h4 id="使用指令安装Hexo"><a href="#使用指令安装Hexo" class="headerlink" title="使用指令安装Hexo"></a>使用指令安装Hexo</h4><p>确认node  和git 均安装完成后，开始我们的Hexo安装<br>安装的指令也是十分的简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装的过程可能会比较的缓慢，请耐心等待，因为是从gitHub上面下载。<br><img src="/images/HexoExample1/p1.png"><br>2个警告可以不用管</p><h4 id="hexo-初始化"><a href="#hexo-初始化" class="headerlink" title="hexo 初始化"></a>hexo 初始化</h4><p>安装完成后，可以进入指定目录  执行hexo init 也就是初始化，这样它就会在对应的文件夹下，通过git 去下载Hexo所需要的资源，这些资源也是从gitHub上下载的。<br><img src="/images/HexoExample1/p2.png"></p><p>几个警告同样可以不用管，如果是想在当前workspace的下一个文件夹中创建hexo 也可以使用 hexo init test(test就是文件夹的名称)，这样他就会把资源下载到当前目录的test文件夹中，因为一个workspace可能存在多个项目。<br>下载完成后，我们可以使用dir指令来查看究竟下载了那些东西<br><img src="/images/HexoExample1/p3.png">，这些资源是和gitHub上一致的。</p><h4 id="生成Hexo静态页面"><a href="#生成Hexo静态页面" class="headerlink" title="生成Hexo静态页面"></a>生成Hexo静态页面</h4><p>然后使用hexo g 去生成那些个静态页面。<br><img src="/images/HexoExample1/p4.png"></p><p>完成之后可以再次使用dir命令，就可以看到对比刚才，多了一个public文件夹，所有的静态页面的资源都放到这里面了。<br><img src="/images/HexoExample1/p5.png"></p><h4 id="启动Hexo"><a href="#启动Hexo" class="headerlink" title="启动Hexo"></a>启动Hexo</h4><p>最后输入以下指令来启动hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p><img src="/images/HexoExample1/p6.png"><br>复制开启后显示的地址，打开浏览器访问即可。<br>就可以看到默认的博客样式了。<br><img src="/images/HexoExample1/p7.png"><br>如果希望更改自己主题以及一些其他的设定请参考<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></p><p>参考文档:<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一次偶然的机会，我发现了Hexo这个简单快捷的博客框架，这让我想搭建一个博客自己写东西的想法更近了一步，接下来来说说如何使用Hexo 搭建博客…..
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
  </entry>
  
</feed>
