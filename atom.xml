<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王瞬|卡丘</title>
  
  <subtitle>王瞬的私人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-18T11:48:56.193Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王瞬|卡丘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud学习(10)非入侵APM——SkyWalking</title>
    <link href="http://yoursite.com/2019/01/18/SpringCloud%E5%AD%A6%E4%B9%A0-10-%E9%9D%9E%E5%85%A5%E4%BE%B5APM%E2%80%94%E2%80%94SkyWalking/"/>
    <id>http://yoursite.com/2019/01/18/SpringCloud学习-10-非入侵APM——SkyWalking/</id>
    <published>2019-01-18T10:42:58.000Z</published>
    <updated>2019-01-18T11:48:56.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SkyWalking概述"><a href="#SkyWalking概述" class="headerlink" title="SkyWalking概述"></a>SkyWalking概述</h2><p>SkyWalking 是一个用于追踪、监控和诊断分布式系统，特别是微服务的项目。从5.X进化成一个完成功能的APM系统<a id="more"></a></p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>1.分布式追踪和上下文传输<br>2.应用、实例、服务性能指标分析<br>3.根源分析<br>4.应用拓扑分析<br>5.应用和服务依赖分析<br>6.慢服务检测<br>7.性能优化</p><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><p>1.多语言探针或者类库<br>    1.1 Java自动探针，追踪和监控程序时，不需要修改源码。<br>    1.2 社区提供语言探针：。NET Core、Node.js<br>2.多种后端存储：ElasticSeach、H2<br>    2.1支持OpenTrancing:Java自动探针和OpenTracing API协同工作<br>3.轻量级、完善的后端聚合和分析功能<br>4.现代化WebUI<br>5.日志集成<br>6.应用、实例和服务的告警<br>7.支持接受其他跟踪器数据格式。<br>    7.1 Zipkin JSON,Thrift,Protobuf v1 和v2格式，由OpenZipkin库提供支持。<br>    7.2 Jaeger采用Zipkin Thrift或JSON v1/v2格式</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>SkyWalking 的整体架构主要由四部分组成：collector、agent、web、storage</p><p>首先是接入部分，接入的话可以使用SDK接入，也可以使用非入侵性Agent形式接入，agent将数据转化成SkyWalking Trace 数据协议，通过Http或者gRPC发送到collector,collector对收集的数据进行分析和聚合，最后存储到ElasticSearch或者H2中，一般情况下H2用于测试。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>本次案例使用2个服务(service-a,service-b)、Zuul网关、Eureka作为注册中心，案例的调用过程是这样的，首先通过访问Zuul网关然后转发到service-a,service-a通过Feign远程调用service-b，最后返回内容。</p><h3 id="注册中心eureka-server-skywalking"><a href="#注册中心eureka-server-skywalking" class="headerlink" title="注册中心eureka-server-skywalking"></a>注册中心eureka-server-skywalking</h3><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jaxb模块引用 - start --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;javax.activation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;activation&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- jaxb模块引用 - end --&gt;</span><br></pre></td></tr></table></figure><p>jdk8貌似没有后面几个jaxb的包，我不知道是不是我电脑问题。。。。</p><h4 id="添加注解启动Eureka"><a href="#添加注解启动Eureka" class="headerlink" title="添加注解启动Eureka"></a>添加注解启动Eureka</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class SpringCloudLeaning7EurekaServerSkywalkingApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning7EurekaServerSkywalkingApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:<span class="variable">$&#123;server.port&#125;</span></span><br><span class="line">  server:</span><br><span class="line">    <span class="built_in">wait</span>-time-in-ms-when-sync-empty: 0</span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>至此，服务端编写完成….没啥特别的…和之前写的差不多。</p><h3 id="zuul-skywalking"><a href="#zuul-skywalking" class="headerlink" title="zuul-skywalking"></a>zuul-skywalking</h3><h4 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="添加注解开启Zuul和服务发现"><a href="#添加注解开启Zuul和服务发现" class="headerlink" title="添加注解开启Zuul和服务发现"></a>添加注解开启Zuul和服务发现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringCloudLeaning7ZuulSkywalkingApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning7ZuulSkywalkingApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zuul-skywalking</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 9020</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    service<span class="_">-a</span>: </span><br><span class="line">      path: /client/**</span><br><span class="line">      serviceId: service<span class="_">-a</span></span><br><span class="line">ribbon:</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  ReadTimeout: 30000</span><br><span class="line">  ConnectTimeout: 30000</span><br><span class="line">  MaxAutoRetries: 0</span><br><span class="line">  MaxAutoRetriesNextServer: 1</span><br><span class="line">  OkToRetryOnAllOperations: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hystrix:</span><br><span class="line">  threadpool:</span><br><span class="line">    default:</span><br><span class="line">      coreSize: 1000 <span class="comment">##并发执行的最大线程数，默认10</span></span><br><span class="line">      maxQueueSize: 1000 <span class="comment">##BlockingQueue的最大队列数</span></span><br><span class="line">      queueSizeRejectionThreshold: 500 <span class="comment">##即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝</span></span><br><span class="line">  <span class="built_in">command</span>:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 120001</span><br></pre></td></tr></table></figure><p>之所以做ribbon和hystrix的配置是为了防止第一次请求进行超时。</p><h3 id="service-a"><a href="#service-a" class="headerlink" title="service-a"></a>service-a</h3><h4 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="主程序添加注解开启Feign和服务发现"><a href="#主程序添加注解开启Feign和服务发现" class="headerlink" title="主程序添加注解开启Feign和服务发现"></a>主程序添加注解开启Feign和服务发现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class SpringCloudLeaning7ServiceASkywalkingApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning7ServiceASkywalkingApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service<span class="_">-a</span></span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 9021</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br></pre></td></tr></table></figure><h4 id="Service接口实现Feign声明式调用"><a href="#Service接口实现Feign声明式调用" class="headerlink" title="Service接口实现Feign声明式调用"></a>Service接口实现Feign声明式调用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line">@FeignClient(value=<span class="string">"service-b"</span>)</span><br><span class="line">public interface FeignService &#123;</span><br><span class="line">@GetMapping(<span class="string">"/getSendInfo/&#123;serviceName&#125;"</span>)</span><br><span class="line">String getSendInfo(@PathVariable(<span class="string">"serviceName"</span>)String serviceName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.FeignService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">FeignService feignService;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/send/&#123;serviceName&#125;"</span>)</span><br><span class="line">public String send(@PathVariable(<span class="string">"serviceName"</span>)String serviceName) &#123;</span><br><span class="line"><span class="built_in">return</span> feignService.getSendInfo(serviceName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service-b"><a href="#service-b" class="headerlink" title="service-b"></a>service-b</h3><h4 id="pom文件-3"><a href="#pom文件-3" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="主程序添加服务发现注解"><a href="#主程序添加服务发现注解" class="headerlink" title="主程序添加服务发现注解"></a>主程序添加服务发现注解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class SpringCloudLeaning7ServiceBSkywalking1Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning7ServiceBSkywalking1Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="application-yml-3"><a href="#application-yml-3" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-b</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 9022</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka</span><br></pre></td></tr></table></figure><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class SkySecondController &#123;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/getSendInfo/&#123;serviceName&#125;"</span>)</span><br><span class="line">public String getSendInfo(@PathVariable(<span class="string">"serviceName"</span>)String serviceName) &#123;</span><br><span class="line"><span class="built_in">return</span> serviceName+<span class="string">"------&gt;"</span>+<span class="string">"service-b"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此所有的服务就都编写完成了，当然也可以启动测试一下：<br>启动server、zuul、service-a、service-b<br>访问：<a href="http://localhost:9020/client/send/skywalking" target="_blank" rel="noopener">http://localhost:9020/client/send/skywalking</a><br>可以收到结果skywalking——&gt;service-b就证明接口没问题啦。</p><h2 id="skyWalking-Controller-环境安装-windows"><a href="#skyWalking-Controller-环境安装-windows" class="headerlink" title="skyWalking Controller 环境安装(windows)"></a>skyWalking Controller 环境安装(windows)</h2><p>SkyWalking 6.x需要的基础环境如下：<br>Elasticsearch 6.x (集群模式或者不适用,以后简称es)<br>Sky Walking 6.X使用es作为存储，所以首先下载es，去官网下载最新版即可，我这边目前的最新版是6.5.4<br>下载完成后解压，然后进入目录的bin目录下，启动elasticsearch.bat<br>启动成功的截图如下：<br><img src="/images/SpringCloud/SkyWalking/skyWalking-1.png"></p><p>启动完成后开始下载SkyWalking的相关资料。从Apache官网下载当前SkyWalking发布的版本即可，具体下载地址：<br><a href="http://skywalking.apache.org/downloads" target="_blank" rel="noopener">http://skywalking.apache.org/downloads</a><br>然后根据操作系统选择对应版本下载即可。<br>解压完成的结构图如下：<br><img src="/images/SpringCloud/SkyWalking/skyWalking-2.png"></p><p>这里说一下目录的结构，agen是探针相关，bin中存放的是collectorService和webappService的启动脚本，startup是可以同时启动前面2个脚本的合并命令。<br>config是collector的相关配置信息。log是存放启动collector和web 后生成的日志文件。，webapp存放Sky Walking展示UI的jar和配置文件。默认端口为8080、10800、11800、1280这些端口，如果需要修改，应该在config陆慕吸啊的application.yml和webapp下的webapp.yml配置文件中修改。</p><p>接下来启动collector和web，进入bin目录下双击startup.bat即可。<br>启动成功后访问localhost:8080,使用admin/admin进行登录即可，登录后可看到以下界面。<br><img src="/images/SpringCloud/SkyWalking/skyWalking-3.png"></p><h3 id="使用Agent启动服务和监控查看"><a href="#使用Agent启动服务和监控查看" class="headerlink" title="使用Agent启动服务和监控查看"></a>使用Agent启动服务和监控查看</h3><p>首先在SkyWalking6.5.X的同级目录下创建一个文件夹，然后再文件夹中创建4个文件夹，结构如下图<br><img src="/images/SpringCloud/SkyWalking/skyWalking-4.png"><br>每个文件夹中都有一个agent 文件夹 和一个程序的执行jar，每个应用使用对应的agent进行启动。</p><p>其中agent就是原本下载的SkyWalking中agent的文件夹，复制过来就行，然后修改agent/config里面的agent.conf，修改agent.service_name的值为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent.service_name=service-eureka</span><br></pre></td></tr></table></figure></p><p>4个文件夹分别修改 这个属性值为对应的服务名称，和application.name一致或者随意起都可以，其实就是页面显示的名字而已。</p><p>然后再说那4个jar，4个jar是通过maven打包出来的，我是使用的clean install命令打包出来的，然后分别放到对应的文件夹下即可。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--启动Eureka</span><br><span class="line">java -javaagent:E:/software/skywalking/service-eureka/agent/skywalking-agent.jar -jar SpringCloud-leaning-7-eureka-server-skywalking-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">--启动zuul</span><br><span class="line">java -javaagent:E:/software/skywalking/service-zuul/agent/skywalking-agent.jar -jar SpringCloud-leaning-7-zuul-skywalking-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">--启动service<span class="_">-a</span></span><br><span class="line">java -javaagent:E:/software/skywalking/service<span class="_">-a</span>/agent/skywalking-agent.jar -jar SpringCloud-leaning-7-service<span class="_">-a</span>-skywalking-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">--启动serice -b</span><br><span class="line">java -javaagent:E:/software/skywalking/service-b/agent/skywalking-agent.jar -jar SpringCloud-leaning-7-service-b-skywalking-1-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>这里要注意两点，一个是skywalking-agent.jar 是当前目录下的，复制的时候不要忘了改，不然拓扑图不显示…（自己懒省事挖的坑解决了好久…..）<br>启动完成后 刷新localhost:8080可以看到以下界面:<br><img src="/images/SpringCloud/SkyWalking/skyWalking-5.png"></p><p>重新执行<a href="http://localhost:9020/client/send/skywalking" target="_blank" rel="noopener">http://localhost:9020/client/send/skywalking</a><br>可以看到页面监控的响应时间等信息。<br>其他的一些详情信息可以点击左侧的各项指标进行查看，比如服务地图等等….</p><p>参考文献：<br>    《重新定义SpringCloud实战》——许进</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SkyWalking概述&quot;&gt;&lt;a href=&quot;#SkyWalking概述&quot; class=&quot;headerlink&quot; title=&quot;SkyWalking概述&quot;&gt;&lt;/a&gt;SkyWalking概述&lt;/h2&gt;&lt;p&gt;SkyWalking 是一个用于追踪、监控和诊断分布式系统，特别是微服务的项目。从5.X进化成一个完成功能的APM系统
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(9)全链路监控</title>
    <link href="http://yoursite.com/2019/01/16/SpringCloud%E5%AD%A6%E4%B9%A0-9-%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2019/01/16/SpringCloud学习-9-全链路监控/</id>
    <published>2019-01-16T11:36:50.000Z</published>
    <updated>2019-01-17T11:38:20.381Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务的架构下，服务按照不同的维度进行拆分，一次请求可能会涉及到多个服务，并且有可能是由不同的团队开发。因此，就需要一些可以帮助理解系统行为，用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题。</p><p>这些工具就是APM，其中最出名的就是谷歌公开论文提到的Dapper</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h3><p>Spring Cloud Sleuth 是Spring Cloud的分布式调用链解决方案，Sleuth对于大部分用户来说都是透明的，系统间的交互信息都是能够被自动采集，用户可以通过日志文件获取链路数据，也可以将数据发给远程服务进行统一收集展示。<a id="more"></a></p><p>基本术语：<br>    1.Span:基本工作单元，比如，发送一次RPC请求就是一个新的Span，Span通过一个六十四位的ID标识，还包含有描述、事件时间戳、标签、调用它的Span的ID、处理器ID(一般为IP地址)。注意：第一个Span为rootSpan，它的ID值和trace的ID值一样。<br>    2.Trace：一系列Span组成的树状结构，简言之就是一次调用请求。<br>    3.Annotation：标注，用来描述时间的实时状态。事件有一下几种状态<br>        3.1 cs：Client Send。客户端发起请求，它表示一个Span的开始<br>        3.2 sr: Server Received。服务方接收到请求并开始处理，它减去CS的时间就是网络延迟时间。<br>        3.3 ss：Server Send。它标识请求处理完成，将相应数据返回给客户端。它减去sr的时间就是服务方处理的时间。<br>        3.4 ce：Client Received。 它标识客户端收到服务方的返回值，是当前span结束的新号，它减去cs就是本次请求的完整时间。</p><h3 id="Brave-和Zipkin"><a href="#Brave-和Zipkin" class="headerlink" title="Brave 和Zipkin"></a>Brave 和Zipkin</h3><p>Brave 是一个用于捕捉分布式系统之间调用信息的工具库，然后将这些信息以Span的形式发送给Zipkin。<br>从SpringBoot2.0开始，Sleuth不再自己存储上下文信息，而是使用Brave作为调用链工具库并且遵循Brave的命名和标记管理。</p><p>Zipkin是一个分布式跟踪系统，它手机系统的延时数据并提供展示界面，以便于用户排查问题。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="Zipkin-安装与部署"><a href="#Zipkin-安装与部署" class="headerlink" title="Zipkin 安装与部署"></a>Zipkin 安装与部署</h3><p>官网地址：<a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">https://github.com/openzipkin/zipkin</a><br>打开git bash<br>执行 curl -sSL <a href="https://zipkin.io/quickstart.sh" target="_blank" rel="noopener">https://zipkin.io/quickstart.sh</a> | bash -s<br>然后执行java -jar zipkin.jar 就可以了。<br>部署后的默认端口为9411，可以访问<a href="http://localhost:9411/zipkin/，看到以下界面就说明部署成功了。" target="_blank" rel="noopener">http://localhost:9411/zipkin/，看到以下界面就说明部署成功了。</a><br><img src="/images/SpringCloud/Sleuth/Sleuth-1.png"></p><p>接下来创建2个项目，Sleuth-consumer,Sleuth-provider</p><h3 id="Sleuth-consumer"><a href="#Sleuth-consumer" class="headerlink" title="Sleuth-consumer"></a>Sleuth-consumer</h3><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">  </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sleuth-provider</span><br></pre></td></tr></table></figure><h4 id="启动项添加-EnableFeignClients注解启动Feign"><a href="#启动项添加-EnableFeignClients注解启动Feign" class="headerlink" title="启动项添加@EnableFeignClients注解启动Feign"></a>启动项添加@EnableFeignClients注解启动Feign</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class SpringCloudLeaning5ConsulConfig1Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning5ConsulConfig1Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义线程数和RestTemplate"><a href="#自定义线程数和RestTemplate" class="headerlink" title="自定义线程数和RestTemplate"></a>自定义线程数和RestTemplate</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.BeanFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cloud.sleuth.instrument.async.TraceableExecutorService;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">/**</span><br><span class="line"> * 配置类，用于注册RestTemplate 和ExecutorService</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月16日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line">@Configuration</span><br><span class="line">public class ConsumerConfiguration &#123;</span><br><span class="line">@Autowired</span><br><span class="line">BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public RestTemplate <span class="function"><span class="title">restTemplate</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 简单起见，注册固定大小线程池</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public ExecutorService <span class="function"><span class="title">executorService</span></span>() &#123;</span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(2);</span><br><span class="line"><span class="built_in">return</span> new TraceableExecutorService(beanFactory, executorService);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Feign-Service接口"><a href="#Feign-Service接口" class="headerlink" title="Feign Service接口"></a>Feign Service接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line">@FeignClient(name=<span class="string">"sleuth-provifer"</span>,url=<span class="string">"localhost:8082"</span>)</span><br><span class="line">public interface HelloService &#123;</span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">String hello(@PathVariable(<span class="string">"name"</span>)String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个要注意的地方就是这个URL，url是必须要写的，如果不写会默认开启Ribbon负载均衡，会由于找不到而报错。</p><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.HelloService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line">private static Logger <span class="built_in">log</span> = LoggerFactory.getLogger(ConsumerController.class); </span><br><span class="line">@Autowired</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private HelloService helloService;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">public String helloByFeign(@PathVariable(<span class="string">"name"</span>)String name) &#123;</span><br><span class="line">log.info(<span class="string">"client send,Feign方式,参数:&#123;&#125;"</span>,name);</span><br><span class="line">String result = helloService.hello(name);</span><br><span class="line">log.info(<span class="string">"client send,Feign方式,结果:&#123;&#125;"</span>,result);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">@GetMapping(<span class="string">"/helloByRestTemplate/&#123;name&#125;"</span>)</span><br><span class="line">public String helloByRestTemplate(@PathVariable(<span class="string">"name"</span>)String name) &#123;</span><br><span class="line">String url = <span class="string">"http://sleuth-provifer/hello/&#123;name&#125;"</span>;</span><br><span class="line">log.info(<span class="string">"client send,RestTemplate方式,参数:&#123;&#125;"</span>,name);</span><br><span class="line">String result = restTemplate.getForObject(url, String.class,name);</span><br><span class="line">log.info(<span class="string">"client send,RestTemplate方式,结果：&#123;&#125;"</span>,result);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/helloByNewThread/&#123;name&#125;"</span>)</span><br><span class="line">public String helloByNewThread(@PathVariable(<span class="string">"name"</span>)String name) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">log.info(<span class="string">"client send,子线程方式,参数：&#123;&#125;"</span>,name);</span><br><span class="line">Future&lt;String&gt; future = executorService.submit(()-&gt;&#123;</span><br><span class="line">String result = helloService.hello(name);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;);</span><br><span class="line">String result = future.get();</span><br><span class="line">log.info(<span class="string">"client send,子线程方式,结果：&#123;&#125;"</span>,result);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sleuth-provider"><a href="#Sleuth-provider" class="headerlink" title="Sleuth-provider"></a>Sleuth-provider</h3><h4 id="pon文件"><a href="#pon文件" class="headerlink" title="pon文件"></a>pon文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">  </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sleuth-provider</span><br></pre></td></tr></table></figure><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">private static Logger <span class="built_in">log</span> = LoggerFactory.getLogger(HelloController.class); </span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">public String hello(@PathVariable(<span class="string">"name"</span>)String name) &#123;</span><br><span class="line">log.info(<span class="string">"server received:参数"</span>,name);</span><br><span class="line">String result = <span class="string">"hello:"</span>+name;</span><br><span class="line">log.info(<span class="string">"server sent:参数"</span>,result);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些写法其实和之前的没啥区别……</p><p>然后访问<a href="http://localhost:8081/hello/wangs" target="_blank" rel="noopener">http://localhost:8081/hello/wangs</a>  可以看到日志如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-01-16 23:06:35.097  INFO [sleuth-consumer,05405b326d8b3b7e,05405b326d8b3b7e,<span class="literal">false</span>] 14376 --- [nio-8081-exec-1] c.w.l.controller.ConsumerController      : client send,Feign方式,参数:wangs</span><br><span class="line">2019-01-16 23:06:35.276  INFO [sleuth-provider,05405b326d8b3b7e,724c042d4602c8e8,<span class="literal">false</span>] 5272 --- [nio-8082-exec-1] c.w.leaning.controller.HelloController   : server received:参数</span><br><span class="line">2019-01-16 23:06:35.291  INFO [sleuth-provider,05405b326d8b3b7e,724c042d4602c8e8,<span class="literal">false</span>] 5272 --- [nio-8082-exec-1] c.w.leaning.controller.HelloController   : server sent:参数</span><br><span class="line">2019-01-16 23:06:35.323  INFO [sleuth-consumer,05405b326d8b3b7e,05405b326d8b3b7e,<span class="literal">false</span>] 14376 --- [nio-8081-exec-1] c.w.l.controller.ConsumerController      : client send,Feign方式,结果:hello:wangs</span><br></pre></td></tr></table></figure></p><p>所以说这里使用了sleuth的包之后，我们的日志就会自动打印出span的信息，然而Span信息不仅可以携带feign、restTemplate信息，还可以在父子线程之间传递。</p><h2 id="Sleuth深入用法"><a href="#Sleuth深入用法" class="headerlink" title="Sleuth深入用法"></a>Sleuth深入用法</h2><h3 id="TraceFilter"><a href="#TraceFilter" class="headerlink" title="TraceFilter"></a>TraceFilter</h3><p>对于Http接口来说，Sleuth可以通过Brave的TracingFilter来打到获取Span信息的目的。<br>如果你想对Span信息有一些自定义的修改，比如增加tag或者响应头信息，那么只需要注册一个你自己的Filter就可以做到了。</p><p>注：你的Filter必须要比TracingFilter的优先级要低，否则你无法拿到TracingFilter处理之后的信息。</p><h3 id="Baggage"><a href="#Baggage" class="headerlink" title="Baggage"></a>Baggage</h3><p>Baggage 是存储在Span的上下文的一组K/V键值对，跟traceId和spanId不同，他不是必选项。<br>Baggage是一个非常有用的功能，它相当于Sleuth暴露在外的一个功能接口，通过它你可以让你的数据跟着Sleuth一起往后传递。</p><p>最典型的应用就是登录信息的传递。</p><p>接下来沿用刚才写的俩项目，做一些改动<br>其中，consumer使用自定义Filter获取前端传来的SessionId，放入Baggage中，通过Feign调用方式将SessionId传递给provider。</p><h3 id="sleuth-consumer"><a href="#sleuth-consumer" class="headerlink" title="sleuth-consumer"></a>sleuth-consumer</h3><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.filter;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.sleuth.instrument.web.SleuthWebProperties;</span><br><span class="line">import org.springframework.cloud.sleuth.instrument.web.TraceWebServletAutoConfiguration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.filter.GenericFilterBean;</span><br><span class="line"></span><br><span class="line">import brave.propagation.ExtraFieldPropagation;</span><br><span class="line">@Component</span><br><span class="line">@Order(TraceWebServletAutoConfiguration.TRACING_FILTER_ORDER+1)</span><br><span class="line">public class SessionFilter extends GenericFilterBean&#123;</span><br><span class="line"></span><br><span class="line">private Pattern skipPattern = Pattern.compile(SleuthWebProperties.DEFAULT_SKIP_PATTERN);</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)</span><br><span class="line">throws IOException, ServletException &#123;</span><br><span class="line"><span class="keyword">if</span>(!(request instanceof HttpServletRequest)||!(response instanceof HttpServletResponse)) &#123;</span><br><span class="line">throw new ServletException(<span class="string">"Filter 只支持 Http Request"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">boolean skip = skipPattern.matcher(httpServletRequest.getRequestURI()).matches();</span><br><span class="line"><span class="keyword">if</span>(!skip) &#123;</span><br><span class="line">//将SessionId放入Baggage中</span><br><span class="line">ExtraFieldPropagation.set(<span class="string">"SessionId"</span>, httpServletRequest.getSession().getId());</span><br><span class="line">System.out.println(ExtraFieldPropagation.get(<span class="string">"SessionId"</span>));</span><br><span class="line">&#125;</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一点需要注意：就是Order这个注解，这个其实就是设置优先级，之前也说过，自定义的Filter的优先级必须要比TracingFilter的优先级要低，否则你无法拿到TracingFilter处理之后的信息。</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/helloWithSessionId/&#123;name&#125;"</span>)</span><br><span class="line">String helloWithSessionId(@PathVariable(<span class="string">"name"</span>)String name);</span><br></pre></td></tr></table></figure><p>添加了一个方法，和之前做区分，同理Controller 和provider的controller 也要做同样的方法，当然 如果直接修改原有方法也是可以的。</p><h4 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">  </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sleuth-consumer</span><br><span class="line">  sleuth:</span><br><span class="line">    baggage-keys: <span class="comment">#注意：SpringBoot2.0之后必须声明才可以生效</span></span><br><span class="line">    - SessionId</span><br></pre></td></tr></table></figure><h3 id="sleuth-provider"><a href="#sleuth-provider" class="headerlink" title="sleuth-provider"></a>sleuth-provider</h3><h4 id="applicaiotn-yml"><a href="#applicaiotn-yml" class="headerlink" title="applicaiotn.yml"></a>applicaiotn.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">  </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sleuth-provider</span><br><span class="line">  sleuth:</span><br><span class="line">    baggage-keys:</span><br><span class="line">    - SessionId</span><br></pre></td></tr></table></figure><h4 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/helloWithSessionId/&#123;name&#125;"</span>)</span><br><span class="line">public String helloWithSessionId(@PathVariable(<span class="string">"name"</span>)String name) &#123;</span><br><span class="line">log.info(<span class="string">"server received:参数"</span>,name);</span><br><span class="line">String string = ExtraFieldPropagation.get(<span class="string">"SessionId"</span>);</span><br><span class="line">String result = <span class="string">"hello:"</span>+name+<span class="string">"SessionId为："</span>+ExtraFieldPropagation.get(<span class="string">"SessionId"</span>);</span><br><span class="line">log.info(<span class="string">"server sent:参数"</span>,result);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成后启动provider 和consumer<br>访问<a href="http://localhost:8081/helloWithSessionId/wangs" target="_blank" rel="noopener">http://localhost:8081/helloWithSessionId/wangs</a><br>可以看到页面的显示为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello:wangsSessionId为：852D3F212FB8C1C5768DCD6D71FEDE60</span><br></pre></td></tr></table></figure></p><p>完美撒花~</p><p>参考文献：<br>    《重新定义SpringCloud实战》——许进</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务的架构下，服务按照不同的维度进行拆分，一次请求可能会涉及到多个服务，并且有可能是由不同的团队开发。因此，就需要一些可以帮助理解系统行为，用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题。&lt;/p&gt;
&lt;p&gt;这些工具就是APM，其中最出名的就是谷歌公开论文提到的Dapper&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;Spring-Cloud-Sleuth&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Sleuth&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Sleuth&quot;&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;&lt;p&gt;Spring Cloud Sleuth 是Spring Cloud的分布式调用链解决方案，Sleuth对于大部分用户来说都是透明的，系统间的交互信息都是能够被自动采集，用户可以通过日志文件获取链路数据，也可以将数据发给远程服务进行统一收集展示。
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(8)服务治理组件Consul</title>
    <link href="http://yoursite.com/2019/01/15/SpringCloud%E5%AD%A6%E4%B9%A0-8-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E7%BB%84%E4%BB%B6Consul/"/>
    <id>http://yoursite.com/2019/01/15/SpringCloud学习-8-服务治理组件Consul/</id>
    <published>2019-01-15T13:19:50.000Z</published>
    <updated>2019-01-15T16:35:32.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Consul简介"><a href="#Consul简介" class="headerlink" title="Consul简介"></a>Consul简介</h2><h3 id="什么是Consul"><a href="#什么是Consul" class="headerlink" title="什么是Consul"></a>什么是Consul</h3><p>Consul是一个分布式高可用的服务网络解决方案，提供包含服务发现、配置和分段功能在内的全功能控制面板，这些功能每一个可以单独使用，也可以一起使用以构建完整的服务网络。<a id="more"></a></p><p>###Consul的特点<br>1.采用go语言编写，以Http方式对外提供服务<br>2.Consul支持多数据中心，这是其特色<br>3.Consul除了服务发现之外，还有一些别的功能<br>4.Consul的一致性协议是Raft</p><h3 id="Consul能做什么"><a href="#Consul能做什么" class="headerlink" title="Consul能做什么"></a>Consul能做什么</h3><p>1.服务发现，服务可以通过DNS或者HTTP直接找到它所依赖的服务。<br>2.健康检查，Consul提供了健康检查机制，从简单的服务端返回是否是200响应到较为复杂的内存使用率是否低于百分之90<br>3.K/V存储，应用程序可以根据需要使用Consul的Key/Value存储。Consul提供了简单的http请求来满足用户的动态配置、特征标记、协调、leader选举等需求。<br>4.多数据中心。Consul原生支持多数据库中心。用户不必为了多数据中心而自己做抽象。</p><h3 id="Consul安装"><a href="#Consul安装" class="headerlink" title="Consul安装"></a>Consul安装</h3><p>去官网下载对应的版本<br>官网地址：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a></p><p>windows 版本直接解压 然后进入对应的文件夹路径 打开cmd 执行consul agent -dev即可<br>下面是成功图<br><img src="/images/SpringCloud/Consul/consul-1.png"></p><p>然后访问<a href="http://localhost:8500/" target="_blank" rel="noopener">http://localhost:8500/</a> 就可以看到界面了。<br><img src="/images/SpringCloud/Consul/consul-2.png"></p><p>##Spring Cloud Consul</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Spring Cloud Consul 是通过自动配置，对Spring 环境绑定和其他惯用的Spring模块编程，为SpringBoot应用提供了Consul集成，只需要一些简单的注解，就可以快速启动和配置Consul，并用它构建大型分布式系统。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1.Spring Cloud Consul 作为Spring Cloud 和Consul 的桥梁，对两者都有良好的支持。<br>2.服务发现。实例可以向Consul注册服务，客户端可以使用Spring bean来发现服务的提供方<br>3.支持Ribbon，客户端负载均衡。<br>4.支持Zuul，服务网关。<br>5.分布式配置中心，使用的Consul的K/V存储。<br>6.控制总线，使用的是Consul enents。</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="consul-provider"><a href="#consul-provider" class="headerlink" title="consul-provider"></a>consul-provider</h3><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consul-provider</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 8500</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.comtroller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">//注意：新版Spring Cloud Consul默认注册的健康检查地址为/actuator/health</span><br><span class="line">@GetMapping(<span class="string">"/actuator/health"</span>)</span><br><span class="line">public String <span class="function"><span class="title">health</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">&#125;</span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">public String hello(@PathVariable(<span class="string">"name"</span>)String name) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"Hello:"</span>+name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="consul-consumer"><a href="#consul-consumer" class="headerlink" title="consul-consumer"></a>consul-consumer</h3><p>客户端总体和之前Feign写的客户端基本一致….毕竟只是换了一个服务治理的框。</p><h4 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里由于选择Feign作为服务调用的组件。</p><h4 id="启动项添加-EnableFeignClients注解"><a href="#启动项添加-EnableFeignClients注解" class="headerlink" title="启动项添加@EnableFeignClients注解"></a>启动项添加@EnableFeignClients注解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringCloudLeaning5ConsulConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning5ConsulConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consul-consumer</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 8500</span><br></pre></td></tr></table></figure><h4 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line">@FeignClient(<span class="string">"consul-provider"</span>)</span><br><span class="line">public interface HelloService &#123;</span><br><span class="line">@GetMapping(value=<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">String sayHello(@PathVariable(<span class="string">"name"</span>)String name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.HelloService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">HelloService helloService;</span><br><span class="line">//注意：新版Spring Cloud Consul默认注册的健康检查地址为/actuator/health</span><br><span class="line">@GetMapping(<span class="string">"/actuator/health"</span>)</span><br><span class="line">public String <span class="function"><span class="title">health</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">public String sayHello(@PathVariable(<span class="string">"name"</span>)String name) &#123;</span><br><span class="line"><span class="built_in">return</span> helloService.sayHello(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动consul ，server，client<br>访问<a href="http://localhost:8082/hello/wangs" target="_blank" rel="noopener">http://localhost:8082/hello/wangs</a><br>页面显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello:wangs</span><br></pre></td></tr></table></figure></p><p>成功~</p><h3 id="consul-config"><a href="#consul-config" class="headerlink" title="consul-config"></a>consul-config</h3><p>整体来讲，写法和Spring Cloud Config基本一致~</p><h4 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8083</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consul-config</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 8500</span><br></pre></td></tr></table></figure><h4 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">@Component</span><br><span class="line">@RefreshScope//参数值修改后自动刷新</span><br><span class="line">public class ConfigEntity &#123;</span><br><span class="line">@Value(<span class="string">"<span class="variable">$&#123;foo.bar.name&#125;</span>"</span>)</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.ConfigEntity;</span><br><span class="line">@RestController</span><br><span class="line">public class EntityController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">ConfigEntity configEntity;</span><br><span class="line">@GetMapping(<span class="string">"/getName"</span>)</span><br><span class="line">public String <span class="function"><span class="title">getEntityName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> configEntity.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/actuator/health"</span>)</span><br><span class="line">public String <span class="function"><span class="title">health</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>启动Consul，访问：<a href="http://localhost:8500/ui/dc1/kv，或者访问http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500/ui/dc1/kv，或者访问http://localhost:8500</a>  后点击Key/Value，<br>点击创建，然后输入如下K/V<br><img src="/images/SpringCloud/Consul/consul-3.png"><br>这里解释一下<br>参数的K为config/consul-config/foo.bar.name<br>也就是config文件夹下的consul-config(application name)下的foo.bar.name 这个参数<br>然后value就对应这个参数。</p><p>然后访问<a href="http://localhost:8083/getName" target="_blank" rel="noopener">http://localhost:8083/getName</a>  就可以看到显示的参数为你设置的Value，然后修改参数，再刷新<a href="http://localhost:8083/getName" target="_blank" rel="noopener">http://localhost:8083/getName</a>  就可以看到数值已经修改啦。<br>至此，参数自动刷新已完成。</p><p>参考文献<br>    《重新定义SpringCloud实战》——许进</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Consul简介&quot;&gt;&lt;a href=&quot;#Consul简介&quot; class=&quot;headerlink&quot; title=&quot;Consul简介&quot;&gt;&lt;/a&gt;Consul简介&lt;/h2&gt;&lt;h3 id=&quot;什么是Consul&quot;&gt;&lt;a href=&quot;#什么是Consul&quot; class=&quot;headerlink&quot; title=&quot;什么是Consul&quot;&gt;&lt;/a&gt;什么是Consul&lt;/h3&gt;&lt;p&gt;Consul是一个分布式高可用的服务网络解决方案，提供包含服务发现、配置和分段功能在内的全功能控制面板，这些功能每一个可以单独使用，也可以一起使用以构建完整的服务网络。
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(7)刷新配置中心信息</title>
    <link href="http://yoursite.com/2019/01/14/SpringCloud%E5%AD%A6%E4%B9%A0-7-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2019/01/14/SpringCloud学习-7-刷新配置中心信息/</id>
    <published>2019-01-14T14:47:56.000Z</published>
    <updated>2019-01-15T12:44:55.781Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们学习了如何通过配置中心客户端获取服务端的配置信息，但是配置信息可能会发生变动，所以这次来学习一下如何手动刷新配置信息，这样不用重启项目也可以获取最新的配置信息</p><p>注：本次代码是延续上次服务端和客户端的代码<a id="more"></a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><p>在之前的Client客户端的基础上添加以下依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--做简单的安全和端点开放  --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这个包是安全的依赖，需要进行权限过滤，不进行端点拦截</p><h3 id="application-properties文件"><a href="#application-properties文件" class="headerlink" title="application.properties文件"></a>application.properties文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoints.health.show-details=always</span><br></pre></td></tr></table></figure><p>由于F版的权限提高了(因为我默认使用的是目前的最新版本SpringBoot2.1.1RELEASE，其自动下载的Cloud包也是最新版，也就是F版)，所以需要额外添加上面的内容。<br>management.endpoints.web.exposure.include=* 这个的意思就是说包含所有端点信息，默认情况下，只是打开了health、info的端点，management.endpoints.health.show-details=always表示总是以详细的信息展示。</p><h3 id="添加安全配置"><a href="#添加安全配置" class="headerlink" title="添加安全配置"></a>添加安全配置</h3><p>创建SecurityConfiguration类继承WebSecurityConfigurerAdapter。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">@Configuration</span><br><span class="line">public class SecurityConfiguration extends WebSecurityConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">http.csrf().<span class="built_in">disable</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码主要是关闭端点的安全效验</p><h3 id="Controller类变更"><a href="#Controller类变更" class="headerlink" title="Controller类变更"></a>Controller类变更</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.comtroller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.ConfigInfoPropertise;</span><br><span class="line">@RefreshScope</span><br><span class="line">@RestController</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private ConfigInfoPropertise configInfoPropertise;</span><br><span class="line">@GetMapping(<span class="string">"/getConfigInfo"</span>)</span><br><span class="line">public String <span class="function"><span class="title">getConfigInfo</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> configInfoPropertise.getConfig();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加了一个注解@RefreshScope。</p><h3 id="ConfigInfoPropertise类变更"><a href="#ConfigInfoPropertise类变更" class="headerlink" title="ConfigInfoPropertise类变更"></a>ConfigInfoPropertise类变更</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RefreshScope</span><br><span class="line">public class ConfigInfoPropertise &#123;</span><br><span class="line">@Value(<span class="string">"<span class="variable">$&#123;cn.springcloud.book.config&#125;</span>"</span>)</span><br><span class="line">private String config;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getConfig</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setConfig(String config) &#123;</span><br><span class="line">this.config = config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说说@RefreshScope这个注解的意思吧，被这个注解修饰的Bean都是延时加载的，只有在第一次访问的时候才会被初始化，刷新Bean也是同理，下次访问时会创建一个新的对象。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动server 和client  ，访问<a href="http://localhost:9091/getConfigInfo，页面显示" target="_blank" rel="noopener">http://localhost:9091/getConfigInfo，页面显示</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i am the git configuration file from <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>然后修改测试的配置文件，并提交到git上。这时候刷新页面发现内容并没有变化，这时候需要手动刷新一次，访问地址：<a href="http://localhost:9091/actuator/refresh" target="_blank" rel="noopener">http://localhost:9091/actuator/refresh</a><br>注:需要使用post请求方式，请自行使用postman或者soapUI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"config.client.version"</span>,</span><br><span class="line">    <span class="string">"cn.springcloud.book.config"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后再刷新那个页面，就可以看到显示的内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i am the git configuration file from <span class="built_in">test</span> edit2</span><br></pre></td></tr></table></figure></p><p>ps:这是我刚刚改的…..</p><h2 id="案例2-结合Spring-Cloud-Bus-实现热刷新"><a href="#案例2-结合Spring-Cloud-Bus-实现热刷新" class="headerlink" title="案例2 结合Spring Cloud Bus 实现热刷新"></a>案例2 结合Spring Cloud Bus 实现热刷新</h2><p>如果每次都要用户手动刷新的话，那么当服务特别多的时候，那么就会显得特别麻烦，而且如果遗漏的话会导致大量错误，所以我们需要热刷新</p><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><p>用户更新配置信息时，检查到git hook变化，触发hook配置地址的调用，Config Server 接收到请求并发布消息，Bus将消息发送到config client,当config client接收到信息后会重新发送请求加载配置信息。<br>所以这里需要用到MQ，这里使用的是RabbitMQ</p><h3 id="服务端编写"><a href="#服务端编写" class="headerlink" title="服务端编写"></a>服务端编写</h3><p>新建项目 config-server-bus</p><h4 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里由于需要用到RabbitMQ，和SpringCloudBus，所以需要导入spring-cloud-starter-bus-amqp 这个包，然后由于需要刷新，所以需要actuator包</p><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/zxc785009111/wangshun-spring-cloud-config.git</span><br><span class="line">          username: 账号</span><br><span class="line">          password: 密码</span><br><span class="line">          search-paths:</span><br><span class="line">          - SPRING-CLOUD-CONFIG</span><br><span class="line">  application:</span><br><span class="line">    name: sc-config-server-bus-git</span><br><span class="line">    <span class="comment">#配置rabbitmq</span></span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 5672</span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 9090</span><br></pre></td></tr></table></figure><h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoints.health.show-details=always</span><br></pre></td></tr></table></figure><h4 id="关闭端点验证"><a href="#关闭端点验证" class="headerlink" title="关闭端点验证"></a>关闭端点验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">@Configuration</span><br><span class="line">/**</span><br><span class="line"> * 关闭端点安全认证</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月15日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line">public class SecurityConfiguration extends WebSecurityConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">http.csrf().<span class="built_in">disable</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动类添加-EnableConfigServer注解"><a href="#启动类添加-EnableConfigServer注解" class="headerlink" title="启动类添加@EnableConfigServer注解"></a>启动类添加@EnableConfigServer注解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line">@EnableConfigServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringCloudLeaning4ConfigServerBusApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning4ConfigServerBusApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端编写"><a href="#客户端编写" class="headerlink" title="客户端编写"></a>客户端编写</h3><p>新建项目 config-client-bus</p><h4 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9091</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-cloud-config-client</span><br></pre></td></tr></table></figure><h4 id="appplication-properties"><a href="#appplication-properties" class="headerlink" title="appplication.properties"></a>appplication.properties</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoints.health.show-details=always</span><br></pre></td></tr></table></figure><h4 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      label: master</span><br><span class="line">      uri:</span><br><span class="line">      - http://localhost:9090</span><br><span class="line">      name: config-info</span><br><span class="line">      profile: <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RefreshScope</span><br><span class="line">public class ConfigInfoPropertise &#123;</span><br><span class="line">@Value(<span class="string">"<span class="variable">$&#123;cn.springcloud.book.config&#125;</span>"</span>)</span><br><span class="line">private String config;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getConfig</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setConfig(String config) &#123;</span><br><span class="line">this.config = config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭端点验证-1"><a href="#关闭端点验证-1" class="headerlink" title="关闭端点验证"></a>关闭端点验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">@Configuration</span><br><span class="line">public class SecurityConfiguration extends WebSecurityConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">http.csrf().<span class="built_in">disable</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.comtroller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.ConfigInfoPropertise;</span><br><span class="line">@RefreshScope</span><br><span class="line">@RestController</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private ConfigInfoPropertise configInfoPropertise;</span><br><span class="line">@GetMapping(<span class="string">"/getConfigInfo"</span>)</span><br><span class="line">public String <span class="function"><span class="title">getConfigInfo</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> configInfoPropertise.getConfig();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前的代码基本一致，除了添加了bus的依赖和ribbonMQ，但是添加完成后可以自动实现消息队列的分发还是挺厉害的=。=</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>启动server 和client 访问：<a href="http://localhost:9091/getConfigInfo" target="_blank" rel="noopener">http://localhost:9091/getConfigInfo</a> 显示结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i am the git configuration file from <span class="built_in">test</span> will edit4</span><br></pre></td></tr></table></figure></p><p>修改文件并提交到gitHub上，使用soapUI或者postman调用<a href="http://localhost:9090/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:9090/actuator/bus-refresh</a>    (post请求)<br>可以看到client 的日志如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2019-01-15 20:25:10.636  INFO 13752 --- [o-CmCQS57RHFA-1] trationDelegate<span class="variable">$BeanPostProcessorChecker</span> : Bean <span class="string">'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration'</span> of <span class="built_in">type</span> [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$53af4ef3</span>] is not eligible <span class="keyword">for</span> getting processed by all BeanPostProcessors (<span class="keyword">for</span> example: not eligible <span class="keyword">for</span> auto-proxying)</span><br><span class="line">2019-01-15 20:25:11.774  INFO 13752 --- [o-CmCQS57RHFA-1] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at : http://localhost:9090</span><br><span class="line">2019-01-15 20:25:13.617  INFO 13752 --- [o-CmCQS57RHFA-1] c.c.c.ConfigServicePropertySourceLocator : Located environment: name=config-info, profiles=[<span class="built_in">test</span>], label=master, version=56744539e95cf807ac461f2e40faf57304c1dbd8, state=null</span><br><span class="line">2019-01-15 20:25:13.617  INFO 13752 --- [o-CmCQS57RHFA-1] b.c.PropertySourceBootstrapConfiguration : Located property <span class="built_in">source</span>: CompositePropertySource &#123;name=<span class="string">'configService'</span>, propertySources=[MapPropertySource &#123;name=<span class="string">'configClient'</span>&#125;, MapPropertySource &#123;name=<span class="string">'https://github.com/zxc785009111/wangshun-spring-cloud-config.git/SPRING-CLOUD-CONFIG/config-info-test.yml'</span>&#125;]&#125;</span><br><span class="line">2019-01-15 20:25:13.619  INFO 13752 --- [o-CmCQS57RHFA-1] o.s.boot.SpringApplication               : No active profile <span class="built_in">set</span>, falling back to default profiles: default</span><br><span class="line">2019-01-15 20:25:13.626  INFO 13752 --- [o-CmCQS57RHFA-1] o.s.boot.SpringApplication               : Started application <span class="keyword">in</span> 3.902 seconds (JVM running <span class="keyword">for</span> 172.463)</span><br><span class="line">2019-01-15 20:25:13.832  INFO 13752 --- [o-CmCQS57RHFA-1] o.s.cloud.bus.event.RefreshListener      : Received remote refresh request. Keys refreshed []</span><br><span class="line">2019-01-15 20:25:13.911  INFO 13752 --- [o-CmCQS57RHFA-1] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [localhost:5672]</span><br><span class="line">2019-01-15 20:25:13.919  INFO 13752 --- [o-CmCQS57RHFA-1] o.s.a.r.c.CachingConnectionFactory       : Created new connection: rabbitConnectionFactory.publisher<span class="comment">#3c96d22f:0/SimpleConnection@7ca14907 [delegate=amqp://guest@127.0.0.1:5672/, localPort= 49513]</span></span><br><span class="line">2019-01-15 20:25:13.922  INFO 13752 --- [o-CmCQS57RHFA-1] o.s.amqp.rabbit.core.RabbitAdmin         : Auto-declaring a non-durable, auto-delete, or exclusive Queue (springCloudBus.anonymous.0kohNHeDSo-CmCQS57RHFA) durable:<span class="literal">false</span>, auto-delete:<span class="literal">true</span>, exclusive:<span class="literal">true</span>. It will be redeclared <span class="keyword">if</span> the broker stops and is restarted <span class="keyword">while</span> the connection factory is alive, but all messages will be lost.</span><br></pre></td></tr></table></figure></p><p>然后重新访问<a href="http://localhost:9091/getConfigInfo，可以看到显示如下：" target="_blank" rel="noopener">http://localhost:9091/getConfigInfo，可以看到显示如下：</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i am the git configuration file from <span class="built_in">test</span> will edit5</span><br></pre></td></tr></table></figure></p><p>这样就说明结合bus做热刷新成功了。<br>当然我们总不能每次配置完成后都手动执行这个刷新的事情，因此可以将地址配置在WebHooks上面，在提交文件之后自动执行刷新的动作。<br>点击项目设置中找到Hooks 即可，当然这是本地项目所以还是有点难度的….</p><p>参考文献：<br>    《重新定义SpringCloud实战》——许进<br>    <a href="https://blog.csdn.net/qq_35098526/article/details/80009424" target="_blank" rel="noopener">https://blog.csdn.net/qq_35098526/article/details/80009424</a> (RabbitMQ安装启动问题)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我们学习了如何通过配置中心客户端获取服务端的配置信息，但是配置信息可能会发生变动，所以这次来学习一下如何手动刷新配置信息，这样不用重启项目也可以获取最新的配置信息&lt;/p&gt;
&lt;p&gt;注：本次代码是延续上次服务端和客户端的代码
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(6)配置中心Config</title>
    <link href="http://yoursite.com/2019/01/14/SpringCloud%E5%AD%A6%E4%B9%A0-6-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83Config/"/>
    <id>http://yoursite.com/2019/01/14/SpringCloud学习-6-配置中心Config/</id>
    <published>2019-01-14T12:09:58.000Z</published>
    <updated>2019-01-14T14:40:36.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud-Config-配置中心概述"><a href="#Spring-Cloud-Config-配置中心概述" class="headerlink" title="Spring Cloud Config 配置中心概述"></a>Spring Cloud Config 配置中心概述</h2><h3 id="什么是配置中心"><a href="#什么是配置中心" class="headerlink" title="什么是配置中心"></a>什么是配置中心</h3><h4 id="配置中心的由来"><a href="#配置中心的由来" class="headerlink" title="配置中心的由来"></a>配置中心的由来</h4><p>在集中式的开发时代，配置文件基本能够满足，因为那时候配置管理不会成为一个很大的问题，但是在互联网时代，应用都是分布式系统，部署在N台服务器上，想要去献上一台服务器重启肯定不靠谱，而且维护成本也很高，所以配置中心应运而生，配置中心被作用于几种管理不同的欢迎(dev、pr、qa)和不同的集群配置，以及在修改配置后可以将实时动态推送到应用上进行刷新.<a id="more"></a></p><h4 id="配置中心应具有的功能"><a href="#配置中心应具有的功能" class="headerlink" title="配置中心应具有的功能"></a>配置中心应具有的功能</h4><p>1.open API<br>2.业务无关性<br>3.配置生效监控<br>4.一致性K-V存储<br>5.统一配置实时推送<br>6.配合灰度与更新<br>7.配置全局恢复、备份和力士<br>8.高可用集群</p><h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>SpringCloudConfig是一个集中化外部配置的分布式系统，由服务端和客户端组成，不依赖于注册中心，是一个独立的配置中心。其支持多种存储配置文件形态，例如jdbc、Vault、Native、svn、git，其中默认为git</p><h4 id="git版工作原理"><a href="#git版工作原理" class="headerlink" title="git版工作原理"></a>git版工作原理</h4><p>配置客户端启动时会向服务端发起请求，服务端接受到客户端的请求后，根据配置的仓库地址，将git上的文件克隆到本地的一个临时目录中，这个目录是git的本地仓库目录，然后服务端再读取本地文件返回给客户端。这样做的好处是，当git服务器故障或者网络请求异常时，保证服务端仍然可以正常工作。</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="Config-Server创建"><a href="#Config-Server创建" class="headerlink" title="Config Server创建"></a>Config Server创建</h3><h4 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="添加-EnableConfigServer注解开启SpringCloudConfig的服务功能"><a href="#添加-EnableConfigServer注解开启SpringCloudConfig的服务功能" class="headerlink" title="添加@EnableConfigServer注解开启SpringCloudConfig的服务功能"></a>添加@EnableConfigServer注解开启SpringCloudConfig的服务功能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigServer</span><br><span class="line">public class SpringCloudLeaning4ConfigApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning4ConfigApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yml文件配置"><a href="#yml文件配置" class="headerlink" title="yml文件配置"></a>yml文件配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/zxc785009111/wangshun-spring-cloud-config.git</span><br><span class="line">          username: 你的git用户名</span><br><span class="line">          password: 你的git密码</span><br><span class="line">          search-paths:</span><br><span class="line">          - SPRING-CLOUD-CONFIG</span><br><span class="line">  application:</span><br><span class="line">    name: sc-config-git</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 9090</span><br></pre></td></tr></table></figure><p>然后建立一个仓库~建立完成之后，在其中创建一个文件夹，这里我起名为SPRING-CLOUD-CONFIG，然后在该目录下创建1个文件，config-info-test.yml,在配置文件中添加以下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cn: </span><br><span class="line">  springcloud: </span><br><span class="line">    book: </span><br><span class="line">      config: i am the git configuration file from <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>在创建文件之后肯定是要把它上传到gitHub上面的，那么来说说如何在本地上传文件到gitHub 和从gitHub上下载代码<br>上传文件：<a href="https://blog.csdn.net/qq_42815754/article/details/83746492" target="_blank" rel="noopener">https://blog.csdn.net/qq_42815754/article/details/83746492</a><br>下载项目到本地：<a href="https://blog.csdn.net/qq_42815754/article/details/83747583" target="_blank" rel="noopener">https://blog.csdn.net/qq_42815754/article/details/83747583</a><br>上面2个地址写的挺详细的。上传文件大概就是这几个命令git status 、git add xxx、git commit -m “标注” 、git push origin master</p><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>启动项目，访问：<a href="http://localhost:9090/config-info/test/master" target="_blank" rel="noopener">http://localhost:9090/config-info/test/master</a> 可以看到日志中输出了这么一行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-01-14 21:44:29.944  INFO 8020 --- [nio-9090-exec-1] o.s.c.c.s.e.NativeEnvironmentRepository  : Adding property <span class="built_in">source</span>: file:/C:/Users/王瞬/AppData/Local/Temp/config-repo-12429596664206551063/SPRING-CLOUD-CONFIG/config-info-test.yml</span><br></pre></td></tr></table></figure></p><p>页面上显示的内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"config-info"</span>,</span><br><span class="line"><span class="string">"profiles"</span>: [<span class="string">"test"</span>],</span><br><span class="line"><span class="string">"label"</span>: <span class="string">"master"</span>,</span><br><span class="line"><span class="string">"version"</span>: <span class="string">"0911b43ed1eacf8d93d2ccbb5968744bc98b2e36"</span>,</span><br><span class="line"><span class="string">"state"</span>: null,</span><br><span class="line"><span class="string">"propertySources"</span>: [&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"https://github.com/zxc785009111/wangshun-spring-cloud-config.git/SPRING-CLOUD-CONFIG/config-info-test.yml"</span>,</span><br><span class="line"><span class="string">"source"</span>: &#123;</span><br><span class="line"><span class="string">"cn.springcloud.book.config"</span>: <span class="string">"i am the git configuration file from test"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里的话，服务端的配置就暂时告一段落了。接下来说说客户端的配置</p><h3 id="Config-Client-创建"><a href="#Config-Client-创建" class="headerlink" title="Config Client 创建"></a>Config Client 创建</h3><p>创建一个新的项目，config-client</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>为了更好的观察拉去到git上面的配置，这里需要创建一个Controller用于访问返回信息，同时需要创建一个实体，用于注入远程配置上的信息</p><h4 id="实体类代码"><a href="#实体类代码" class="headerlink" title="实体类代码"></a>实体类代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix=<span class="string">"cn.springcloud.book"</span>)</span><br><span class="line">public class ConfigInfoPropertise &#123;</span><br><span class="line"></span><br><span class="line">private String config;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getConfig</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setConfig(String config) &#123;</span><br><span class="line">this.config = config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller代码"><a href="#Controller代码" class="headerlink" title="Controller代码"></a>Controller代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.comtroller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.ConfigInfoPropertise;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private ConfigInfoPropertise configInfoPropertise;</span><br><span class="line">@GetMapping(<span class="string">"/getConfigInfo"</span>)</span><br><span class="line">public String <span class="function"><span class="title">getConfigInfo</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> configInfoPropertise.getConfig();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9091</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-cloud-config-client</span><br></pre></td></tr></table></figure><h4 id="bootstrap-yml-配置"><a href="#bootstrap-yml-配置" class="headerlink" title="bootstrap.yml 配置"></a>bootstrap.yml 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      label: master</span><br><span class="line">      uri:</span><br><span class="line">      - http://localhost:9090</span><br><span class="line">      name: config-info</span><br><span class="line">      profile: <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>这里说一下，由于在SpringBoot中，bootstrap.yml是比application.yml优先加载的，所以它会优先加载远程的配置信息，到此客户端中配置完成<br>然后说一下bootstrap.yml中的各个属性<br>label:代表的是请求哪个git分支，这里我是采用的主分支<br>url：代表请求的config-server地址<br>name：代表请求哪个名称的文件，可以写多个，通过逗号隔开<br>profile：代表哪个分支的文件，比如dev、test、prod</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动项目，server 和client 均启动后，可以在client 的控制台看到这么一条日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-01-14 22:19:09.529  INFO 12628 --- [           main] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at : http://localhost:9090</span><br><span class="line">2019-01-14 22:19:21.927  INFO 12628 --- [           main] c.c.c.ConfigServicePropertySourceLocator : Located environment: name=config-info, profiles=[<span class="built_in">test</span>], label=master, version=0911b43ed1eacf8d93d2ccbb5968744bc98b2e36, state=null</span><br></pre></td></tr></table></figure></p><p>也就是说他去服务端那边获取配置信息去了。</p><p>然后访问<a href="http://localhost:9091/getConfigInfo" target="_blank" rel="noopener">http://localhost:9091/getConfigInfo</a><br>页面显示如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i am the git configuration file from <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>参考文献：<br>    <a href="https://blog.csdn.net/qq_42815754/article/details/83746492" target="_blank" rel="noopener">https://blog.csdn.net/qq_42815754/article/details/83746492</a><br>    <a href="https://blog.csdn.net/qq_42815754/article/details/83747583" target="_blank" rel="noopener">https://blog.csdn.net/qq_42815754/article/details/83747583</a><br>    《重新定义SpringCloud实战》——许进</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-Cloud-Config-配置中心概述&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Config-配置中心概述&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Config 配置中心概述&quot;&gt;&lt;/a&gt;Spring Cloud Config 配置中心概述&lt;/h2&gt;&lt;h3 id=&quot;什么是配置中心&quot;&gt;&lt;a href=&quot;#什么是配置中心&quot; class=&quot;headerlink&quot; title=&quot;什么是配置中心&quot;&gt;&lt;/a&gt;什么是配置中心&lt;/h3&gt;&lt;h4 id=&quot;配置中心的由来&quot;&gt;&lt;a href=&quot;#配置中心的由来&quot; class=&quot;headerlink&quot; title=&quot;配置中心的由来&quot;&gt;&lt;/a&gt;配置中心的由来&lt;/h4&gt;&lt;p&gt;在集中式的开发时代，配置文件基本能够满足，因为那时候配置管理不会成为一个很大的问题，但是在互联网时代，应用都是分布式系统，部署在N台服务器上，想要去献上一台服务器重启肯定不靠谱，而且维护成本也很高，所以配置中心应运而生，配置中心被作用于几种管理不同的欢迎(dev、pr、qa)和不同的集群配置，以及在修改配置后可以将实时动态推送到应用上进行刷新.
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(5)路由网关Zuul</title>
    <link href="http://yoursite.com/2019/01/13/SpringCloud%E5%AD%A6%E4%B9%A0-5-%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3Zuul/"/>
    <id>http://yoursite.com/2019/01/13/SpringCloud学习-5-路由网关Zuul/</id>
    <published>2019-01-13T07:21:39.000Z</published>
    <updated>2019-01-14T07:36:46.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zuul作为路由网关组件，在微服务架构中有着非常重要的作用，用于构建便捷服务(Edge-Service)，致力于动态路由、过滤、监控、弹性伸缩和安全，主要体现在以下六个方面<br>1.Zuul、Ribbon以及Eureka相结合，可以实现智能路由和负载均衡，Zuul等能够将请求流量按照某种策略分发到集群状态的多个服务实例。<br>2.网关将所有服务的API接口整合，并统一对外暴露，外接系统调用API接口时，都是由网关对外暴露的API接口，外接系统不需要知道微服务中个服务相互调用的复杂性。微服务系统也保护了其内部微服务单元的API接口，防止被外界接口调用导致服务敏感信息对外暴露。<br>3.网关服务可以做用户身份认证和权限认证，防止非法请求操作API接口，对服务器起到保护作用。<br>4.网关可以实现监控功能，实时日志输出，对请求进行记录。<br>5.网关可以实现流量监控，在高流量的情况下，对服务进行降级。<br>6.API接口从内部服务器分离出来，方便做测试。<br>……<a id="more"></a></p><h3 id="Zuul的工作原理"><a href="#Zuul的工作原理" class="headerlink" title="Zuul的工作原理"></a>Zuul的工作原理</h3><p>Zuul是通过Servlet来实现的，Zuul通过自定义的ZuulServlet(类似于SpringMVC的DispatcherServlet)来对请求进行控制，Zuul的核心是一系列的过滤器，可以在Http请求发起和响应返回期间执行一系列的过滤器。Zuul包含以下四种过滤器<br>1.PRE过滤器：它是请求路由到具体服务之前执行的，这种类型的过滤器可以作为安全验证，如参数验证，身份验证等等。<br>2.ROUTING过滤器：它用于请求路由到具体的微服务实例，在默认情况下，它使用Http Client进行网络请求。<br>3.POST过滤器：它是在请求已经被路由到微服务后执行的，一般情况下，用作收集统计信息、指标，以及将相应传输给客户端。<br>4.ERROR过滤器:它是在其他过滤器发生错误时执行的。</p><p>Zuul采取动态读取、编译和运行这些过滤器，过滤器之间不能直接相互通信，而是通过RequestContext对象来共享数据，每个请求都会创建一个这样的对象。Zuul过滤器具有以下关键特征<br>1.TYPE:Zuul过滤器的类型，这个类型决定了过滤器在请求的那个阶段起作用。<br>2.Execution Order：规定了过滤器的执行顺序，order值越小，越先执行。<br>3.Criteria：Filter执行所需要的条件<br>4.Action:若符合执行条件，则执行Action(即逻辑代码)。</p><p>当一个客户端Request请求进入Zuul网关服务时，网关首先进入”pre filter”,进行一系列的验证、操作或者判断。然后交给”routing filter”进行路由转发，转发到具体的服务实例进行逻辑处理、返回数据，将Response信息返回给客户端。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="搭建Zuul服务"><a href="#搭建Zuul服务" class="headerlink" title="搭建Zuul服务"></a>搭建Zuul服务</h3><p>创建项目，选择引入Web、Eureka-client、Zuul的包</p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="在启动类上添加-EnableZuulProxy注解"><a href="#在启动类上添加-EnableZuulProxy注解" class="headerlink" title="在启动类上添加@EnableZuulProxy注解"></a>在启动类上添加@EnableZuulProxy注解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">public class SpringCloudLeaning3ZuulClientApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning3ZuulClientApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-zuul</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 5000</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:8761/eureka/</span><br><span class="line">      </span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    hiapi: </span><br><span class="line">      path: /hiapi/**</span><br><span class="line">      serviceId: eureka-client</span><br><span class="line">      </span><br><span class="line">    ribbonapi: </span><br><span class="line">      path: /ribbonapi/**</span><br><span class="line">      serviceId: eureka-ribbon-client</span><br><span class="line">    feignapi: </span><br><span class="line">      path: /feignclient/**</span><br><span class="line">      serviceId: eureka-feign-client</span><br></pre></td></tr></table></figure><p>这里着重说一下这个配置文件中Zuul的配置，在本案例中，Zuul.routes.hiapi.path 和serviceId，这两个配置就可以将所有的/hiapi开头的Url路由到eureka-client服务，其中这个”hiapi”是自己定义的，需要制定它的url和serviceId，如果某个服务存在多个实例，那么Zuul结合Ribbon会做负载均衡，将请求均分的部分路由到不同的服务实例。</p><p>启动eureka-server,eureka-client（启动两个）,eureka-ribbon-client、eureka-fegin-client，在浏览器多次访问<a href="http://localhost:5000/hiapi/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:5000/hiapi/hello/785009111@qq.com</a> ，浏览器会交替显示如下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port:8762 Email:785009111@qq.com</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port:8763 Email:785009111@qq.com</span><br></pre></td></tr></table></figure><p>同理：访问<a href="http://localhost:5000/feignclient/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:5000/feignclient/hello/785009111@qq.com</a>  因为其集成了Feign，同样会交替显示上面的2个内容</p><p>如果说你不需要做Ribbon做负载均衡，可以指定服务实例的Url，用zuul.routes.hiapi.url配置指定，这样就不需要配置serviceId了，但是一般情况不使用这种，除非是此请求比较大，单开服务器这种等等..</p><p>如果说你想指定Url，还想做负载均衡，那么就需要你自己维护负载均衡服务注册列表。首先，需要把ribbon.eureka.enable改成false，然后需要自己维护一份注册列表，以之前写好的hiapi-v1为例，通过配置hiapi-v1.ribbon.listOfServers来配置多个负载均衡，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-zuul</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 5000</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:8761/eureka/</span><br><span class="line">ribbon:</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    hiapi: </span><br><span class="line">      path: /hiapi/**</span><br><span class="line">      serviceId: hiapi-v1</span><br><span class="line">      </span><br><span class="line">    ribbonapi: </span><br><span class="line">      path: /ribbonapi/**</span><br><span class="line">      serviceId: eureka-ribbon-client</span><br><span class="line">    feignapi: </span><br><span class="line">      path: /feignclient/**</span><br><span class="line">      serviceId: eureka-feign-client</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">hiapi-v1: </span><br><span class="line">  ribbon: </span><br><span class="line">    listOfServers: http://localhost:8762,http://localhost:8763</span><br></pre></td></tr></table></figure></p><h4 id="Zuul-使用熔断器"><a href="#Zuul-使用熔断器" class="headerlink" title="Zuul 使用熔断器"></a>Zuul 使用熔断器</h4><p>想在Zuul中实现熔断器，需要实现FallbackProvider 接口，此接口有一个getRoute()方法，用于指定熔断器功能应用于那些路由服务</p><h5 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.hystrix;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.client.ClientHttpResponse;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">@Component</span><br><span class="line">public class ZuulHtstrix implements FallbackProvider&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ClientHttpResponse fallbackResponse(String route, Throwable cause) &#123;</span><br><span class="line"><span class="built_in">return</span> new <span class="function"><span class="title">ClientHttpResponse</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public HttpHeaders <span class="function"><span class="title">getHeaders</span></span>() &#123;</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line"><span class="built_in">return</span> headers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public InputStream getBody() throws IOException &#123;</span><br><span class="line"><span class="built_in">return</span> new ByteArrayInputStream(<span class="string">"error!i am the fallback!"</span>.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getStatusText() throws IOException &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"OK"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line"><span class="built_in">return</span> HttpStatus.OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getRawStatusCode() throws IOException &#123;</span><br><span class="line"><span class="built_in">return</span> 200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void <span class="function"><span class="title">close</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">getRoute</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"eureka-client"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动eureka-server和zuul-client  然后访问地址：<a href="http://localhost:5000/hiapi/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:5000/hiapi/hello/785009111@qq.com</a><br>页面会显示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error!i am the fallback!</span><br></pre></td></tr></table></figure></p><p>如果需要所有的服务都加熔断功能，只需要在getRoute()方法上返回一个*<br>例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">getRoute</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"*"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在Zuul中使用过滤器"><a href="#在Zuul中使用过滤器" class="headerlink" title="在Zuul中使用过滤器"></a>在Zuul中使用过滤器</h4><p>自定义一个过滤器其实并不复杂，只需要集成ZuulFilter，并实现其中的抽象方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.filters;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line">import com.netflix.zuul.exception.ZuulException;</span><br><span class="line">@Component</span><br><span class="line">public class MyZuulFilter extends ZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object run() throws ZuulException &#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">HttpServletRequest request = ctx.getRequest();</span><br><span class="line">String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(token)) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ctx.getResponse().getWriter().write(<span class="string">"token is empty"</span>);</span><br><span class="line">ctx.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean <span class="function"><span class="title">shouldFilter</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int <span class="function"><span class="title">filterOrder</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">filterType</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"pre"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>filterType()这个方法是指设置条件类型，就和之前说的4个一致。<br>filterOrder()是指过滤顺序，数字越小越先执行<br>shouldFilter()这个表示该过滤器是否过滤逻辑，如果为true,则执行run方法，否则不执行<br>run()  就是执行判断逻辑</p><p>这里有一点需要注意的：就是重写response的时候  一定要写ctx.setSendZuulResponse(false);</p><p>否则会报错Caused by: java.lang.IllegalStateException: getWriter() has already been called for this response</p><p>启动eureka-server,zuul-client,访问<a href="http://localhost:5001/hiapi/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:5001/hiapi/hello/785009111@qq.com</a><br>显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token is empty</span><br></pre></td></tr></table></figure></p><p>访问：<a href="http://localhost:5001/hiapi/hello/785009111@qq.com?token=123" target="_blank" rel="noopener">http://localhost:5001/hiapi/hello/785009111@qq.com?token=123</a><br>显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error!i am the fallback!</span><br></pre></td></tr></table></figure></p><p>没毛病emmmm因为我eureka-client没启动…..</p><p>参考文献：<br>    《深入理解Spring Cloud与微服务构建》——方志朋</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Zuul作为路由网关组件，在微服务架构中有着非常重要的作用，用于构建便捷服务(Edge-Service)，致力于动态路由、过滤、监控、弹性伸缩和安全，主要体现在以下六个方面&lt;br&gt;1.Zuul、Ribbon以及Eureka相结合，可以实现智能路由和负载均衡，Zuul等能够将请求流量按照某种策略分发到集群状态的多个服务实例。&lt;br&gt;2.网关将所有服务的API接口整合，并统一对外暴露，外接系统调用API接口时，都是由网关对外暴露的API接口，外接系统不需要知道微服务中个服务相互调用的复杂性。微服务系统也保护了其内部微服务单元的API接口，防止被外界接口调用导致服务敏感信息对外暴露。&lt;br&gt;3.网关服务可以做用户身份认证和权限认证，防止非法请求操作API接口，对服务器起到保护作用。&lt;br&gt;4.网关可以实现监控功能，实时日志输出，对请求进行记录。&lt;br&gt;5.网关可以实现流量监控，在高流量的情况下，对服务进行降级。&lt;br&gt;6.API接口从内部服务器分离出来，方便做测试。&lt;br&gt;……
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(4)熔断器Hystrix</title>
    <link href="http://yoursite.com/2019/01/13/SpringCloud%E5%AD%A6%E4%B9%A0-4-%E7%86%94%E6%96%AD%E5%99%A8Hystrix/"/>
    <id>http://yoursite.com/2019/01/13/SpringCloud学习-4-熔断器Hystrix/</id>
    <published>2019-01-13T04:50:56.000Z</published>
    <updated>2019-01-14T08:14:03.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hystrix简介"><a href="#Hystrix简介" class="headerlink" title="Hystrix简介"></a>Hystrix简介</h2><h3 id="Hystrix是什么"><a href="#Hystrix是什么" class="headerlink" title="Hystrix是什么"></a>Hystrix是什么</h3><p>在分布式系统中，服务与服务之间的依赖错综复杂，不可避免的情况就是某些服务出现故障，导致依赖于它们的其他服务出现远程调用的线程阻塞，Hystrix是Netfix公司开源的一个项目，它提供了熔断器的功能，能够阻止分布式系统中出现联动故障。Hystrix是通过隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高整个分布式系统的弹性。</p><h3 id="Hystrix解决了什么问题"><a href="#Hystrix解决了什么问题" class="headerlink" title="Hystrix解决了什么问题"></a>Hystrix解决了什么问题</h3><p>假设某一个应用程序依赖了30个服务，每个服务的正常运行时间为99.99%，对于单个服务而言，这几乎是完美的，但是30个服务一起就只有99.7%的正常运行时间和百分之0.3的不可用时间，那么10亿次请求中就有三百万次的失败，实际情况比这可能还要糟糕。<br>当某个服务出现网络故障的时候，整个用户的请求会出现阻塞状态，在高并发的情况下，单个服务的不可用会导致整个请求都处于延迟状态，可能在几秒钟就会导致整个服务先整负载饱和导致宕机。这就是雪崩效应。</p><p>为了防止雪崩效应，因此产生了熔断器模型，Hystrix是在目前表现非常好的一个熔断器模型实现的开源组件，它是SpringCloud组件不可或缺的一部分……<a id="more"></a></p><h3 id="Hystrix设计原则"><a href="#Hystrix设计原则" class="headerlink" title="Hystrix设计原则"></a>Hystrix设计原则</h3><p>1.防止单个服务的故障耗尽整个服务的Servlet容器的线程资源</p><p>2.快速失败机制，如果某一个服务出现故障，则调用该服务的请求快速失败，而不是线程等待。</p><p>3.提供回退(fallback)方案，在请求发生故障时，提供设定好的回退方案</p><p>4.使用熔断机制，防止故障扩散到其他服务</p><p>5.提供熔断器的监控组件Hystrix Dashboard，可以实时监控熔断器的状态</p><h3 id="Hystrix工作机制"><a href="#Hystrix工作机制" class="headerlink" title="Hystrix工作机制"></a>Hystrix工作机制</h3><p>首先，当某个API接口的失败次数在一定时间内小于设定的阈值时，熔断器处于关闭，该API正常提供服务，当该API接口处理请求失败次数大于设定阈值时，Hystrix判定该API出现故障，打开熔断器，此时请求该API的接口会执行快速失败逻辑(即fallback回退的逻辑)，不执行业务逻辑，请求的线程不会出于阻塞状态。处于打开状态的熔断器，在一段时间之后会处于半打开的状态，并将一定数量的请求执行正常逻辑，其他的会执行快速失败，若执行正常的请求失败了，则熔断器继续打开，否则熔断器关闭，这样熔断器就具有了自我修复的能力。</p><h2 id="在RestTemplate和Ribbon-上使用熔断器"><a href="#在RestTemplate和Ribbon-上使用熔断器" class="headerlink" title="在RestTemplate和Ribbon 上使用熔断器"></a>在RestTemplate和Ribbon 上使用熔断器</h2><h3 id="pom文件添加依赖"><a href="#pom文件添加依赖" class="headerlink" title="pom文件添加依赖"></a>pom文件添加依赖</h3><p>首先在之前写过的基于RestTemplate和Ribbon的项目中的pom文件中添加以下依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="项目启动项添加-EnableHystrix注解"><a href="#项目启动项添加-EnableHystrix注解" class="headerlink" title="项目启动项添加@EnableHystrix注解"></a>项目启动项添加@EnableHystrix注解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableHystrix</span><br><span class="line">public class SpringCloudLeaning1RibbonApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning1RibbonApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改造Service"><a href="#改造Service" class="headerlink" title="改造Service"></a>改造Service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class RibbonService &#123;</span><br><span class="line">@Autowired</span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@HystrixCommand(fallbackMethod=<span class="string">"helloError"</span>)</span><br><span class="line">public String hello(String email) &#123;</span><br><span class="line"><span class="built_in">return</span> restTemplate.getForObject(<span class="string">"http://PRODUCT/hello?email="</span>+email,String.class );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String helloError(String email) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"helllo"</span>+email+<span class="string">",sorry,error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法上加入@HystrixCommand  这样这个方法就开启了熔断器功能，其中fallbackMethod是为了处理回退所执行的方法。</p><p>运行服务端，客户端和ribbon客户端，访问<a href="http://localhost:8764/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:8764/hello/785009111@qq.com</a><br>这里页面返回的结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helllo785009111@qq.com,sorry,error</span><br></pre></td></tr></table></figure></p><p>直接就执行了错误的方法，原因是因为我之前在写Feign的时候把application-name给改了..改成了eureka-client，而这里还是沿用的product，将product改成eureka-client 再执行一次就可以发现正常的响应了。</p><p>除了这种出现方式，正常的测试应该是将服务提供方的客户端关闭，使得无法调用来测试，当然前缀写错也是无法调用的233333</p><h2 id="在Feign上使用熔断器"><a href="#在Feign上使用熔断器" class="headerlink" title="在Feign上使用熔断器"></a>在Feign上使用熔断器</h2><h3 id="pon文件添加依赖"><a href="#pon文件添加依赖" class="headerlink" title="pon文件添加依赖"></a>pon文件添加依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置文件中配置开启hystrix"><a href="#配置文件中配置开启hystrix" class="headerlink" title="配置文件中配置开启hystrix"></a>配置文件中配置开启hystrix</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-feign-client</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:8761/eureka/</span><br><span class="line">      </span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>只有最后那一部分是额外添加的，开始hystrix功能</p><p>Feign中对于熔断逻辑的配置是在@FeignClient注解上的，其写法为callback=xxx.class，其中xxx必须实现被@FeignClient注解修饰的接口,最后需要以SpringBean的形式注入到IOC容器中</p><h3 id="熔断器处理逻辑类"><a href="#熔断器处理逻辑类" class="headerlink" title="熔断器处理逻辑类"></a>熔断器处理逻辑类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.IEurekaClientFeign;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class HiHystrix implements IEurekaClientFeign&#123;</span><br><span class="line">@Override</span><br><span class="line">public String sayHelloFromEurekaClient(String email) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"hi:"</span>+email+<span class="string">",sorry,error!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改IEurekaClientFeign接口"><a href="#修改IEurekaClientFeign接口" class="headerlink" title="修改IEurekaClientFeign接口"></a>修改IEurekaClientFeign接口</h3><p>其实就是在注解后面加一个fallback=xxx.class<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.config.FeignConfig;</span><br><span class="line">import com.wangshun.leaning.service.impl.HiHystrix;</span><br><span class="line"></span><br><span class="line">@FeignClient(value=<span class="string">"eureka-client"</span>,configuration=FeignConfig.class,fallback=HiHystrix.class)</span><br><span class="line">public interface IEurekaClientFeign &#123;</span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;email&#125;"</span>)</span><br><span class="line">String sayHelloFromEurekaClient(@PathVariable(<span class="string">"email"</span>) String email);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试，启动server，client和feign-client-访问http-localhost-8765-hello-785009111-qq-com"><a href="#测试，启动server，client和feign-client-访问http-localhost-8765-hello-785009111-qq-com" class="headerlink" title="测试，启动server，client和feign-client,访问http://localhost:8765/hello/785009111@qq.com"></a>测试，启动server，client和feign-client,访问<a href="http://localhost:8765/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:8765/hello/785009111@qq.com</a></h3><p>显示内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port:8762 Email:785009111@qq.com</span><br></pre></td></tr></table></figure></p><p>关闭eureka-client，重新访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hi:785009111@qq.com,sorry,error!</span><br></pre></td></tr></table></figure></p><h2 id="使用Hystrix-DashBoard-监控熔断器状态"><a href="#使用Hystrix-DashBoard-监控熔断器状态" class="headerlink" title="使用Hystrix DashBoard 监控熔断器状态"></a>使用Hystrix DashBoard 监控熔断器状态</h2><p>Hystrix DashBoard 是监控Hystrix的熔断器状况的一个组件，提供了数据监控和友好的展示界面</p><h3 id="在RestTemplate中使用"><a href="#在RestTemplate中使用" class="headerlink" title="在RestTemplate中使用"></a>在RestTemplate中使用</h3><h4 id="pom文件中添加依赖"><a href="#pom文件中添加依赖" class="headerlink" title="pom文件中添加依赖"></a>pom文件中添加依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="在程序启动类上添加-注解开启Hystrix-DashBoard的功能"><a href="#在程序启动类上添加-注解开启Hystrix-DashBoard的功能" class="headerlink" title="在程序启动类上添加 注解开启Hystrix DashBoard的功能"></a>在程序启动类上添加 注解开启Hystrix DashBoard的功能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableHystrix</span><br><span class="line">@EnableHystrixDashboard</span><br><span class="line">public class SpringCloudLeaning1RibbonApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning1RibbonApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动server ，eureka-client和ribbon-client，访问<a href="http://localhost:8764/hystrix，即可看到以下界面" target="_blank" rel="noopener">http://localhost:8764/hystrix，即可看到以下界面</a><br><img src="/images/SpringCloud/Hystrix/hystrix-1.png"><br>参考文献：<br>    《深入理解Spring Cloud与微服务构建》——方志朋</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hystrix简介&quot;&gt;&lt;a href=&quot;#Hystrix简介&quot; class=&quot;headerlink&quot; title=&quot;Hystrix简介&quot;&gt;&lt;/a&gt;Hystrix简介&lt;/h2&gt;&lt;h3 id=&quot;Hystrix是什么&quot;&gt;&lt;a href=&quot;#Hystrix是什么&quot; class=&quot;headerlink&quot; title=&quot;Hystrix是什么&quot;&gt;&lt;/a&gt;Hystrix是什么&lt;/h3&gt;&lt;p&gt;在分布式系统中，服务与服务之间的依赖错综复杂，不可避免的情况就是某些服务出现故障，导致依赖于它们的其他服务出现远程调用的线程阻塞，Hystrix是Netfix公司开源的一个项目，它提供了熔断器的功能，能够阻止分布式系统中出现联动故障。Hystrix是通过隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高整个分布式系统的弹性。&lt;/p&gt;
&lt;h3 id=&quot;Hystrix解决了什么问题&quot;&gt;&lt;a href=&quot;#Hystrix解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;Hystrix解决了什么问题&quot;&gt;&lt;/a&gt;Hystrix解决了什么问题&lt;/h3&gt;&lt;p&gt;假设某一个应用程序依赖了30个服务，每个服务的正常运行时间为99.99%，对于单个服务而言，这几乎是完美的，但是30个服务一起就只有99.7%的正常运行时间和百分之0.3的不可用时间，那么10亿次请求中就有三百万次的失败，实际情况比这可能还要糟糕。&lt;br&gt;当某个服务出现网络故障的时候，整个用户的请求会出现阻塞状态，在高并发的情况下，单个服务的不可用会导致整个请求都处于延迟状态，可能在几秒钟就会导致整个服务先整负载饱和导致宕机。这就是雪崩效应。&lt;/p&gt;
&lt;p&gt;为了防止雪崩效应，因此产生了熔断器模型，Hystrix是在目前表现非常好的一个熔断器模型实现的开源组件，它是SpringCloud组件不可或缺的一部分……
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(3)声明式调用Feign</title>
    <link href="http://yoursite.com/2019/01/12/SpringCloud%E5%AD%A6%E4%B9%A0-3-%E5%A3%B0%E6%98%8E%E5%BC%8F%E8%B0%83%E7%94%A8Feign/"/>
    <id>http://yoursite.com/2019/01/12/SpringCloud学习-3-声明式调用Feign/</id>
    <published>2019-01-12T07:24:07.000Z</published>
    <updated>2019-01-12T10:23:12.652Z</updated>
    
    <content type="html"><![CDATA[<p>在之前学习了如何使用RestTemplate来消费服务，如何结合Ribbon在消费服务的时候实现负载均衡，这次来说说Feign…….<a id="more"></a></p><p>Feign采用的是声明式API的接口风格，将 Java Http客户端绑定在其内部，Feign的首要目标是将Java Http客户端的调用过程变得简单。</p><h2 id="写一个Feign客户端"><a href="#写一个Feign客户端" class="headerlink" title="写一个Feign客户端"></a>写一个Feign客户端</h2><p>新建一个SpringBoot项目，例如eureka-feign-client</p><h3 id="pon依赖"><a href="#pon依赖" class="headerlink" title="pon依赖"></a>pon依赖</h3><p>这里需要依赖eureka client 和feign的包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-feign-client</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8764</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:8761/eureka/</span><br></pre></td></tr></table></figure><p>配置文件和之前的差距不大，基本一致</p><h3 id="启动项添加-EnableFeignClients开启Fegin"><a href="#启动项添加-EnableFeignClients开启Fegin" class="headerlink" title="启动项添加@EnableFeignClients开启Fegin"></a>启动项添加@EnableFeignClients开启Fegin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class SpringCloudLeaning2FeiginClientApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning2FeiginClientApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三步结束之后，该程序就已经具备了Feign的功能，接下来来写一个程序来远程调用eureka-client的”/hello”接口<br>在写这个接口之前，先来说说这个接口需要什么，这个接口需要使用一个注解@FeignClient来声明这是一个Feign Client，注解中需要使用2个属性 value 指的是远程服务的服务名，configuration指的是其客户端的配置类，</p><h3 id="Feign-配置类"><a href="#Feign-配置类" class="headerlink" title="Feign 配置类"></a>Feign 配置类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import feign.Retryer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class FeignConfig &#123;</span><br><span class="line">@Bean</span><br><span class="line">public Retryer <span class="function"><span class="title">feignRetruer</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> new Retryer.Default(100, TimeUnit.SECONDS.toMillis(1), 5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加了Retryer 这个Bean的注入，这样的话Feign在远程调用失败以后会自动进行重试。</p><h3 id="Feign-接口"><a href="#Feign-接口" class="headerlink" title="Feign 接口"></a>Feign 接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.config.FeignConfig;</span><br><span class="line"></span><br><span class="line">@FeignClient(value=<span class="string">"eureka-client"</span>,configuration=FeignConfig.class)</span><br><span class="line">public interface IEurekaClientFeign &#123;</span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;email&#125;"</span>)</span><br><span class="line">String sayHelloFromEurekaClient(@PathVariable(<span class="string">"email"</span>) String emal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是@FeignClient，这个注解是开启Feign客户端，只能用于接口的一个注解，后面的2个属性value  就是指定其访问的服务提供方的客户端名称，config就是这个客户端的配置类。</p><p>这里要注意的是首先是接口中的方法，方法上面的注解是比如和你要调用的接口的内容一致的，比如我们调用的是一个get接口，地址为/hello/{email}（这里服务提供方的接口被我改动了，改成了restful的接口风格，配置文件中服务名也被我从product 改成了eureka-client）,那么这里的地址也要这么写，请求方式为get，那么这里可以requestMapping注解中添加属性，或者直接@GetMapping都可以。</p><p>再说说方法中的参数，这里默认的传参注解和你要调用的方法中的内容是要写的完全一致~，我刚才尝试了把@PathVariable改成了@requestParam(“email”)，这样也是可以的，但是最好默认和调用接口保持一致。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.IEurekaClientFeign;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Primary</span><br><span class="line">public class HelloService &#123;</span><br><span class="line">@Autowired</span><br><span class="line">IEurekaClientFeign eurekaClientFeign;</span><br><span class="line"></span><br><span class="line">public String hello(String email) &#123;</span><br><span class="line"><span class="built_in">return</span> eurekaClientFeign.sayHelloFromEurekaClient(email);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.impl.HelloService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class Controller &#123;</span><br><span class="line">@Autowired</span><br><span class="line">HelloService helloService;</span><br><span class="line">@RequestMapping(<span class="string">"/hello/&#123;email&#125;"</span>)</span><br><span class="line">public String hello(@PathVariable(<span class="string">"email"</span>)String email) &#123;</span><br><span class="line"><span class="built_in">return</span> helloService.hello(email);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用SOAPui 或者postMan测试一下就可以了，访问<a href="http://localhost:8765/hello/785009111@qq.com，页面会轮流显示port:8762" target="_blank" rel="noopener">http://localhost:8765/hello/785009111@qq.com，页面会轮流显示port:8762</a> Email:<a href="mailto:785009111@qq.com" target="_blank" rel="noopener">785009111@qq.com</a>  和port:8763 Email:<a href="mailto:785009111@qq.com" target="_blank" rel="noopener">785009111@qq.com</a></p><p>目前测试的结果，Feign对于2个节点的负载均衡的概率大概是1比1  感觉比Ribbon 原本的要好一些~</p><p>参考文献：<br>    《深入理解Spring Cloud与微服务构建》——方志朋</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前学习了如何使用RestTemplate来消费服务，如何结合Ribbon在消费服务的时候实现负载均衡，这次来说说Feign…….
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(2)负载均衡Ribbon与RestTemplate结合</title>
    <link href="http://yoursite.com/2019/01/10/SpringCloud%E5%AD%A6%E4%B9%A0-2-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/"/>
    <id>http://yoursite.com/2019/01/10/SpringCloud学习-2-负载均衡Ribbon/</id>
    <published>2019-01-10T13:18:58.000Z</published>
    <updated>2019-01-12T07:24:52.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="负载均衡简介"><a href="#负载均衡简介" class="headerlink" title="负载均衡简介"></a>负载均衡简介</h2><p>负载均衡是指将负载分摊到多个执行单元上，常见的负载均衡有两种，一种是独立进程单元，通过负载均衡策略，将请求分发到不同的执行单元上，例如Nginx，另一种是将负载均衡逻辑以代码的型视封装到服务消费者的客户端上，服务消费者通过客户端维护了一份服务提供者的列表，有了信息列表，通过负载均衡策略将请求分摊到多个服务提供者，从而达到负载均衡的目的</p><h2 id="Ribbon-简介"><a href="#Ribbon-简介" class="headerlink" title="Ribbon 简介"></a>Ribbon 简介</h2><p>Ribbon 是Netfix公司开源的一个负载均衡的组件，它属于上述的第二种方式，是将负载均衡的逻辑封装再客户端，并运行在客户端的进程里。Ribbon是一个经过云端测试的IPC库，可以很好的控制HTTP和TCP客户端的负载均衡行为</p><p>在SpringCloud中，Ribbon作为服务消费者的负载均衡，有两种使用方式，一种是和RestTemplate结合，还有一种是和Feign结合，这次先说前者……<a id="more"></a></p><h2 id="Ribbon-结合RestTemplate实现负载均衡"><a href="#Ribbon-结合RestTemplate实现负载均衡" class="headerlink" title="Ribbon 结合RestTemplate实现负载均衡"></a>Ribbon 结合RestTemplate实现负载均衡</h2><p>在之前的项目中，写过一个eureka server  一个eureka client ，先启动eureka server 在启动2个eureka client (启动一次修改端口号就好)  然后访问localhost:8761,可以看到以下的图</p><p><img src="/images/SpringCloud/Ribbon/ribbon-1.png">    </p><p>再创建一个项目，也是一个客户端，采用restTemplate  来远程调用之前写好的API接口 ，实现负载均衡</p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt; </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="yml文件"><a href="#yml文件" class="headerlink" title="yml文件"></a>yml文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-ribbon-client</span><br><span class="line">server:</span><br><span class="line">  port: 8764</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:8761/eureka/</span><br></pre></td></tr></table></figure><p>配置文件的服务注册的地址依旧是指向之前的服务端</p><h3 id="RestApi-接口"><a href="#RestApi-接口" class="headerlink" title="RestApi 接口"></a>RestApi 接口</h3><p>接下来需要用到一个Restful API，在API中使用我们之前client写好的接口，即服务消费，在调用client的时候，我们希望轮流访问这2个实例，这时候也就需要使用RestTemplate和Ribbon</p><h4 id="注入RestTemplate-并且开启负载均衡"><a href="#注入RestTemplate-并且开启负载均衡" class="headerlink" title="注入RestTemplate 并且开启负载均衡"></a>注入RestTemplate 并且开启负载均衡</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RibbonConfig &#123;</span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">RestTemplate <span class="function"><span class="title">restTemplate</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把RestTemplate注入到IOC容器中并加上@LoadBalanced注解，两者即可结合在一起。</p><h4 id="Service-类编写"><a href="#Service-类编写" class="headerlink" title="Service 类编写"></a>Service 类编写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class RibbonService &#123;</span><br><span class="line">@Autowired</span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">public String hello(String email) &#123;</span><br><span class="line"><span class="built_in">return</span> restTemplate.getForObject(<span class="string">"http://PRODUCT/hello?email="</span>+email,String.class );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实有一个很神奇的地方就是我http后面跟的是客户端的application-name，这样居然可以访问….没见过…</p><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.RibbonService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class RibbonController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">RibbonService ribbonService;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/hello/&#123;email&#125;"</span>)</span><br><span class="line">public String hillo(@PathVariable(<span class="string">"email"</span>) String email) &#123;</span><br><span class="line"><span class="built_in">return</span> ribbonService.hello(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写完之后启动项目，先启动服务端，启动2个客户端和这个ribbon 客户端。<br>然后访问localhost:8761，可以看到下图<br><img src="/images/SpringCloud/Ribbon/ribbon-2.png">    </p><p>然后使用postman进行测试，访问<a href="http://localhost:8764/hello/785009111@qq.com" target="_blank" rel="noopener">http://localhost:8764/hello/785009111@qq.com</a><br>负载均衡测试图如下：</p><p><img src="/images/SpringCloud/Ribbon/ribbon-3.png"><br><img src="/images/SpringCloud/Ribbon/ribbon-4.png">    </p><p>至此，测试完成，客户端ribbon 实现了对于product 客户端负载均衡。</p><p>参考文献：<br>    《深入理解Spring Cloud与微服务构建》——方志朋</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;负载均衡简介&quot;&gt;&lt;a href=&quot;#负载均衡简介&quot; class=&quot;headerlink&quot; title=&quot;负载均衡简介&quot;&gt;&lt;/a&gt;负载均衡简介&lt;/h2&gt;&lt;p&gt;负载均衡是指将负载分摊到多个执行单元上，常见的负载均衡有两种，一种是独立进程单元，通过负载均衡策略，将请求分发到不同的执行单元上，例如Nginx，另一种是将负载均衡逻辑以代码的型视封装到服务消费者的客户端上，服务消费者通过客户端维护了一份服务提供者的列表，有了信息列表，通过负载均衡策略将请求分摊到多个服务提供者，从而达到负载均衡的目的&lt;/p&gt;
&lt;h2 id=&quot;Ribbon-简介&quot;&gt;&lt;a href=&quot;#Ribbon-简介&quot; class=&quot;headerlink&quot; title=&quot;Ribbon 简介&quot;&gt;&lt;/a&gt;Ribbon 简介&lt;/h2&gt;&lt;p&gt;Ribbon 是Netfix公司开源的一个负载均衡的组件，它属于上述的第二种方式，是将负载均衡的逻辑封装再客户端，并运行在客户端的进程里。Ribbon是一个经过云端测试的IPC库，可以很好的控制HTTP和TCP客户端的负载均衡行为&lt;/p&gt;
&lt;p&gt;在SpringCloud中，Ribbon作为服务消费者的负载均衡，有两种使用方式，一种是和RestTemplate结合，还有一种是和Feign结合，这次先说前者……
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(1)服务治理与服务发现——Eurka</title>
    <link href="http://yoursite.com/2019/01/09/SpringCloud%E5%AD%A6%E4%B9%A0-1-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%8F%91%E7%8E%B0%E2%80%94%E2%80%94Eurka/"/>
    <id>http://yoursite.com/2019/01/09/SpringCloud学习-1-服务治理与服务发发现——Eurka/</id>
    <published>2019-01-09T14:21:05.000Z</published>
    <updated>2019-01-09T16:29:17.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h2><p>1.是纯正的 servlet 应用，需构建成jar/war包部署</p><p>2.使用了 Jersey 框架实现自身的 RESTful HTTP接口</p><p>3.peer之间的同步与服务的注册全部通过 HTTP 协议实现</p><p>4.定时任务(发送心跳、定时清理过期服务、节点同步等)通过 JDK 自带的 Timer 实现</p><p>5.内存缓存使用Google的guava包实现….<a id="more"></a></p><h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.activation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;activation&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>之所以要引入除了eureka之外的包，是因为我只引入这一个包的时候启动项目报错了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBContext</span><br></pre></td></tr></table></figure></p><p>网上查了一下，说是jdk9的新特性不再默认加载这些包，好，那和我JDK8有鸡毛关系！（鄙视MyEclipse）<br>鄙视归鄙视，该需要的包还是要加上去的..</p><h3 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761  <span class="comment">#官方写的就是 8761</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: server <span class="comment">#一个微服务的标识，如果第二个微服务启动时，也将这个配置成server，则Spring Cloud会认为它也是server这个微服务的一个节点</span></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost <span class="comment">#配置主机名</span></span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="literal">false</span> <span class="comment">#配置服务注册中心是否以自己为客户端进行注册(配置false)</span></span><br><span class="line">    fetch-registry: <span class="literal">false</span> <span class="comment">#是否取得注册信息(配置false)</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:<span class="variable">$&#123;server.port&#125;</span>/eureka/</span><br><span class="line">      <span class="comment">#配置eureka客户端的缺省域(该配置可能没有提示,请复制或者手动输入,切勿使用有提示的service-url会引起内置tomcat报错)</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot-启动项加入注解-EnableEurekaServer"><a href="#SpringBoot-启动项加入注解-EnableEurekaServer" class="headerlink" title="SpringBoot 启动项加入注解@EnableEurekaServer"></a>SpringBoot 启动项加入注解@EnableEurekaServer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class SpringCloudLeaning1EurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning1EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动项目 访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 看到以下图就证明没问题啦~<br><img src="/images/SpringCloud/Eureka/eureka-1.png"></p><h2 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h2><p>注册服务就会用到服务发现，这里新建一个SpringBoot工程，并且引入Eureka Client需要的包</p><h3 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product <span class="comment">#一个微服务的标识，如果第二个微服务启动时，也将这个配置成product，则Spring Cloud会认为它也是product这个微服务的一个节点</span></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost   <span class="comment">#配置主机名</span></span><br><span class="line">  client:</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:8761/eureka/</span><br><span class="line">      <span class="comment">#配置eureka客户端的缺省域(该配置可能没有提示,请复制或者手动输入,切勿使用有提示的service-url会引起内置tomcat报错)</span></span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>本次启动类基于spring-cloud-starter-netflix-eureka-client不需要添加额外注解。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringCloudLeaning1EurekaClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudLeaning1EurekaClientApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>Controller类必须要写，如果不写的话，服务注册上去一秒就会关闭….,你再刷新页面就看不到服务了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line">    @Value(<span class="string">"<span class="variable">$&#123;spring.application.name&#125;</span>"</span>)</span><br><span class="line">    String applicationName;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">    public String home(@RequestParam String email) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"My Name's :"</span> + applicationName + <span class="string">" Email:"</span> + email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后先启动服务端，再启动客户端</p><p>访问localhost:8761<br>你就可以看到我们的服务实例已经注册上去了，当然一个错误的声明警告也有…这个警告在使用服务治理的单机中经常出现，是Eureka server的一种自我保护 检测心跳的失败比率是否在15s内低于百分之85%，不用管他。</p><p><img src="/images/SpringCloud/Eureka/eureka-2.png"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问<a href="http://localhost:9001/hello?email=785009111@qq.com" target="_blank" rel="noopener">http://localhost:9001/hello?email=785009111@qq.com</a></p><p>显示：My Name’s :product Email:<a href="mailto:785009111@qq.com" target="_blank" rel="noopener">785009111@qq.com</a>   就大功告成啦~</p><p>参考文献：<br>    <a href="https://blog.csdn.net/hadues/article/details/79188793" target="_blank" rel="noopener">https://blog.csdn.net/hadues/article/details/79188793</a><br>    <a href="https://blog.battcn.com/2017/07/25/springcloud/dalston/spring-cloud-discovery/" target="_blank" rel="noopener">https://blog.battcn.com/2017/07/25/springcloud/dalston/spring-cloud-discovery/</a><br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eureka简介&quot;&gt;&lt;a href=&quot;#Eureka简介&quot; class=&quot;headerlink&quot; title=&quot;Eureka简介&quot;&gt;&lt;/a&gt;Eureka简介&lt;/h2&gt;&lt;p&gt;1.是纯正的 servlet 应用，需构建成jar/war包部署&lt;/p&gt;
&lt;p&gt;2.使用了 Jersey 框架实现自身的 RESTful HTTP接口&lt;/p&gt;
&lt;p&gt;3.peer之间的同步与服务的注册全部通过 HTTP 协议实现&lt;/p&gt;
&lt;p&gt;4.定时任务(发送心跳、定时清理过期服务、节点同步等)通过 JDK 自带的 Timer 实现&lt;/p&gt;
&lt;p&gt;5.内存缓存使用Google的guava包实现….
    
    </summary>
    
      <category term="SpringCloud学习" scheme="http://yoursite.com/categories/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>oracle数据库增加表空间</title>
    <link href="http://yoursite.com/2019/01/08/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A2%9E%E5%8A%A0%E8%A1%A8%E7%A9%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2019/01/08/oracle数据库增加表空间/</id>
    <published>2019-01-08T13:30:56.000Z</published>
    <updated>2019-01-08T13:40:27.102Z</updated>
    
    <content type="html"><![CDATA[<p>今天数据库表空间满了导致插入不了新的数据了，第一次扩容，记下一笔</p><h2 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h2><p><img src="/images/linux/oracleDatanaseAdd/reson.png"></p><p>原因大概在网上查了查，是指USERS这个表空间满了所以导致的新数据insert失败。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>注意：以下操作均需要DBA权限。</p><h3 id="查询表空间使用情况"><a href="#查询表空间使用情况" class="headerlink" title="查询表空间使用情况"></a>查询表空间使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(F.TABLESPACE_NAME) <span class="string">"表空间名"</span>, </span><br><span class="line">D.TOT_GROOTTE_MB <span class="string">"表空间大小(M)"</span>, </span><br><span class="line">D.TOT_GROOTTE_MB - F.TOTAL_BYTES <span class="string">"已使用空间(M)"</span>, </span><br><span class="line">TO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100,2),<span class="string">'990.99'</span>) <span class="string">"使用比"</span>, </span><br><span class="line">F.TOTAL_BYTES <span class="string">"空闲空间(M)"</span>, </span><br><span class="line">F.MAX_BYTES <span class="string">"最大块(M)"</span> </span><br><span class="line">FROM (SELECT TABLESPACE_NAME, </span><br><span class="line">ROUND(SUM(BYTES) / (1024 * 1024), 2) TOTAL_BYTES, </span><br><span class="line">ROUND(MAX(BYTES) / (1024 * 1024), 2) MAX_BYTES </span><br><span class="line">FROM SYS.DBA_FREE_SPACE </span><br><span class="line">GROUP BY TABLESPACE_NAME) F, </span><br><span class="line">(SELECT DD.TABLESPACE_NAME, </span><br><span class="line">ROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB </span><br><span class="line">FROM SYS.DBA_DATA_FILES DD </span><br><span class="line">GROUP BY DD.TABLESPACE_NAME) D </span><br><span class="line">WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME </span><br><span class="line">ORDER BY 4 DESC;</span><br></pre></td></tr></table></figure><h3 id="查找表空间文件的路径"><a href="#查找表空间文件的路径" class="headerlink" title="查找表空间文件的路径"></a>查找表空间文件的路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT tablespace_name, </span><br><span class="line">file_id, </span><br><span class="line">file_name, </span><br><span class="line">round(bytes / (1024 * 1024), 0) total_space </span><br><span class="line">FROM dba_data_files </span><br><span class="line">ORDER BY tablespace_name;</span><br></pre></td></tr></table></figure><h3 id="新增表空间并开启自动扩容"><a href="#新增表空间并开启自动扩容" class="headerlink" title="新增表空间并开启自动扩容"></a>新增表空间并开启自动扩容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter tablespace USERS</span><br><span class="line">     add datafile <span class="string">' /u02/ORCL/datafile/user02.dbf'</span> size 320000m AUTOEXTEND ON</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天数据库表空间满了导致插入不了新的数据了，第一次扩容，记下一笔&lt;/p&gt;
&lt;h2 id=&quot;报错截图&quot;&gt;&lt;a href=&quot;#报错截图&quot; class=&quot;headerlink&quot; title=&quot;报错截图&quot;&gt;&lt;/a&gt;报错截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/linu
      
    
    </summary>
    
      <category term="linux学习" scheme="http://yoursite.com/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="oracle" scheme="http://yoursite.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Spring相关(3)深入学习Spring5新框架——WebFlux框架</title>
    <link href="http://yoursite.com/2019/01/07/Spring%E7%9B%B8%E5%85%B3-3-WebFlux%E6%A1%86%E6%9E%B6-2/"/>
    <id>http://yoursite.com/2019/01/07/Spring相关-3-WebFlux框架-2/</id>
    <published>2019-01-07T11:21:28.000Z</published>
    <updated>2019-01-07T16:16:37.732Z</updated>
    
    <content type="html"><![CDATA[<p>上次有说过Webflux框架基本的服务端的开发，其最大的好处就是支持异步处理，可以提高性能，那么当今时代，微服务的架构十分盛行的情况下，多个一个大型的系统可能被拆分成多个系统，这样拆分的好处就是，首先各个系统相对独立，便于维护和开发，简化了开发人员的负担，比如一个电商系统，它可能存在产品微服务，用来发布和管理产品，可能还有客户信息微服务等等，当然他们之前并不是孤立的，他们之前可以相互调用的，各个微服务主要以Rest风格请求的接口来实现相互调用的…<a id="more"></a></p><p>为了方便各个微服务之间调用，WebFlux提供了WebClient类供开发者使用，它比RestTemplate还要强大一些，下面来说说它对于我们之前写的几个实现的调用</p><h2 id="客户端开发WebClient"><a href="#客户端开发WebClient" class="headerlink" title="客户端开发WebClient"></a>客户端开发WebClient</h2><h3 id="使用WebClient-请求后端接口"><a href="#使用WebClient-请求后端接口" class="headerlink" title="使用WebClient 请求后端接口"></a>使用WebClient 请求后端接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.client;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.web.filter.reactive.HiddenHttpMethodFilter;</span><br><span class="line">import org.springframework.web.reactive.function.client.WebClient;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import org.springframework.web.server.WebFilterChain;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line"></span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">public class UserWebClient &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">WebClient webClient = WebClient.create(<span class="string">"http://localhost:8080"</span>);</span><br><span class="line">WebClient webClient2 = WebClient.create(<span class="string">"http://localhost:8080"</span>);</span><br><span class="line">User user = new User();</span><br><span class="line">user.setId(<span class="string">"1"</span>);</span><br><span class="line">user.setSex(<span class="string">"男"</span>);</span><br><span class="line">user.setNote(<span class="string">"123"</span>);</span><br><span class="line">user.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">//新增用户</span><br><span class="line">insertUser(webClient, user);</span><br><span class="line">//获取用户</span><br><span class="line">getUser(webClient2, user.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void insertUser(WebClient webClient,User user) &#123;</span><br><span class="line">Mono&lt;User&gt; userMono = webClient</span><br><span class="line">//定义post请求方式</span><br><span class="line">.post()</span><br><span class="line">//设置请求uri</span><br><span class="line">.uri(<span class="string">"/user"</span>)</span><br><span class="line">//设置请求体为Json数据流</span><br><span class="line">.contentType(MediaType.APPLICATION_STREAM_JSON)</span><br><span class="line">//设置请求体内容</span><br><span class="line">.body(Mono.just(user),User.class)</span><br><span class="line">//设置请求结果类型</span><br><span class="line">.accept(MediaType.APPLICATION_STREAM_JSON)</span><br><span class="line">//设置请求结果检索规则</span><br><span class="line">.retrieve()</span><br><span class="line">//将结果转换为一个Mono封装的数据流</span><br><span class="line">.bodyToMono(User.class);</span><br><span class="line">//获取服务器发布的数据流，此时才会发起请求</span><br><span class="line">User user2 = userMono.block();</span><br><span class="line">System.out.println(<span class="string">"用户ID"</span>+user2.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void getUser(WebClient webClient,String id) &#123;</span><br><span class="line">Mono&lt;User&gt; userMono = webClient</span><br><span class="line">//定义post请求方式</span><br><span class="line">.get()</span><br><span class="line">//设置请求uri</span><br><span class="line">.uri(<span class="string">"/user/&#123;id&#125;"</span>,id)</span><br><span class="line">//设置请求结果类型</span><br><span class="line">.accept(MediaType.APPLICATION_STREAM_JSON)</span><br><span class="line">//设置请求结果检索规则</span><br><span class="line">.retrieve()</span><br><span class="line">//将结果转换为一个Mono封装的数据流</span><br><span class="line">.bodyToMono(User.class);</span><br><span class="line">//获取服务器发布的数据流，此时才会发起请求</span><br><span class="line">User user2 = userMono.block();</span><br><span class="line">System.out.println(<span class="string">"用户ID"</span>+user2.getUserName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后先运行SpringBoot的主程序，在运行main方法就可以了。<br>日志太长…不太好整….<br>这里如果是基于SpringBoot2.05版本及其以上，可能在调用2个方法时发生报错(java.lang.IllegalStateException: Only one connection receive subscriber allowed)<br>这个是SpringBoot2.05以上版本的Bug，我个人的解决办法是退回到2.04版本，可以在pom文件中修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></p><p>使用代码修改(这种方法我尝试了…但是失败了)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   public HiddenHttpMethodFilter <span class="function"><span class="title">hiddenHttpMethodFilter</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> new <span class="function"><span class="title">HiddenHttpMethodFilter</span></span>() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public Mono&lt;Void&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;</span><br><span class="line">               <span class="built_in">return</span> chain.filter(exchange);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>原文地址：<a href="https://github.com/spring-projects/spring-boot/issues/14509" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/issues/14509</a></p><h2 id="WebFlux-服务端开发"><a href="#WebFlux-服务端开发" class="headerlink" title="WebFlux 服务端开发"></a>WebFlux 服务端开发</h2><h3 id="类型转换器-Converter"><a href="#类型转换器-Converter" class="headerlink" title="类型转换器 Converter"></a>类型转换器 Converter</h3><p>在之前使用SpringMVC的时候也使用过转换器，当时就是把一个字符串”userName-sex-note”转换成一个User类<br>这次依旧是以字符串为例子，实现WebFlux的转换器</p><h4 id="转换器类代码"><a href="#转换器类代码" class="headerlink" title="转换器类代码"></a>转换器类代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.convert.converter.Converter;</span><br><span class="line">import org.springframework.format.FormatterRegistry;</span><br><span class="line">import org.springframework.web.reactive.config.WebFluxConfigurer;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * WebFlux配置类</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月7日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class WebFluxConfig implements WebFluxConfigurer&#123;</span><br><span class="line"></span><br><span class="line">//注册Converter</span><br><span class="line">@Override</span><br><span class="line">public void addFormatters(FormatterRegistry registry) &#123;</span><br><span class="line">registry.addConverter(stringToUserConverter());</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public Converter&lt;String, User&gt; <span class="function"><span class="title">stringToUserConverter</span></span>()&#123;</span><br><span class="line">Converter&lt;String, User&gt; converter = new Converter&lt;String, User&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public User convert(String str) &#123;</span><br><span class="line">String[] split = str.split(<span class="string">"-"</span>);</span><br><span class="line">User user = new User();</span><br><span class="line">user.setUserName(split[0]);</span><br><span class="line">user.setSex(split[1]);</span><br><span class="line">user.setNote(split[2]);</span><br><span class="line"><span class="built_in">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">return</span> converter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是实现WebFluxConfigurer 接口，然后重写其注册Converter的方法addFormatters,然后自己构建一个Bean，也就是转换的Bean，加上@Bean注解就可以了。</p><h4 id="Controller-类编写"><a href="#Controller-类编写" class="headerlink" title="Controller 类编写"></a>Controller 类编写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value=<span class="string">"/user/&#123;user&#125;"</span>)</span><br><span class="line">public Mono&lt;User&gt; insertUser2(@PathVariable(<span class="string">"user"</span>) User user)&#123;</span><br><span class="line"><span class="built_in">return</span> userService.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WebClient-测试片段"><a href="#WebClient-测试片段" class="headerlink" title="WebClient 测试片段"></a>WebClient 测试片段</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static void insertUserByString(WebClient webClient) &#123;</span><br><span class="line">Mono&lt;User&gt; userMono = webClient.get()</span><br><span class="line">.uri(<span class="string">"/user/&#123;user&#125;"</span>,<span class="string">"张三-男-gay"</span>).accept(MediaType.APPLICATION_STREAM_JSON).retrieve().bodyToMono(User.class);</span><br><span class="line">User user = userMono.block();</span><br><span class="line">System.out.println(<span class="string">"UserId:"</span>+user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">21:37:33.580 [reactor-http-nio-4] DEBUG reactor.ipc.netty.http.client.HttpClientOperations - [id: 0x50153790, L:/127.0.0.1:64423 - R:localhost/127.0.0.1:8080] Received response (auto-read:<span class="literal">false</span>) : [Content-Type=application/stream+json;charset=UTF-8, Content-Length=78, Date=Mon, 07 Jan 2019 13:37:33 GMT]</span><br><span class="line">21:37:33.581 [reactor-http-nio-4] DEBUG org.springframework.web.reactive.function.client.ExchangeFunctions - Response received, status: 200 OK</span><br><span class="line">21:37:33.661 [reactor-http-nio-4] DEBUG reactor.ipc.netty.channel.FluxReceive - [id: 0x50153790, L:/127.0.0.1:64423 - R:localhost/127.0.0.1:8080] Subscribing inbound receiver [pending: 0, cancelled:<span class="literal">false</span>, inboundDone: <span class="literal">false</span>]</span><br><span class="line">21:37:33.666 [reactor-http-nio-4] DEBUG reactor.ipc.netty.http.client.HttpClientOperations - [id: 0x50153790, L:/127.0.0.1:64423 - R:localhost/127.0.0.1:8080] Received last HTTP packet</span><br><span class="line">UserId:5c33561d84cda64d6ce7121e</span><br></pre></td></tr></table></figure><p>至此，转换器就完美撒花了。</p><h3 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h3><p>验证器其实和SpringMVC 的区别不大，分为局部验证器和全局验证器，验证器本身是和MVC一致的，就只是WebFlux 初始化的时候修改一下验证器即可</p><h4 id="User验证器"><a href="#User验证器" class="headerlink" title="User验证器"></a>User验证器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.validator;</span><br><span class="line"></span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import org.springframework.validation.Errors;</span><br><span class="line">import org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line">/**</span><br><span class="line"> * 用户验证器</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月7日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line">public class UserValidator implements Validator &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean supports(Class&lt;?&gt; user) &#123;</span><br><span class="line"><span class="built_in">return</span> user.equals(User.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void validate(Object target, Errors errors) &#123;</span><br><span class="line">User user = (User) target;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(user.getUserName())) </span><br><span class="line">errors.reject(<span class="string">"userName"</span>,null,<span class="string">"用户名不能为空"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WebFlux中添加验证器"><a href="#WebFlux中添加验证器" class="headerlink" title="WebFlux中添加验证器"></a>WebFlux中添加验证器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//设置全局验证器</span><br><span class="line">@Override</span><br><span class="line">public Validator <span class="function"><span class="title">getValidator</span></span>() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"><span class="built_in">return</span> new UserValidator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller类加入-Valid注解"><a href="#Controller类加入-Valid注解" class="headerlink" title="Controller类加入@Valid注解"></a>Controller类加入@Valid注解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value=<span class="string">"/user/&#123;user&#125;"</span>)</span><br><span class="line">public Mono&lt;User&gt; insertUser2(@Valid @PathVariable(<span class="string">"user"</span>) User user)&#123;</span><br><span class="line"><span class="built_in">return</span> userService.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说只希望这一个类使用这个验证器，也可以参照SpringMVC的写法，在Controller类中添加@InitBinder注解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@InitBinder</span><br><span class="line">public void InitBinder (DataBinder dataBinder) &#123;</span><br><span class="line">dataBinder.setValidator(new UserValidator());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="WebFlux-客户端深入开发"><a href="#WebFlux-客户端深入开发" class="headerlink" title="WebFlux 客户端深入开发"></a>WebFlux 客户端深入开发</h2><h3 id="处理服务端的错误"><a href="#处理服务端的错误" class="headerlink" title="处理服务端的错误"></a>处理服务端的错误</h3><p>之前客户端的开发是基于retrieve方法将服务端的数据流转换的，实际上还需要处理错误的数据，比如http返回一个错误的状态码，这时候就需要我们在客户端进行异常处理<br>，假设之前get方法存在get的结果集为空的情况。</p><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private static void getUser2(WebClient webClient,String id) &#123;</span><br><span class="line">Mono&lt;User&gt; userMono = webClient.get().uri(<span class="string">"/user/&#123;id&#125;"</span>,id).accept(MediaType.APPLICATION_STREAM_JSON).retrieve()</span><br><span class="line">.onStatus(</span><br><span class="line">//如果服务端返回4开头或者5开头的状态吗 则返回<span class="literal">true</span> ，4代表客户端错误，5开头是服务器错误 </span><br><span class="line">status -&gt; status.is4xxClientError()||status.is5xxServerError(),</span><br><span class="line">//如果发生异常，则用第二个(下面这个)表达式作为结果</span><br><span class="line">response -&gt; Mono.empty())</span><br><span class="line">.bodyToMono(User.class);</span><br><span class="line">User user = userMono.block();</span><br><span class="line"><span class="keyword">if</span>(user!=null) &#123;</span><br><span class="line">System.out.println(<span class="string">"success"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h3><p>服务端的代码也就是加一个@RequestHeader(“id”) 类似的注解。</p><h4 id="客户端代码-1"><a href="#客户端代码-1" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private static String insertUser(WebClient webClient,User user) &#123;</span><br><span class="line">Mono&lt;User&gt; userMono = webClient</span><br><span class="line">//定义post请求方式</span><br><span class="line">.post()</span><br><span class="line">//设置请求uri</span><br><span class="line">.uri(<span class="string">"/user"</span>).header(<span class="string">"id"</span>, user.getId())</span><br><span class="line">//设置请求体为Json数据流</span><br><span class="line">.contentType(MediaType.APPLICATION_STREAM_JSON)</span><br><span class="line">//设置请求体内容</span><br><span class="line">.body(Mono.just(user),User.class)</span><br><span class="line">//设置请求结果类型</span><br><span class="line">.accept(MediaType.APPLICATION_STREAM_JSON)</span><br><span class="line">//设置请求结果检索规则</span><br><span class="line">.retrieve()</span><br><span class="line">//将结果转换为一个Mono封装的数据流</span><br><span class="line">.bodyToMono(User.class);</span><br><span class="line">//获取服务器发布的数据流，此时才会发起请求</span><br><span class="line">User user2 = userMono.block();</span><br><span class="line"><span class="built_in">return</span> user2.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实也就是在uri后面加一个.header(key,value).<br>也挺简单的。</p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振<br>    <a href="https://my.oschina.net/thinkgem/blog/2249665?from=timeline" target="_blank" rel="noopener">https://my.oschina.net/thinkgem/blog/2249665?from=timeline</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次有说过Webflux框架基本的服务端的开发，其最大的好处就是支持异步处理，可以提高性能，那么当今时代，微服务的架构十分盛行的情况下，多个一个大型的系统可能被拆分成多个系统，这样拆分的好处就是，首先各个系统相对独立，便于维护和开发，简化了开发人员的负担，比如一个电商系统，它可能存在产品微服务，用来发布和管理产品，可能还有客户信息微服务等等，当然他们之前并不是孤立的，他们之前可以相互调用的，各个微服务主要以Rest风格请求的接口来实现相互调用的…
    
    </summary>
    
      <category term="Spring相关技术学习" scheme="http://yoursite.com/categories/Spring%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring相关(2)Spring5新框架——WebFlux框架</title>
    <link href="http://yoursite.com/2019/01/06/Spring%E7%9B%B8%E5%85%B3-2-WebFlux%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/01/06/Spring相关-2-WebFlux框架/</id>
    <published>2019-01-06T04:04:50.000Z</published>
    <updated>2019-01-07T11:18:12.561Z</updated>
    
    <content type="html"><![CDATA[<p>在当前互联网应用中，存在电商和金融行业等企业，这些企业对于业务逻辑的严谨性要求特别高，因为他们的业务关系到用户和商家账户以及财产安全，对于数据的一致性非常高，所以一般情况下通过锁等其他机制保证数据的一致性，但是这也会造成性能的下降。对于另外一些互联网应用就不一样了，比如游戏，视频，新闻，门户，(毕业设计~=。=)，他们一般不会涉及操作财产和账户，相对更在意的是并发数和响应速度，而传统的开发模式会引入一致性的机制，这也是造成他们性能瓶颈的原因之一，为此就提出了响应式编程的概念。</p><p>在Servlet3.1规范开始，javaEE支持异步处理，即收到请求之后，Servlet线程可以将耗时的操作委派给另外一个线程来完成，在不生成响应的情况下返回给容器，使得Java可以更好的支持响应式编程，也就是在Spring5中发布了新的响应式Web框架——WebFlux,不过要注意的是，Spring2.X才支持WebFlux框架…..<a id="more"></a></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Spring-WebFlux-概述："><a href="#Spring-WebFlux-概述：" class="headerlink" title="Spring WebFlux 概述："></a>Spring WebFlux 概述：</h3><p>   在Servlet3.1之前，Web容器都是基于阻塞机制开发的，而Servlet3.1开始，就有了非阻塞的规范(异步)，对于高并发的网站，使用韩说是编程显得更为直观和简易，特别是那些需要高速响应并且对于业务逻辑要求并不十分严格的网站，如游戏，视频等等</p><p>   在Java8 开始，引入了Lambda表达式和Functional接口等新特性，也使得java的语法更加丰富<br>   对于响应式编程而言，分为Router Functions、Spring Webflux和Http/Reactive Streams<br>   Router Functions 是一个路由分发，他会根据请求时间，决定采用什么类的什么方法来处理请求，也就是Selector，不参与实际业务逻辑的处理，只是起到一个分发的作用。</p><p>   Spring WebFlux，也就是控制层，参与实际业务逻辑的处理及Stream 流的返回。</p><p>   Http/ReactiveStream:将结果转换为流的过程。</p><p>   Spring WebFlux 是需要支持Servlet3.1+的容器，比如Tomcat、Netty、Jetty等等， SpringBoot中默认的依赖是Netty库。<br>   最后，说一说数据流的封装，也就是Flux 和Mono。它们都是封装数据流的类，其中Flux 是存放的0~N个数据流序列，响应式编程会一个接一个的将它们发送给客户端；而对于Mono而言，它存放的是0~1个数据流序列，这就是它们之前的不同，当然，它们是可以相互转换的。</p><h3 id="WebHandler接口"><a href="#WebHandler接口" class="headerlink" title="WebHandler接口"></a>WebHandler接口</h3><p>在SpringMVC中，是使用的DispatcherServlet来处理分发请求和响应的，在WebFlux中采用的是WebHandler，它和前者很相似。而对于WebHandler，最重要的就是DispatcherHandler，而在这其中，设计WebFlux流程的就是handle方法，下面放源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Mono&lt;Void&gt; handle(ServerWebExchange exchange) &#123;</span><br><span class="line">   //日志</span><br><span class="line"><span class="keyword">if</span> (this.handlerMappings == null) &#123;</span><br><span class="line"><span class="built_in">return</span> createNotFoundError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> Flux</span><br><span class="line">       //Reactive框架封装的数据流类Flux</span><br><span class="line">       //循环HandlerMapping</span><br><span class="line">       .fromIterable(this.handlerMappings)</span><br><span class="line">//找到合适的控制器</span><br><span class="line">       .concatMap(mapping -&gt; mapping.getHandler(exchange))</span><br><span class="line">       //处理第一条合适的记录</span><br><span class="line">.next()</span><br><span class="line">//如果出现找不到处理器的情况</span><br><span class="line">       .switchIfEmpty(createNotFoundError())</span><br><span class="line">//通过反射运行处理器</span><br><span class="line">       .flatMap(handler -&gt; invokeHandler(exchange, handler))</span><br><span class="line">//解析结果，将其转换成对应的数据流序列</span><br><span class="line">       .flatMap(result -&gt; handleResult(exchange, result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>和SpringMVC一样，都是从HanlerMapping找到对应的处理器，这也就是为什么可以使用@Controller等注解的原因，通过这些配置的路径能够通过getHandler方法找到对应的处理器(和MVC一致，处理器包含控制器逻辑)，找到处理器之后通过invokeHandler方法运行处理器最后将结果通过handlerResult返回，转换成对应的数据流。</p><h2 id="使用SpringMVC开发WebFlux"><a href="#使用SpringMVC开发WebFlux" class="headerlink" title="使用SpringMVC开发WebFlux"></a>使用SpringMVC开发WebFlux</h2><h3 id="pom文件中添加依赖"><a href="#pom文件中添加依赖" class="headerlink" title="pom文件中添加依赖"></a>pom文件中添加依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-mongodb-reactive&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>上面有3个依赖，一个是WebFlux所需要的依赖，一个是tomcat的依赖，主要说的是MongoDB的依赖，使用WebFlux主要目的就是异步请求相应，也就是非阻塞的数据响应，而目前主流数据库(Oracle、MySql等等都是不支持非阻塞开发的。)所以这里没办法使用工作中经常使用的数据库，这里就可以使用一个Spring-data-Reactive 支持的NoSql数据库(MongoDB)，所以引入的以上相关的一些jar</p><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.annotation.Id;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line">import org.springframework.data.mongodb.core.mapping.Field;</span><br><span class="line">//标记未Mongo文档</span><br><span class="line">@Document</span><br><span class="line">public class User implements Serializable&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">private static final long serialVersionUID = 939273844324506896L;</span><br><span class="line">@Id</span><br><span class="line">private String id;</span><br><span class="line"></span><br><span class="line">private String sex;</span><br><span class="line">//在MongoDB中使用user_name 来保存</span><br><span class="line">@Field(<span class="string">"user_name"</span>)</span><br><span class="line">private String userName;</span><br><span class="line">private String note;</span><br><span class="line">/*省略get/<span class="built_in">set</span> 以及构造方法*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类没啥特别需要注意的，也就是需要实现序列化接口</p><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.dao;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.mongodb.repository.ReactiveMongoRepository;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line">/**</span><br><span class="line"> * 注意：这里需要继承ReactiveMongoRepository接口，这样就相当自动帮我们整合了增删改查</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月6日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">@Repository</span><br><span class="line">public interface IUserDao extends ReactiveMongoRepository&lt;User, Long&gt;&#123;</span><br><span class="line">/**</span><br><span class="line"> * 根据用户名和备注进行模糊查询</span><br><span class="line"> * @param userName</span><br><span class="line"> * @param note</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">Flux&lt;User&gt; findByUserNameLikeAndNoteLike(String userName,String note);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要继承ReactiveMongoRepository 接口，这样就相当于WebFlux为MongoDB封装好了的一个增删改查的接口</p><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line"></span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">public interface IUserService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mono&lt;User&gt; insertUser(User user);</span><br><span class="line"></span><br><span class="line">Mono&lt;User&gt; updateUser(User user);</span><br><span class="line"></span><br><span class="line">Flux&lt;User&gt; findUsers(String userName,String note);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.dao.IUserDao;</span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line">import com.wangshun.leaning.service.IUserService;</span><br><span class="line"></span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line">@Service</span><br><span class="line">@Primary</span><br><span class="line">public class UserServiceImpl implements IUserService &#123;</span><br><span class="line">@Autowired</span><br><span class="line">IUserDao userDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Mono&lt;User&gt; insertUser(User user) &#123;</span><br><span class="line"><span class="built_in">return</span> userDao.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Mono&lt;User&gt; updateUser(User user) &#123;</span><br><span class="line"><span class="built_in">return</span> userDao.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Flux&lt;User&gt; findUsers(String userName, String note) &#123;</span><br><span class="line"><span class="built_in">return</span> userDao.findByUserNameLikeAndNoteLike(userName, note);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line">import com.wangshun.leaning.service.IUserService;</span><br><span class="line"></span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">IUserService userService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 更新用户</span><br><span class="line"> * @param user</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@PutMapping(<span class="string">"/user"</span>)</span><br><span class="line">public Mono&lt;User&gt; updateUser(@RequestBody User user)&#123;</span><br><span class="line"><span class="built_in">return</span> userService.updateUser(user);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 新增用户</span><br><span class="line"> * @param user</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@PostMapping(value=<span class="string">"/user"</span>)</span><br><span class="line">public Mono&lt;User&gt; insertUser(@RequestBody User user)&#123;</span><br><span class="line"><span class="built_in">return</span> userService.insertUser(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/like/&#123;userName&#125;/&#123;note&#125;"</span>)</span><br><span class="line">public Flux&lt;User&gt; <span class="built_in">test</span>(@PathVariable(<span class="string">"userName"</span>)String userName,@PathVariable(<span class="string">"note"</span>)String note)&#123;</span><br><span class="line"><span class="built_in">return</span> userService.findUsers(userName, note);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      host: localhost</span><br><span class="line">      username: weblogic</span><br><span class="line">      password: password1</span><br><span class="line">      port: 27017</span><br><span class="line">      database: springboot</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line">import org.springframework.data.mongodb.repository.config.EnableReactiveMongoRepositories;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">//因为引入了JPA包，所以默认情况下会加载数据源，需要排除原本自动装配的数据源</span><br><span class="line">@EnableAutoConfiguration(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line">//驱动Mongo注解</span><br><span class="line">@EnableReactiveMongoRepositories(basePackages=<span class="string">"com.wangshun.leaning.dao"</span>)</span><br><span class="line">public class SpringBootLeaning10WebFluxApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringBootLeaning10WebFluxApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><h4 id="模糊查询方法"><a href="#模糊查询方法" class="headerlink" title="模糊查询方法"></a>模糊查询方法</h4><p><img src="/images/Spring/Spring2/spring1.png"></p><h4 id="save方法："><a href="#save方法：" class="headerlink" title="save方法："></a>save方法：</h4><p><img src="/images/Spring/Spring2/spring2.png"></p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h3><p>参考地址：<br><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></p><h3 id="MongoDB-可视化界面使用-需要git"><a href="#MongoDB-可视化界面使用-需要git" class="headerlink" title="MongoDB 可视化界面使用(需要git)"></a>MongoDB 可视化界面使用(需要git)</h3><p>参考地址：<br><a href="https://www.cnblogs.com/shiweida/p/7692468.html" target="_blank" rel="noopener">https://www.cnblogs.com/shiweida/p/7692468.html</a></p><h3 id="MongoDB创建用户"><a href="#MongoDB创建用户" class="headerlink" title="MongoDB创建用户"></a>MongoDB创建用户</h3><p>注意：需要切换到对应的数据库下进行创建才能连接<br>切换数据库命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use xxxxx（数据库名称）</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">user: <span class="string">"weblogic"</span>,</span><br><span class="line"><span class="built_in">pwd</span>: <span class="string">"password1"</span>,</span><br><span class="line">roles: [&#123;</span><br><span class="line">role: <span class="string">"userAdminAnyDatabase"</span>,</span><br><span class="line">db: <span class="string">"admin"</span></span><br><span class="line">&#125;],</span><br><span class="line">mechanisms: [<span class="string">"SCRAM-SHA-1"</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>整了一下午才弄好，踩了无数个坑，说几个常见的坑吧：</p><h3 id="错误解决方案"><a href="#错误解决方案" class="headerlink" title="错误解决方案"></a>错误解决方案</h3><h4 id="com-mongodb-MongoSecurityException-Exception-authenticating-MongoCredential-mechanism-SCRAM-SHA-1-userName-’weblogic’-source-’springboot’-password-mechanismProperties-”"><a href="#com-mongodb-MongoSecurityException-Exception-authenticating-MongoCredential-mechanism-SCRAM-SHA-1-userName-’weblogic’-source-’springboot’-password-mechanismProperties-”" class="headerlink" title="com.mongodb.MongoSecurityException:Exception authenticating MongoCredential{mechanism=SCRAM-SHA-1, userName=’weblogic’, source=’springboot’, password=, mechanismProperties={}}”"></a>com.mongodb.MongoSecurityException:Exception authenticating MongoCredential{mechanism=SCRAM-SHA-1, userName=’weblogic’, source=’springboot’, password=<hidden>, mechanismProperties={}}”</hidden></h4><p>这个报错是因为你所配置的数据库不存在这个用户 或者用户名密码错误，正如上面我所说的那样，需要先切换到一些数据库之后再创建用户。</p><h4 id="message”-“E11000-duplicate-key-error-collection-springboot-user-index-id-dup-key-0-nested-exception-is-com-mongodb-MongoWriteException-E11000-duplicate-key-error-collection-springboot-user-index-id-dup-key-0-”"><a href="#message”-“E11000-duplicate-key-error-collection-springboot-user-index-id-dup-key-0-nested-exception-is-com-mongodb-MongoWriteException-E11000-duplicate-key-error-collection-springboot-user-index-id-dup-key-0-”" class="headerlink" title="message”: “E11000 duplicate key error collection: springboot.user index: _id_ dup key: { : 0 }; nested exception is com.mongodb.MongoWriteException: E11000 duplicate key error collection: springboot.user index: _id_ dup key: { : 0 }”"></a>message”: “E11000 duplicate key error collection: springboot.user index: _id_ dup key: { : 0 }; nested exception is com.mongodb.MongoWriteException: E11000 duplicate key error collection: springboot.user index: _id_ dup key: { : 0 }”</h4><p>这个是因为主键冲突了，一般当你把ID定义成int 类型的时候使用@Id 注解之后它第一次确实会给你生成一个ID  是0，但是后续不会自增长，如果说你有需要使用数字主键请自行百度Mongo实现主键自增长，目前我还没有研究出来这个。</p><p>ps：代码Service层没有写默认的根据ID查询的方法是因为  默认的接口中实现是采用Long 类型的参数查询的，而这里Long类型的参数由于没有自定义主键自增长，所以我暂时还没有实现，还有一种方法就是采用另外一种指定参数的查询，现没找到.<br>就先说这么多吧，时间也不早了，吃饭去……</p><p>参考文献：<br>    《深入浅出SpringBoot2.x》——杨开振<br>    <a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-tutorial.html</a><br>    <a href="https://www.cnblogs.com/shiweida/p/7692468.html" target="_blank" rel="noopener">https://www.cnblogs.com/shiweida/p/7692468.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在当前互联网应用中，存在电商和金融行业等企业，这些企业对于业务逻辑的严谨性要求特别高，因为他们的业务关系到用户和商家账户以及财产安全，对于数据的一致性非常高，所以一般情况下通过锁等其他机制保证数据的一致性，但是这也会造成性能的下降。对于另外一些互联网应用就不一样了，比如游戏，视频，新闻，门户，(毕业设计~=。=)，他们一般不会涉及操作财产和账户，相对更在意的是并发数和响应速度，而传统的开发模式会引入一致性的机制，这也是造成他们性能瓶颈的原因之一，为此就提出了响应式编程的概念。&lt;/p&gt;
&lt;p&gt;在Servlet3.1规范开始，javaEE支持异步处理，即收到请求之后，Servlet线程可以将耗时的操作委派给另外一个线程来完成，在不生成响应的情况下返回给容器，使得Java可以更好的支持响应式编程，也就是在Spring5中发布了新的响应式Web框架——WebFlux,不过要注意的是，Spring2.X才支持WebFlux框架…..
    
    </summary>
    
      <category term="Spring相关技术学习" scheme="http://yoursite.com/categories/Spring%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring相关(1)异步线程池和jms</title>
    <link href="http://yoursite.com/2019/01/05/Spring%E7%9B%B8%E5%85%B3-1-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8Cjms/"/>
    <id>http://yoursite.com/2019/01/05/Spring相关-1-异步线程池和jms/</id>
    <published>2019-01-05T04:26:29.000Z</published>
    <updated>2019-01-05T09:40:09.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步线程池"><a href="#异步线程池" class="headerlink" title="异步线程池"></a>异步线程池</h2><p>在之前的学习中，除了Redis之外，其他所有的都是同步应用，那么其实在开发的过程中，有些时候我们需要使用异步线程，即一个请求需要2个或者2个异常线程去请求，比如生成报表，运维人员只需要点击生成报表即可，并不是需要立即查看报表，那么生成报表可能需要牵扯大量的数据查询并生成，这如果在同一个线程中是很耗费时间的。而且用户的体验也不是很好，接下来 就来说说异步线程。</p><p>就以上的需求大概的逻辑是这样的，运维人员点击生成报表，启动线程1执行生成报表的一些基本操作，同时启动线程2，由线程2去独立完成生成报表的一些大量操作，而线程一无需等待，直接进入下一步操作，这样的话运维人员就不需要等待线程的完成，可以是很好的用户体验…<a id="more"></a></p><h2 id="处理器获取参数逻辑"><a href="#处理器获取参数逻辑" class="headerlink" title="处理器获取参数逻辑"></a>处理器获取参数逻辑</h2><h3 id="定义线程池和开启异步可用"><a href="#定义线程池和开启异步可用" class="headerlink" title="定义线程池和开启异步可用"></a>定义线程池和开启异步可用</h3><p>在Spring 中存在一个AsyncConfigurer接口，它是一个可以配置异步线程池的接口，他的源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.scheduling.annotation;</span><br><span class="line">import java.util.concurrent.Executor;</span><br><span class="line">import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class="line">import org.springframework.lang.Nullable;</span><br><span class="line">public interface AsyncConfigurer &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取线程池</span><br><span class="line"> */</span><br><span class="line">@Nullable</span><br><span class="line">default Executor <span class="function"><span class="title">getAsyncExecutor</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 异步异常处理器</span><br><span class="line"> */</span><br><span class="line">@Nullable</span><br><span class="line">default AsyncUncaughtExceptionHandler <span class="function"><span class="title">getAsyncUncaughtExceptionHandler</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从以上代码可以看出方法本身还是比较简单的，其中getAsyncExecutor方法返回的是一个自定义的线程池，这样在开启异步时，线程池就会提空空闲线程来执行异步任务，因为线程中的业务逻辑可能出现异常，所以也定义了一个处理异常的方法，使得异常可以自定义处理，为了使得这个接口方便使用，Spring还提供了空的实现，所以我们只需要实现AsyncConfigurer接口覆盖掉对应的方法即可。</p><p>因此我们只需要java配置文件类，实现AsyncConfigurer接口，实现getAsyncExecutor方法返回的线程池，这样Spring就会将这个线程池作为异步调用的线程。为了使得异步可用，Spring还提供了一个注解@EnableAnsync,如果java配置文件配置它，那么Spring就会开启异步即可，这样就可以使用@Async注解来驱动Spring使用异步调用，接下来用一个例子来进行说明</p><h3 id="异步实例"><a href="#异步实例" class="headerlink" title="异步实例"></a>异步实例</h3><h4 id="java配置类"><a href="#java配置类" class="headerlink" title="java配置类"></a>java配置类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.config;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line">import org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line">import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line">/**</span><br><span class="line"> * 定义线程池和启用异步调用</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月5日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line">@EnableAsync</span><br><span class="line">@Configuration</span><br><span class="line">public class AsyncConfig implements AsyncConfigurer&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Executor <span class="function"><span class="title">getAsyncExecutor</span></span>() &#123;</span><br><span class="line">//定义线程池</span><br><span class="line">ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();</span><br><span class="line">//设置核心线程数</span><br><span class="line">taskExecutor.setCorePoolSize(10);</span><br><span class="line">//设置线程池最大线程数</span><br><span class="line">taskExecutor.setMaxPoolSize(30);</span><br><span class="line">//设置线程队列最大线程数</span><br><span class="line">taskExecutor.setQueueCapacity(2000);</span><br><span class="line">taskExecutor.initialize();</span><br><span class="line"><span class="built_in">return</span> taskExecutor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中，注解@EnableAsync 代表开启异步，这样就可以使用@Async驱动Spring使用异步，但是异步需要提供可用的线程池，所以这里的配置类实现了AsyncConfigurer接口，实现其中方法，这样就可以定义一个线程池，并在实现的方法中定义了一些属性和初始化线程池，这样异步就可以使用了。</p><h4 id="Service-实现类-接口省略-，略略略"><a href="#Service-实现类-接口省略-，略略略" class="headerlink" title="Service 实现类(接口省略 ，略略略~)"></a>Service 实现类(接口省略 ，略略略~)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.scheduling.annotation.Async;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.IAsynccService;</span><br><span class="line">@Service</span><br><span class="line">@Primary</span><br><span class="line">public class AsyncServiceImpl implements IAsynccService&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">//声明采用异步调用</span><br><span class="line">@Async</span><br><span class="line">public void <span class="function"><span class="title">generateReport</span></span>() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(<span class="string">"报表线程名称:"</span>+Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.IAsynccService;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value=<span class="string">"/async"</span>)</span><br><span class="line">@RestController</span><br><span class="line">public class AsyncController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private IAsynccService asynccService;</span><br><span class="line">@GetMapping(value=<span class="string">"/test"</span>)</span><br><span class="line">public String <span class="function"><span class="title">asyncPage</span></span>() &#123;</span><br><span class="line">System.out.println(<span class="string">"请求线程名称:"</span>+Thread.currentThread().getName());</span><br><span class="line">//开启异步调用</span><br><span class="line">asynccService.generateReport();</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试日志"><a href="#测试日志" class="headerlink" title="测试日志"></a>测试日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-01-05 12:58:23.000  INFO 19264 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization <span class="keyword">in</span> 8 ms</span><br><span class="line">请求线程名称:http-nio-8080-exec-6</span><br><span class="line">2019-01-05 12:58:52.122  INFO 19264 --- [nio-8080-exec-6] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService</span><br><span class="line">报表线程名称:ThreadPoolTaskExecutor-1</span><br></pre></td></tr></table></figure><p>通过日志可以看到控制器方法和异步方法是由不同的线程完成的，通过类似的方法就可以在Spring中使用异步调用</p><h2 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h2><p>有时候需要和其他系统集成，最常见的就是短信系统，网站中注册的时候，经常会有点击发送验证码。对于业务系统而言，只需要发送请求到短信系统就可以，短信系统就是一个异步系统，当发送消息之后，短信系统可能没有立刻将短信发出，正如生活中有时候收到短信会慢一样(举报暴雪的邮件系统~)。</p><p>为了给其他系统发送消息，java中引入了JMS(java消息服务)，jms按照其规范分为点对点和发布订阅两种形式，点对点就是将一个系统的消息发布到另外一个指定系统，而订阅就是一个系统约定将消息发布到一个主题中，然后各个系统通过订阅这个主题可以收到发送过来的信息处理对应的业务，大部分情况下是需要采用订阅模式的，因为可以进行更多的扩展(适用于一对多系统)<br>。</p><p>在实际的工作中，JMS服务的规范啊有很多，常见的就是ActiveMQ和分布式kafka。为了更为可靠和安全，还存在AMQP协议，实现它比较常见的有RabbitMQ等等，接下来就说说ActiveMQ和RabbitMQ。</p><h3 id="JMS实例——ActiveMQ"><a href="#JMS实例——ActiveMQ" class="headerlink" title="JMS实例——ActiveMQ"></a>JMS实例——ActiveMQ</h3><h4 id="下载并启动ActiveMQ"><a href="#下载并启动ActiveMQ" class="headerlink" title="下载并启动ActiveMQ"></a>下载并启动ActiveMQ</h4><p>下载的话，地址为：activemq.apache.org，下载完成后解压进入bin目录下，按照计算机操作系统启动其activemq.bat即可。</p><p>启动之后输入<a href="http://localhost:8161/admin/" target="_blank" rel="noopener">http://localhost:8161/admin/</a>  使用admin/admin登录，就可以看到以下界面了<br><img src="/images/Spring/Spring1/spring1.png"><br>启动完成之后就可以在java中进行使用了</p><h4 id="java中使用ActiveMQ"><a href="#java中使用ActiveMQ" class="headerlink" title="java中使用ActiveMQ"></a>java中使用ActiveMQ</h4><h5 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--ActiveMQ依赖  --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--ActiveMQ连接依赖  --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>第一个包是引入ActiveMQ的starter，这样就可以在application.yml文件中对于ActiveMQ进行配置，第二个是引入了连接池机制，有了这些依赖，我们就可以进行配置了。</p><h5 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ActiveMq地址</span></span><br><span class="line">spring.activemq.broker-url=tcp://localhost:61616</span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line">spring.activemq.user=admin</span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line">spring.activemq.password=admin</span><br><span class="line"><span class="comment">#是否使用发布订阅模式，默认false 采用点对点模式</span></span><br><span class="line">spring.jms.pub-sub-domain=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 默认目标地址</span></span><br><span class="line">spring.jms.template.default-destination=activemq.default.destination</span><br><span class="line"><span class="comment">#是否启用连接池</span></span><br><span class="line">spring.active.pool.enabled=<span class="literal">true</span></span><br><span class="line"><span class="comment">#连接池最大数量配置</span></span><br><span class="line">spring.activemq.pool.max-connections=50</span><br></pre></td></tr></table></figure><p>上面的配置如果启用订阅模式就会报错，我也不知道是为什么…所以暂时采用点对点吧。<br>SpringBoot会根据上述的配置生成许多ActiveMQ相关对象，如jms连接工厂、连接池和jmsTemplate，而对于消息的发送和接收可以通过jmsTemplate处理，关于接收消息，Spring提供了一个注解@JmsListener进一步简化了我们的工作，因此需要定义一个接口，它既能发送jms消息，也可以接收jms消息<br>这里没使用yml文件是因为一样的配置 yml文件配置启动会报错找不到jmsTemplate 对象，我也不知道为什么。。。。。</p><h5 id="Service实现类"><a href="#Service实现类" class="headerlink" title="Service实现类"></a>Service实现类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.jms.annotation.JmsListener;</span><br><span class="line">import org.springframework.jms.core.JmsTemplate;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.service.IActiveMqService;</span><br><span class="line"></span><br><span class="line">public class ActiveMqServiceImpl implements IActiveMqService &#123;</span><br><span class="line">/**</span><br><span class="line"> * 注入由SpringBoot自动生产的JMsTemplate、</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">@Autowired</span><br><span class="line">private JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void sendMsg(String message) &#123;</span><br><span class="line">System.out.println(<span class="string">"发送消息:"</span>+message);</span><br><span class="line">jmsTemplate.convertAndSend(message);</span><br><span class="line">//自定义发送地址</span><br><span class="line">//jmsTemplate.convertAndSend(<span class="string">"your-destinnation"</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">//使用注解监听地址发送过来的消息</span><br><span class="line">@JmsListener(destination=<span class="string">"<span class="variable">$spring</span>.jms.template.default-destionation"</span>)</span><br><span class="line">public void receiveMsg(String message) &#123;</span><br><span class="line">System.out.println(<span class="string">"接收到的消息为："</span>+message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先是注入了jmsTemplate，这个对象是由SpringBoot自动配置机制生成的，接着是sendMsg方法，它是发送jms消息，这里调用的是convertAndSend ，就是转化并发送的方法，把我们传入的消息通过默认的转化器进行转化之后再发送出去，如果我们需要修改转化器，只需要调用sendMessageConvert方法即可。</p><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(<span class="string">"/activemq"</span>)</span><br><span class="line">public class ActiveMqController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private IActiveMqService activeMqService;</span><br><span class="line">@GetMapping(value=<span class="string">"/send/&#123;msg&#125;"</span>)</span><br><span class="line">public Map&lt;String, Object&gt; sendMsg(@PathVariable(value=<span class="string">"msg"</span>)String message)&#123;</span><br><span class="line">Map&lt;String, Object&gt; resultsMap = new HashMap&lt;String, Object&gt;();</span><br><span class="line">activeMqService.sendMsg(message);</span><br><span class="line">resultsMap.put(<span class="string">"success"</span>, message);</span><br><span class="line"><span class="built_in">return</span> resultsMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-01-05 15:57:29.774  INFO 27860 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2019-01-05 15:57:29.774  INFO 27860 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2019-01-05 15:57:29.785  INFO 27860 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization <span class="keyword">in</span> 11 ms</span><br><span class="line">发送消息:123345</span><br><span class="line">接收到的消息为：123345</span><br></pre></td></tr></table></figure><p>当然，我们有时候可能传递的不止是一个String 字符串，比如我们想传递一个对象，就可以这样写：</p><h4 id="AcitiveMQ-传递User对象"><a href="#AcitiveMQ-传递User对象" class="headerlink" title="AcitiveMQ 传递User对象"></a>AcitiveMQ 传递User对象</h4><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">private static final long serialVersionUID = 939273844324506896L;</span><br><span class="line"></span><br><span class="line">private Long id;</span><br><span class="line">private String userName;</span><br><span class="line">private String note;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类没啥好说的，只有实现Serializable接口，实现序列化~</p><h5 id="Service-实现类"><a href="#Service-实现类" class="headerlink" title="Service 实现类"></a>Service 实现类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.service.impl;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Primary;</span><br><span class="line">import org.springframework.jms.annotation.JmsListener;</span><br><span class="line">import org.springframework.jms.core.JmsTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.User;</span><br><span class="line">import com.wangshun.leaning.service.IActiveMqUserService;</span><br><span class="line">@Service</span><br><span class="line">@Primary</span><br><span class="line">public class ActiveMqUserServiceImpl implements IActiveMqUserService&#123;</span><br><span class="line"></span><br><span class="line">private static final String myDestination = <span class="string">"my-destination"</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 注入由SpringBoot自动生产的JMsTemplate、</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">@Autowired</span><br><span class="line">private JmsTemplate jmsTemplate = null;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void sendMsg(User user) &#123;</span><br><span class="line">System.out.println(<span class="string">"发送消息:"</span>+user);</span><br><span class="line">//自定义发送地址</span><br><span class="line">jmsTemplate.convertAndSend(myDestination,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">//使用注解监听地址发送过来的消息</span><br><span class="line">@JmsListener(destination=myDestination)</span><br><span class="line">public void receiveMsg(User user) &#123;</span><br><span class="line">System.out.println(<span class="string">"接收到的消息为："</span>+user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   @Autowired</span><br><span class="line">private IActiveMqUserService activeMqUserService;</span><br><span class="line"></span><br><span class="line">@GetMapping(value=<span class="string">"/send/&#123;id&#125;/&#123;name&#125;"</span>)</span><br><span class="line">public Map&lt;String, Object&gt; sendUserMsg(@PathVariable(value=<span class="string">"id"</span>)Long id,@PathVariable(value=<span class="string">"name"</span>)String name)&#123;</span><br><span class="line">User user = new User(id,name,<span class="string">""</span>);</span><br><span class="line">Map&lt;String, Object&gt; resultsMap = new HashMap&lt;String, Object&gt;();</span><br><span class="line">activeMqUserService.sendMsg(user);</span><br><span class="line">resultsMap.put(<span class="string">"success"</span>, user);</span><br><span class="line"><span class="built_in">return</span> resultsMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件中添加active信任包"><a href="#配置文件中添加active信任包" class="headerlink" title="配置文件中添加active信任包"></a>配置文件中添加active信任包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.packages.trust-all=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里我尝试过使用个别包的设置,但是失败了…留一个坑….</p><h5 id="测试日志-1"><a href="#测试日志-1" class="headerlink" title="测试日志"></a>测试日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发送消息:com.wangshun.leaning.entity.User@15f7b9a0</span><br><span class="line">接收到的消息为：com.wangshun.leaning.entity.User@4b08eec1</span><br></pre></td></tr></table></figure><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异步线程池&quot;&gt;&lt;a href=&quot;#异步线程池&quot; class=&quot;headerlink&quot; title=&quot;异步线程池&quot;&gt;&lt;/a&gt;异步线程池&lt;/h2&gt;&lt;p&gt;在之前的学习中，除了Redis之外，其他所有的都是同步应用，那么其实在开发的过程中，有些时候我们需要使用异步线程，即一个请求需要2个或者2个异常线程去请求，比如生成报表，运维人员只需要点击生成报表即可，并不是需要立即查看报表，那么生成报表可能需要牵扯大量的数据查询并生成，这如果在同一个线程中是很耗费时间的。而且用户的体验也不是很好，接下来 就来说说异步线程。&lt;/p&gt;
&lt;p&gt;就以上的需求大概的逻辑是这样的，运维人员点击生成报表，启动线程1执行生成报表的一些基本操作，同时启动线程2，由线程2去独立完成生成报表的一些大量操作，而线程一无需等待，直接进入下一步操作，这样的话运维人员就不需要等待线程的完成，可以是很好的用户体验…
    
    </summary>
    
      <category term="Spring相关技术学习" scheme="http://yoursite.com/categories/Spring%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(10)构建Rest风格的网站</title>
    <link href="http://yoursite.com/2019/01/01/SpringBoot-10-%E6%9E%84%E5%BB%BARest%E9%A3%8E%E6%A0%BC%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2019/01/01/SpringBoot-10-构建Rest风格的网站/</id>
    <published>2019-01-01T03:11:58.000Z</published>
    <updated>2019-01-02T13:33:50.307Z</updated>
    
    <content type="html"><![CDATA[<p>Rest接口，又或者是Rest风格的网站，现在已经是非常的流行了，在ESB中Rest是一种协议方式，正如WebService一样，之前我一直以为我使用SSM框架写的那种/xxx/xxx,do这种就是Rest风格，其实不然，有一些细微的差别，Rest风格是有自己的规范的，按照Rest规范构建的才能算是Rest风格。让我第一次接触Rest以及印象深刻的是17年年底在公司看到的面试题：“如何使用Spring构建一个Restful API”emmmmmmm到现在还是不会做……看来我当年进公司纯属幸运……hhh….<a id="more"></a></p><h2 id="Rest简述"><a href="#Rest简述" class="headerlink" title="Rest简述"></a>Rest简述</h2><p>Rest这个词，全拼为Representational State Transfer,翻译过来也就是表现层状态转变，如果一个架构符合Rest的原则，那么它就是Rest风格的架构。</p><h3 id="Http动作"><a href="#Http动作" class="headerlink" title="Http动作"></a>Http动作</h3><p>Rest风格的资源是通过Http的行为去操作资源的，对于资源而言，它存在 创建、修改、访问、删除的状态转换，这样也就对应Http行为的五种动作</p><h4 id="Get-VISIT"><a href="#Get-VISIT" class="headerlink" title="Get(VISIT)"></a>Get(VISIT)</h4><pre><code>访问服务器资源(一个或者多个)</code></pre><h4 id="POST-CREATE"><a href="#POST-CREATE" class="headerlink" title="POST(CREATE)"></a>POST(CREATE)</h4><pre><code>提交服务器资源信息，用来创建新的资源</code></pre><h4 id="PUT-UPDATE"><a href="#PUT-UPDATE" class="headerlink" title="PUT(UPDATE)"></a>PUT(UPDATE)</h4><pre><code>修改服务器已经存在的资源，使用PUT时需要把资源的所有属性一并提交</code></pre><h4 id="PATCH-UPDATE"><a href="#PATCH-UPDATE" class="headerlink" title="PATCH(UPDATE)"></a>PATCH(UPDATE)</h4><pre><code>修改服务器已经存在的资源，使用PATCH时只需要把部分资源的属性提交</code></pre><h4 id="DELETE-DELETE"><a href="#DELETE-DELETE" class="headerlink" title="DELETE(DELETE)"></a>DELETE(DELETE)</h4><pre><code>从服务器删除资源</code></pre><p><strong>除了 以上五种常用的动作，还有两种不常用的动作。</strong></p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><pre><code>获取资源的元数据(content-type)</code></pre><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><pre><code>提供资源可供客户端修改属性信息</code></pre><p>有了以上的动作，接来下说说Rest风格的URL设计</p><h3 id="Rest风格URL设计"><a href="#Rest风格URL设计" class="headerlink" title="Rest风格URL设计"></a>Rest风格URL设计</h3><h4 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h4><pre><code>GET /user/1</code></pre><h4 id="查询多个用户信息"><a href="#查询多个用户信息" class="headerlink" title="查询多个用户信息"></a>查询多个用户信息</h4><pre><code>GET /users/{userName}/{note}</code></pre><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><pre><code>POST /user/{userName}/{note}/{sex}</code></pre><h4 id="修改用户全部信息"><a href="#修改用户全部信息" class="headerlink" title="修改用户全部信息"></a>修改用户全部信息</h4><pre><code>PUT /user/{id}/{userName}/{note}/{sex}</code></pre><h4 id="修改用户名称-部分信息"><a href="#修改用户名称-部分信息" class="headerlink" title="修改用户名称(部分信息)"></a>修改用户名称(部分信息)</h4><pre><code>PATCH /user/{id}/{userName}</code></pre><p><strong>注意：</strong> 在URL中并没有出现动词，对于参数主要是通过url设计去获取的，对于参数超过5个的可以考虑采用JSON的方式去传递参数。</p><h3 id="Rest风格的一些误区"><a href="#Rest风格的一些误区" class="headerlink" title="Rest风格的一些误区"></a>Rest风格的一些误区</h3><p>在设计Url时，Rest风格存在一些规范如下：</p><h4 id="1-一般不应在URL中存在动词"><a href="#1-一般不应在URL中存在动词" class="headerlink" title="1.一般不应在URL中存在动词"></a>1.一般不应在URL中存在动词</h4><pre><code>比如：GET /user/get/1应该修改为： GET /user/1</code></pre><h4 id="2-URL中不应该添加版本号"><a href="#2-URL中不应该添加版本号" class="headerlink" title="2.URL中不应该添加版本号"></a>2.URL中不应该添加版本号</h4><pre><code>比如： GET /v1/user/1在Rest风格的资源的URL是唯一的，这有点和微服务的思想有些类似，如果存在版本号，可以通过设置Http请求头来进行区分。例如：Accept：version=1.0</code></pre><h4 id="不推荐采用原本的Get方式传递参数"><a href="#不推荐采用原本的Get方式传递参数" class="headerlink" title="不推荐采用原本的Get方式传递参数"></a>不推荐采用原本的Get方式传递参数</h4><pre><code>例如:PUT /user?username=1&amp;password=1应该修改为 put /user/{username}/{password}</code></pre><h2 id="使用SpringMVC开发Rest风格端点"><a href="#使用SpringMVC开发Rest风格端点" class="headerlink" title="使用SpringMVC开发Rest风格端点"></a>使用SpringMVC开发Rest风格端点</h2><p>Spring 对于Rest风格的机制是基于Spring MVC的设计基础上的。</p><h3 id="SpringMVC整合REST"><a href="#SpringMVC整合REST" class="headerlink" title="SpringMVC整合REST"></a>SpringMVC整合REST</h3><p>在之前也说过了，Rest这种风格，其实也就是使用@RequestMapping然后其中的命名符合Rest的规范即可。<br>那么为了方便Rest接口的开发，Spring现如今还提供了以下5个注解<br>@GetMapping:对应http的Get请求</p><p>@PostMapping:对应http的post请求</p><p>@PutMapping:对应http的Put请求</p><p>@PatchMapping:对应http的Patch请求</p><p>@DeleteMapping:对应http的Delete请求</p><p>而使用了Rest风格的传参风格之后，可以在后台使用@PathVariable注解来获取参数，这样就可以满足Rest风格的传参的要求了。<br>当然，对于字段较多的，还是建议@RequestBody 传递Json</p><h3 id="使用Spring-开发Rest接口"><a href="#使用Spring-开发Rest接口" class="headerlink" title="使用Spring 开发Rest接口"></a>使用Spring 开发Rest接口</h3><p>接下来以一个简单的例子来模拟Rest风格的接口开发</p><h4 id="学生实体类"><a href="#学生实体类" class="headerlink" title="学生实体类"></a>学生实体类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line">@Alias(<span class="string">"student"</span>)</span><br><span class="line">public class Student &#123;</span><br><span class="line">private Integer id;</span><br><span class="line">private String name;</span><br><span class="line">private String age;</span><br><span class="line">private String sex;</span><br><span class="line"></span><br><span class="line">/*省略get/<span class="built_in">set</span>  以及构造方法*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@PostMapping(value=<span class="string">"/student"</span>,produces=<span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line">public int insertStudent(@RequestBody Student student) &#123;</span><br><span class="line">int rows = studentService.saveOrUpdate(student);</span><br><span class="line"><span class="built_in">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line">@GetMapping(<span class="string">"/student/&#123;id&#125;"</span>)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Student getStudentInfoById(@PathVariable(<span class="string">"id"</span>) Integer id) &#123;</span><br><span class="line"><span class="built_in">return</span> studentService.getStudentById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的类似于Put/Delete等等的也是大同小异，使用Rest风格的接口大多数都是使用@PathVariable注解来获取参数<br>只要命名注意规范其他的都差不多……</p><p>当然，在现在前后端分离的大局势下，返回Json 格式是最常用的一种数据格式了，那么每个接口都写上@ResponsoBody又显得麻烦…所以我们可以在Controller类上面统一加上@RestController注解  这样其类下面的每个方法都相当于添加了@ResponseBody注解</p><p>当然，可能前后端的接口参数可能会有不同，比如前段sex参数传的是男女，后端存数据库的是01 这样的话可能还需要类似于DTO和Entity的转化….这里较懒所以没加入，如果有兴趣的可以添加一下</p><h4 id="RequestMapping-的2个属性"><a href="#RequestMapping-的2个属性" class="headerlink" title="@RequestMapping 的2个属性"></a>@RequestMapping 的2个属性</h4><p>在@RequestMapping、@GetMapping 等等注解中 还有2个参数，一个是produces  另外一个是consumes<br>这个在前面也说过，consumes是指请求体的类型，比如我们可能接收的请求体是文本(text)等等，如果做了限制，其他类型的就无法传入进来了。<br>而produces是指限制返回的媒体类型，比如application/json 等等。<br>比如：@PostMapping(value=”/student”,produces=”application/json;charset=utf-8”,consumes=MediaType.ALL_VALUE)</p><h3 id="处理HTTP状态码、异常和响应头"><a href="#处理HTTP状态码、异常和响应头" class="headerlink" title="处理HTTP状态码、异常和响应头"></a>处理HTTP状态码、异常和响应头</h3><p>再此之前，我们只是讨论了如何能够找到数据并进行资源处理，而没有讨论当没有找到资源处理或者说发生异常了应该如何处理，接下来来说说这些。</p><p>当资源找不到或者程序发生异常以后，我们应该返回给客户端HTTP状态码以及错误消息信息，为了简化这些开发，Spring提供了实体封装类ResponseEntity 以及注解@ResponseStatus，前者可以有效的封装错误信息和状态码，后者可以配置指定的响应码给客户端。</p><p>在大部分情况下，后台请求成功会返回一个200的状态码，代表请求成功，但是这还不够具体，比如说新增用户以后，返回201代表新增成功会更加具体一些，因为201代表新增资源成功，200只是代表请求成功而已。<br>这时候就可以使用ResponseEntity类或者@ResponseStatus注解来标识本次请求的状态码。除了在Http响应头中可以添加响应数据之外，还可以给响应头添加一些信息来提供成功或者失败的消息。下面以修改方法为例。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用注解完成状态码</span><br><span class="line"> * @param student</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@ResponseBody</span><br><span class="line">//指定状态码为201(资源创建成功)</span><br><span class="line">@ResponseStatus(value=HttpStatus.CREATED)</span><br><span class="line">@PostMapping(value=<span class="string">"/student"</span>,produces=<span class="string">"application/json;charset=utf-8"</span>,consumes=MediaType.ALL_VALUE)</span><br><span class="line">public int insertStudent(@RequestBody Student student) &#123;</span><br><span class="line">int rows = studentService.saveOrUpdate(student);</span><br><span class="line"><span class="built_in">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   /**</span><br><span class="line"> * 使用ResponseEntity返回状态码</span><br><span class="line"> * @param student</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@ResponseBody</span><br><span class="line">@PostMapping(value=<span class="string">"/student"</span>,produces=<span class="string">"application/json;charset=utf-8"</span>,consumes=MediaType.ALL_VALUE)</span><br><span class="line">public ResponseEntity&lt;Student&gt; insertStudent2(@RequestBody Student student) &#123;</span><br><span class="line">int rows = studentService.saveOrUpdate(student);</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">String success = (rows&gt;0)? <span class="string">"true"</span>:<span class="string">"false"</span>;</span><br><span class="line">//设置响应头，比较常用的方式</span><br><span class="line">headers.add(<span class="string">"success"</span>, success);</span><br><span class="line">//下面是使用集合(List)方式，不太常用</span><br><span class="line">//headers.put(<span class="string">"success"</span>, Arrays.asList(success));</span><br><span class="line">//返回创建的状态码</span><br><span class="line"><span class="built_in">return</span> new ResponseEntity&lt;Student&gt;(student,headers,HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个方法中有一个需要注意的地方，就是返回的时候，构造的ResponseEntity对象的第一个参数不能是int类型，由于我返回的就是int  所以只要写了student</p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>student 方法<br><img src="/images/SpringBoot/SpringBoot10/sp10-1.png"></p><p>student2方法<br><img src="/images/SpringBoot/SpringBoot10/sp10-2.png"></p><p>可以看到写的状态码都已经成功返回给客户端了。</p><p>成功的情况讨论完了，来说说失败的情况，失败有很多种，比如get方法获取结果集为空，以及程序本身某处发生异常等等，默认情况下这些不做处理返回页面一个大大的500和报错内容是很不友好的<br>，而且在此之前也学习了一些异常的处理，比如控制层的@ControllerAdvice和@ExceptionHandler等等，当然，网上推荐的那种报错之后页面直接跳转<a href="http://www.baidu.com?pwd=#{exceptionInfo}" target="_blank" rel="noopener">www.baidu.com?pwd=#{exceptionInfo}</a> 也是很不错的一种想法~哈哈哈<br>不开玩笑了，说说正经的处理<br>@ControllerAdvice是用来定义控制器通知的，而@ExceptionHandler是指定异常发生时的处理办法，有这些只是就足以处理异常了。在此之前，先定义查找失败的异常，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.exception;</span><br><span class="line">/**</span><br><span class="line"> * 定义学生类找不到异常</span><br><span class="line">* @author wangshun  </span><br><span class="line">* @date 2019年1月2日  </span><br><span class="line">* @version 1.0</span><br><span class="line"> */</span><br><span class="line">public class NotFoundException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">private static final long serialVersionUID = -2533075100361102139L;</span><br><span class="line">//异常编码</span><br><span class="line">private Integer code;</span><br><span class="line">//异常信息</span><br><span class="line">private String message;</span><br><span class="line">public <span class="function"><span class="title">NotFoundException</span></span>() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line">public NotFoundException(Integer code, String message) &#123;</span><br><span class="line">super();</span><br><span class="line">this.code = code;</span><br><span class="line">this.message = message;</span><br><span class="line">&#125;</span><br><span class="line">public Integer <span class="function"><span class="title">getCode</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line">public void setCode(Integer code) &#123;</span><br><span class="line">this.code = code;</span><br><span class="line">&#125;</span><br><span class="line">public String <span class="function"><span class="title">getMessage</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">public void setMessage(String message) &#123;</span><br><span class="line">this.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里定义了异常类，其继承于运行时异常类，所以可以在找不到用户时抛出异常，而在控制器抛出异常之后，则可以在控制器(@ControllerAdvice)中处理这些异常，这时候就需要使用注解@ExceptionHandler了，实际上，在SpringBoot的机制中早就准备好了BasicErrorController对象去处理发生的异常，但是它并不是很友好，所以我们还需要自定义一个控制通知。</p><h4 id="定义控制器通知来处理异常"><a href="#定义控制器通知来处理异常" class="headerlink" title="定义控制器通知来处理异常"></a>定义控制器通知来处理异常</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.exception;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@ControllerAdvice(</span><br><span class="line">//指定拦截包的控制器</span><br><span class="line">basePackages= &#123;<span class="string">"com.wangshun.leaning.controller.*"</span>&#125;,</span><br><span class="line">//限定为指定为@RestController  和@Controller 注解的才会被拦截</span><br><span class="line">annotations= &#123;Controller.class,RestController.class&#125;</span><br><span class="line">)</span><br><span class="line">public class StudentAdviceController &#123;</span><br><span class="line">//异常类型，可以定义异常类型进行拦截处理</span><br><span class="line">@ExceptionHandler(value=NotFoundException.class)</span><br><span class="line">@ResponseBody</span><br><span class="line">@ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">public Map&lt;String, Object&gt; exception(HttpServletRequest request,NotFoundException exception)&#123;</span><br><span class="line">Map&lt;String , Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"code"</span>, exception.getCode());</span><br><span class="line">map.put(<span class="string">"message"</span>, exception.getMessage());</span><br><span class="line"><span class="built_in">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了@ControllerAdvice注解来标注类，说明在定义一个控制器的通知，配合它所拦截的包，限定了那些被标注为@Controller 和@RestController注解的控制器，按照其定义就可以拦截之前写好的控制器，这里的@ExceptionHandler定义了拦截NotFoundException，@ResponseBody标明了返回json格式，而@ResponseStatus注解定义了状态码为500(服务器内部错误)，这样就会把状态码传递给请求者。</p><p>接下来写一个测试类来进行测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(<span class="string">"/student/&#123;id&#125;"</span>)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Student getStudentInfoById(@PathVariable(<span class="string">"id"</span>) Integer id) &#123;</span><br><span class="line">Student student = studentService.getStudentById(id);</span><br><span class="line"><span class="keyword">if</span>(student == null) &#123;</span><br><span class="line">throw new NotFoundException(1,<span class="string">"找不到用户"</span>+id+<span class="string">"的信息"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="soapUI测试结果"><a href="#soapUI测试结果" class="headerlink" title="soapUI测试结果"></a>soapUI测试结果</h4><p><img src="/images/SpringBoot/SpringBoot10/sp10-3.png"></p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rest接口，又或者是Rest风格的网站，现在已经是非常的流行了，在ESB中Rest是一种协议方式，正如WebService一样，之前我一直以为我使用SSM框架写的那种/xxx/xxx,do这种就是Rest风格，其实不然，有一些细微的差别，Rest风格是有自己的规范的，按照Rest规范构建的才能算是Rest风格。让我第一次接触Rest以及印象深刻的是17年年底在公司看到的面试题：“如何使用Spring构建一个Restful API”emmmmmmm到现在还是不会做……看来我当年进公司纯属幸运……hhh….
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>年度总结~</title>
    <link href="http://yoursite.com/2019/01/01/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/01/01/年度总结/</id>
    <published>2018-12-31T16:17:29.000Z</published>
    <updated>2019-01-01T05:57:12.510Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年已经开始啦~<br>想了一下，当初在2017年计划的事情到现在还是没有完成。MD…………<a id="more"></a><br>今年我的心态好了很多，至少不会没事想着自杀了，今年也学了不少东西，感觉进步还是不少的，感谢公司的大佬和小伙伴们的帮助啦~<br>ESB接口开发，linux服务器基本操作，weblogic 服务器/oracle 数据库/keepalived 等等，至少今年让我感觉收获还是不少的。<br>但是原本在2017年计划的学习SpringBoot  到了2019年还是没有学完，而且没咋学…每次下定决心 但是好像都没有持续好久….<br>回顾一下去年的几次比较重要的事情吧~<br>18年2月份，过完年回潍坊出差，第一次见到大领导(貌似是个总裁还是啥的….)，年龄不小了…是个当爷爷的岁数了，是个台湾的企业家~我有幸和他说上话~  但是他一口流利的英语 差点没把我整自闭….<br>其实也和自闭差不多了 当时….他还对我说了一个很伤人的话，”不是什么阿猫阿狗都可以来的.”…那时候有2个想法，一个是学好英语，第二个是考研。<br>至始至终，我都很羡慕学习好的人，也很羡慕能够继续上学的人，只不过我现在已经不后悔没能继续上学了，没错！ 我放弃了那个考研的计划，学英语的计划最多能算延期~ 2333<br>我记得那会我跟我妈妈说，我自己尝试了，失败了 我不会怪任何人，但是你不许我做，那么一切的一切我都会怪在你的头上~<br>后来我妈妈也支持了我的考研计划~  当时还挺有梦想的，想考计算机系的AI，后来被自己的胆怯击倒了，一是怕自己考不上 怕这怕那的，二是觉得那个要求的线太高了，总而言之就是找各种理由给自己开脱，后来就慢慢放弃了，不过还是坚持了一段时间的，大概一个月吧….</p><p>2018年4月，我离开潍坊项目组来到泸州项目组~这个项目组教会了我太多东西了，也改变了我很多~比如我学会了很多ESB的东西，顺便把自己之前没整明白的也整明白了，感谢张哥和姜哥啦~<br>生活中的话~7月份除了我所有的项目组成员都离开了~ 我那是第一次自己独立做所有的事情，工作也好，生活也罢，那大概是我真正独立的第一次吧~ 什么都要自己做，而且自己还挺蠢的，经常做错事情。<br>人们总说，独立是一个好事情，但是没人告诉我们独立的坏处~  当你领悟到这个坏处之后，你也独立的差不多了…真特喵的是个坏的循环..<br>人呐~ 总是习惯性用自己的行为去约束别人，比如这个事情我可以自己做，我就不希望别人来找我帮忙~<br>我记得微博上有一句话我特别喜欢，”我不喜欢麻烦别人 这句话的潜台词是我也不喜欢被别人麻烦，望周知。”<br>说说别的~  我之前选择这一行的原因是因为我觉得可以靠技术吃饭~  我一直以为技术牛就可以为所欲为~  后来发现还是需要和人好好沟通的~所以我现在…有点甲方舔狗的味道吧(笑)，也不算虚伪，有点半开玩笑的话，毕竟甲方是个和我差不多大的小姐姐~</p><p>心态好了之后，写东西也更加的凌乱了….完全没有啥头绪~ 果然还是应该列个提纲的……<br>说说家里吧，今年家里还算是比较顺利，家人没生啥病，除了我找对象这个事情，其他的还好~年底的时候开始给家里寄钱，虽然是准备买电脑，但是至少还是存钱了…..但是真的快被饿死啦~~~花呗要顶不住了！！！<br>可是我还是觉得是因为大家都有钱了，我到现在还是认为，人有钱了确实是会和大家比较友好的相处，我姐家也罢~  我哥哥家也好~  说白了现在联系比较多的也就和我哥哥了，一是当年他天天带我去网吧~  一直到大三那年在他家玩了一整个寒假，包吃包住~ 有点不好意思吧~ 所以给他也好，给我姐姐也罢，都买了点礼物~<br>其实我也差不多明白，我在家这么多年可以为所欲为，或者说回家有人善意的对待，有很重要的原因就是我姐姐有钱，不可否认~  我在老家可以混饭吃多亏了我姐姐，如果我家很贫穷，估计大家也不会那么热情的招待我把…..<br>今年我也终于有幸成为了别人家的孩子~赚的钱不算多，但是还行吧，没让家里人操心，听说我姐姐还偶尔喝别人炫耀我呢~咋说呢…..  这工资…..还好吧…..<br>还是不要探讨人性了，我这应该也算是有偏见吧。。。。但是我觉得这也是家庭带来的影响吧…..我虽然变得友善了，但是我觉得过去的有些事情还是无法原谅，无所谓啦~ 反正也见不着面了。</p><p>期间学习了几次，买了不少书，但是都没咋看，最近算是坚持下来了一点点吧，计划很多~但是又没有具体的计划~  而且学时间长就开始厌烦，不是很有耐心，慢慢来吧~<br>距离第一个计划只剩下半年了，应该可以实现吧….第二个计划我给自己定的时间是五年…..也说不准将来的5年我能否坚持下来<br>之前有个习惯，就是一有计划就马上和别人说，都来也都不了了之了…..所以 现在不说了吧….5年后见…希望自己可以加油~<br>写的好乱……..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年已经开始啦~&lt;br&gt;想了一下，当初在2017年计划的事情到现在还是没有完成。MD…………
    
    </summary>
    
      <category term="闲谈" scheme="http://yoursite.com/categories/%E9%97%B2%E8%B0%88/"/>
    
    
      <category term="年度总结~" scheme="http://yoursite.com/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(9)深入SpringMVC开发-2</title>
    <link href="http://yoursite.com/2018/12/31/SpringBoot-9-%E6%B7%B1%E5%85%A5SpringMVC%E5%BC%80%E5%8F%91-2/"/>
    <id>http://yoursite.com/2018/12/31/SpringBoot-9-深入SpringMVC开发-2/</id>
    <published>2018-12-31T04:53:16.000Z</published>
    <updated>2018-12-31T09:10:25.009Z</updated>
    
    <content type="html"><![CDATA[<p>上次说到可以使用@RequestBody等等一些注解来实现获取参数，包括自动封装成对应对象等等，当然，获取参数还有可能更复杂，比如和第三方系统合作，采用密文传输等等，这样的话其定义的参数规则SpringMVC就无法支持了，这时候就需要使用到自定义参数转换规则了。<br>在之前的SpringMVC中，我们可以使用注解 甚至连注解都不使用就可以获取参数了。这是因为SpringMVC提供的处理器会优先使用一套规则来实现参数的转换，而大部分情况下，开发者是不需要知道这些规则的。<br>但是自定义就需要知道这些规则了….</p><p>Http的请求包含请求头(Header)、请求体(Body)、URL和参数等内容，服务器还包含其上下文环境和客户端交互会话(Session)机制，这里的消息转换是指请求体的转换，接下来说说SpringMVC如何从Http请求中获取参数的….<a id="more"></a></p><h2 id="处理器获取参数逻辑"><a href="#处理器获取参数逻辑" class="headerlink" title="处理器获取参数逻辑"></a>处理器获取参数逻辑</h2><p>当一个请求到来之后，在处理器处理的过程中，会优先通过上下文环境和Http请求来获取参数，如果是简易的参数类型他就会使用简单的转换器进行转换，而这些简单的转换器是SpringMVC封装好了的。但是如果是对Http请求体(Body)，它就会调用HttpMessageConverter接口的方法对请求体信息进行转换，首先是判断能否对请求体进行转换，如果可以就将其转换成Java类型。</p><h3 id="HttpMessageConverter接口源码"><a href="#HttpMessageConverter接口源码" class="headerlink" title="HttpMessageConverter接口源码"></a>HttpMessageConverter接口源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.http.converter;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpInputMessage;</span><br><span class="line">import org.springframework.http.HttpOutputMessage;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface HttpMessageConverter&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 是否可读，其中Clazz为Java类型，mediaType为Http请求类型</span><br><span class="line"> */</span><br><span class="line">boolean canRead(Class&lt;?&gt; clazz, @Nullable MediaType mediaType);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断clzz能否转换成mediaType媒体类型，其中Clazz为Java类型，mediaType为Http请求类型</span><br><span class="line"> */</span><br><span class="line">boolean canWrite(Class&lt;?&gt; clazz, @Nullable MediaType mediaType);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取可支持的媒体类型列表</span><br><span class="line"> */</span><br><span class="line">List&lt;MediaType&gt; getSupportedMediaTypes();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当canRead验证通过后，读取Http请求信息</span><br><span class="line"> */</span><br><span class="line">T <span class="built_in">read</span>(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span><br><span class="line">throws IOException, HttpMessageNotReadableException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当canWrite方法验证通过后，写入响应</span><br><span class="line"> */</span><br><span class="line">void write(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)</span><br><span class="line">throws IOException, HttpMessageNotWritableException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里优先讨论canRead和Read方法，当代码控制器方法中的参数标注了@RequestBody注解之后，处理器会采用请求体的内容进行参数转换，而前端传过来的是Json格式，所以这里首先它会调用canRead方法来确认请求体是否可读，然后再调用read方法，将前端提交的用户Json类型请求体转换成控制器User类型参数，这样控制器就可以得到参数了(代码在上一节使用注解获取参数里面…)。</p><p>上述只是将请求体转换 成为Java对象，接下来说说其他的参数类型，比如性别吧，Sex  前端传入男女、而后台传的是枚举类型(最简单的比如男对1 女对2)，这时候我们就需要自定义参数转过程了、</p><h3 id="处理器转换参数过程"><a href="#处理器转换参数过程" class="headerlink" title="处理器转换参数过程"></a>处理器转换参数过程</h3><p>在SpringMVC中，是通过WebDataBinder机制来获取参数的，它主要是解析Http请求的上下文，然后在控制器的调用之前转换参数并提供验证功能，为调用控制器方法做准备。处理器会从Http请求中读取数据，然后通过Converter(基本类型转换器)、Fomatter(时间格式等转换器)、GenericConverter(字符串变数组转换器)这3个接口来进行各种参数转换，这三个接口采用了注册机的机制，在默认情况下SpringMVC已经在注册机里面注册了大量的转换器，这也就是我们在前端传值String 类型，而我们在控制层得到Long类型参数的原因。</p><p>同样的，当需要自定义转换规则时，只需要再注册机上面注册自己的转换器就可以了。</p><p>在SpringBoot中，其提供了一个特殊的机制来管理这些转换器，那就是SpringBoot的自动配置类WebMvcAutoConfiguration,还定义了一个内部类WebMvcAutoConfigurationAdapter,源代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//注册各种转换器，registry 实际为DefaultFormattingConversionService对象</span><br><span class="line">@Override</span><br><span class="line">public void addFormatters(FormatterRegistry registry) &#123;</span><br><span class="line">            //遍历IOC容器，找到Converter类型的Bean注册到服务类中</span><br><span class="line"><span class="keyword">for</span> (Converter&lt;?, ?&gt; converter : getBeansOfType(Converter.class)) &#123;</span><br><span class="line">registry.addConverter(converter);</span><br><span class="line">&#125;</span><br><span class="line">            //遍历IOC容器，找到GenericConverter类型的Bean注册到服务中</span><br><span class="line"><span class="keyword">for</span> (GenericConverter converter : getBeansOfType(GenericConverter.class)) &#123;</span><br><span class="line">registry.addConverter(converter);</span><br><span class="line">&#125;</span><br><span class="line">            //遍历IOC容器，找到Formatter类型的Bean注册到服务中</span><br><span class="line"><span class="keyword">for</span> (Formatter&lt;?&gt; formatter : getBeansOfType(Formatter.class)) &#123;</span><br><span class="line">registry.addFormatter(formatter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SpringBoot初始化中，会将对应用户自定义的上述三种接口的实现类所创建的Spring Bean自动注册到DefaultFormattingConversionService对象中。</p><p>说了那么多，来说说实际在SpringBoot中，如何自定义吧。</p><h2 id="自定义转换"><a href="#自定义转换" class="headerlink" title="自定义转换"></a>自定义转换</h2><h3 id="一对一转换器-Converter"><a href="#一对一转换器-Converter" class="headerlink" title="一对一转换器(Converter)"></a>一对一转换器(Converter)</h3><p>Converter是一对一的转换器，也就是从一种类型转换到另外一种类型，常见的比如说String 转Integer等等<br>源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface Converter&lt;S, T&gt; &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 转换方法  S代表原类型，T代表目标类型</span><br><span class="line"> */</span><br><span class="line">@Nullable</span><br><span class="line">T convert(S <span class="built_in">source</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设我们存在这么一个需求，前端传的是一个字符串，格式为”name-age”这种，但是我们后台需要的是一个Student对象，这时候就可以自定义转换格式了。</p><h4 id="转换类"><a href="#转换类" class="headerlink" title="转换类"></a>转换类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.converter;</span><br><span class="line"></span><br><span class="line">import org.springframework.core.convert.converter.Converter;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.Student;</span><br><span class="line">@Component</span><br><span class="line">public class StringToStudentConverter implements Converter&lt;String, Student&gt;&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Student convert(String str) &#123;</span><br><span class="line">String[] studentStr = str.split(<span class="string">"-"</span>);</span><br><span class="line">Student student = new Student();</span><br><span class="line">student.setName(studentStr[0]);</span><br><span class="line">student.setAge(studentStr[1]);</span><br><span class="line"><span class="built_in">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@GetMapping(value=<span class="string">"/conver.do"</span>,produces=<span class="string">"application/json;chaset=utf-8"</span>)</span><br><span class="line">public Student ConverStudent(Student student) &#123;</span><br><span class="line">System.out.println(student);</span><br><span class="line"><span class="built_in">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 启动项目后执行<a href="http://localhost:8080/student/conver.do?student=%E5%BC%A0%E4%B8%89-18" target="_blank" rel="noopener">http://localhost:8080/student/conver.do?student=%E5%BC%A0%E4%B8%89-18</a><br> (第一个是张三)</p><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/images/SpringBoot/SpringBoot9/sp9-1.png"></p><h3 id="GenericConverter集合和数组转换"><a href="#GenericConverter集合和数组转换" class="headerlink" title="GenericConverter集合和数组转换"></a>GenericConverter集合和数组转换</h3><p>GenericConverter是数组转换器，因为SpringMVC自身提供了一些数组转换器，所以需要自定义的并不多。<br>假设需要同时新增多个学生，这样便需要传递一个学生列表(List<student>)给控制器，此时SpringMVC会使用StringToCollectionConverter转换，这个类实现了GenericConverter接口，并且是SpringMVC内部已经注册号了的数组转换器，它首先将字符串用逗号分隔成一个个的子字符串，然后通过原泛型为String,目标泛型为Student类，找到对应的Converter进行转换，这里会使用之前写过的转换类。</student></p><p>根据这样的场景，可以使用以下代码进行测试</p><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试使用集合传递多个用户</span><br><span class="line"> * @param students</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@ResponseBody</span><br><span class="line">@GetMapping(value=<span class="string">"/converToList.do"</span>,produces=<span class="string">"application/json;chaset=utf-8"</span>)</span><br><span class="line">public List&lt;Student&gt; list(@RequestParam(value=<span class="string">"students"</span> ,required=<span class="literal">true</span>) List&lt;Student&gt; students)&#123;</span><br><span class="line"><span class="built_in">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述要注意的地方就是如果你前端传递集合的时候，在集合的位置需要加上@RequestParam(value=”students” ,required=true)  这个，不加的话会报错<br>java.lang.NoSuchMethodException: java.util.List.<init>()<br>具体原因未知…..这里先提供一个解决办法</init></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>地址栏输入<a href="http://localhost:8080/student/converToList.do?students=zhangsan-1,lisi-2,wangwu-3" target="_blank" rel="noopener">http://localhost:8080/student/converToList.do?students=zhangsan-1,lisi-2,wangwu-3</a></p><p>结果如下<br><img src="/images/SpringBoot/SpringBoot9/sp9-2.png"></p><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p>之前说过，处理器逻辑中，参数转换之后，就是数据验证了。因此SpringMVC提供了验证参数的机制，一方面，它支持JSR-303注解规范(SpringBoot默认引入的是Hibernate Validator机制)，另一方面，因为业务会比较复杂，所以需要自定义验证规则</p><h3 id="JSR-303验证"><a href="#JSR-303验证" class="headerlink" title="JSR-303验证"></a>JSR-303验证</h3><p>JSR-303验证主要是通过注解的方式进行的。下面定义一个需要验证的POJO，并根据需求使用相应注解</p><h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.entity;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.validation.constraints.Email;</span><br><span class="line">import javax.validation.constraints.Future;</span><br><span class="line">import javax.validation.constraints.Max;</span><br><span class="line">import javax.validation.constraints.Min;</span><br><span class="line">import javax.validation.constraints.NotNull;</span><br><span class="line">import javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line">import org.hibernate.validator.constraints.Range;</span><br><span class="line"></span><br><span class="line">public class ValidatorPojo &#123;</span><br><span class="line">@NotNull(message=<span class="string">"id不能为空"</span>)</span><br><span class="line">private Integer id;</span><br><span class="line"></span><br><span class="line">@Future(message=<span class="string">"需要一个将来的日期"</span>)</span><br><span class="line">@NotNull(message=<span class="string">"日期不能为空"</span>)</span><br><span class="line">private Date date;</span><br><span class="line"></span><br><span class="line">@Min(value=0,message=<span class="string">"最小值为0"</span>)</span><br><span class="line">@Max(value=100,message=<span class="string">"最大值为100"</span>)</span><br><span class="line">private Integer score;</span><br><span class="line"></span><br><span class="line">@Range(min=1,max=888,message=<span class="string">"范围为1-888"</span>)</span><br><span class="line">private Integer range;</span><br><span class="line"></span><br><span class="line">@Email(message=<span class="string">"邮箱格式错误"</span>)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">@Size(min=5,max=10,message=<span class="string">"字符串 长度应为5-10之间"</span>)</span><br><span class="line">private String str;</span><br><span class="line"></span><br><span class="line">/**省略get/<span class="built_in">set</span>以及构造函数**/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@RequestMapping(value=<span class="string">"/valid"</span>,produces=<span class="string">"application/json;charset=utf-8"</span>)</span><br><span class="line">public Map&lt;String , Object&gt; validate(@Valid @RequestBody ValidatorPojo vp ,Errors errors)&#123;</span><br><span class="line">Map&lt;String , Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">//获取错误列表</span><br><span class="line">List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line"><span class="keyword">for</span> (ObjectError oe : oes) &#123;</span><br><span class="line">String key = null;</span><br><span class="line">String msg = null;</span><br><span class="line">//字段错误</span><br><span class="line"><span class="keyword">if</span>(oe instanceof FieldError) &#123;</span><br><span class="line">FieldError fe = (FieldError) oe;</span><br><span class="line">key = fe.getField();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">key = oe.getObjectName();</span><br><span class="line">&#125;</span><br><span class="line">msg = oe.getDefaultMessage();</span><br><span class="line">map.put(key, msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中使用@RequestBody代表接收一个Json参数，@Valid注解表示启动验证机制，这样Spring就会启用JSR-303机制进行验证。它会自动将最后的验证结果放入Errors对象中，这样就可以从中得到相关验证后的信息</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>这里依旧是懒散的使用SOAPUI测试…..<br><img src="/images/SpringBoot/SpringBoot9/sp9-3.png"></p><h3 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h3><p>除了一些常规的验证，在面对一些非常规验证的时候，比如比较总金额是否等于单价*数量  在这样类似的情况下，我们就需要使用自定义验证了。</p><p>在Spring中，Spring还提供了自己的验证机制，在参数转换的时候，我们可以看到SpringMVC中，存在WebDataBinder机制进行管理，在默认的情况下Spring会自动根据上下文通过注册了的转换器转换出控制器所需要的参数，在WebDataBinder中除了可以注册转换器之外，还可以注册验证器(Validator)</p><p>在Spring控制器中，它还允许使用注解@InitBinder，这个注解是允许在进入控制器的方法之前修改WebDataBinder机制，下面就在验证机制的场景下演示，在此之前，先认识一下SpringMVC的验证机制，其中定义了一个Validator接口，此接口源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.validation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface Validator &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判定当前验证器是否支持Class类型验证</span><br><span class="line"> * @param clazz pojo类型</span><br><span class="line"> * @<span class="built_in">return</span> 当前验证器是否支持POJO验证</span><br><span class="line"> */</span><br><span class="line">boolean supports(Class&lt;?&gt; clazz);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 如果supports 返回<span class="literal">true</span>，则这个方法执行验证逻辑</span><br><span class="line"> * @param target 被验证的POJO对象</span><br><span class="line"> * @param errors 错误对象</span><br><span class="line"> */</span><br><span class="line">void validate(Object target, Errors errors);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义学生验证器"><a href="#自定义学生验证器" class="headerlink" title="自定义学生验证器"></a>自定义学生验证器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.validator;</span><br><span class="line"></span><br><span class="line">import org.springframework.validation.Errors;</span><br><span class="line">import org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.util.StringUtils;</span><br><span class="line">import com.wangshun.leaning.entity.Student;</span><br><span class="line"></span><br><span class="line">public class StudentValidator implements Validator&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean supports(Class&lt;?&gt; clazz) &#123;</span><br><span class="line"><span class="built_in">return</span> clazz.equals(Student.class);</span><br><span class="line">&#125;</span><br><span class="line">//验证逻辑</span><br><span class="line">@Override</span><br><span class="line">public void validate(Object target, Errors errors) &#123;</span><br><span class="line"><span class="keyword">if</span>(target==null) &#123;</span><br><span class="line">errors.rejectValue(<span class="string">""</span>, null,<span class="string">"用户不能为空"</span>);</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student student = (Student) target;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(student.getName())) &#123;</span><br><span class="line">errors.rejectValue(<span class="string">"name"</span>, null,<span class="string">"用户名不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是，上面的errors.rejectValue方法中的第一个参数，上面的是name  这个是要跟你的实体类的属性名称对应的，否则是会报错找不到属性的。</p><p>有了这个验证器之后，Spring还是不能自动启动它，正如前面说的那样，@InitBinder注解可以实现在进入控制器方法之前更改WebDataBinder机制<br>所以在Controller 类中添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@InitBinder</span><br><span class="line">public void initBinder(WebDataBinder binder) &#123;</span><br><span class="line">binder.setValidator(new StudentValidator());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/images/SpringBoot/SpringBoot9/sp9-4.png"></p><p>这里留一个坑，如果自定义验证和注解验证同时存在，那么执行的先后顺序 是怎样的呢(应该不会只执行一个吧……)</p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次说到可以使用@RequestBody等等一些注解来实现获取参数，包括自动封装成对应对象等等，当然，获取参数还有可能更复杂，比如和第三方系统合作，采用密文传输等等，这样的话其定义的参数规则SpringMVC就无法支持了，这时候就需要使用到自定义参数转换规则了。&lt;br&gt;在之前的SpringMVC中，我们可以使用注解 甚至连注解都不使用就可以获取参数了。这是因为SpringMVC提供的处理器会优先使用一套规则来实现参数的转换，而大部分情况下，开发者是不需要知道这些规则的。&lt;br&gt;但是自定义就需要知道这些规则了….&lt;/p&gt;
&lt;p&gt;Http的请求包含请求头(Header)、请求体(Body)、URL和参数等内容，服务器还包含其上下文环境和客户端交互会话(Session)机制，这里的消息转换是指请求体的转换，接下来说说SpringMVC如何从Http请求中获取参数的….
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(8)深入SpringMVC开发-1</title>
    <link href="http://yoursite.com/2018/12/28/SpringBoot-8-%E6%B7%B1%E5%85%A5SpringMVC%E5%BC%80%E5%8F%91-1/"/>
    <id>http://yoursite.com/2018/12/28/SpringBoot-8-深入SpringMVC开发-1/</id>
    <published>2018-12-28T12:10:21.000Z</published>
    <updated>2018-12-28T15:17:18.227Z</updated>
    
    <content type="html"><![CDATA[<p>上次说到SpringMVC的大致流程，这次就主要来深入的说说SpringMVC的开发细节，以及在SpringBoot中的应用</p><h2 id="处理器映射"><a href="#处理器映射" class="headerlink" title="处理器映射"></a>处理器映射</h2><p>如果Web工程使用了SpringMVC,那么在启动时就会将注解@RequestMapping中的信息存储到处理器映射(HandlerMapping)机制中去，然后当我们每次请求的时候，通过DispatcherServlet与HandlerMapping中的url进行匹配，找到对应的处理器(其包含控制器的逻辑)并将处理器和拦截器保存到HandlerExecutionChain对象中，并返回给DispatcherServlet。</p><p>也就是说，HandlerMapping 的主要任务是将求情定位到具体的处理器上面…..<a id="more"></a></p><h3 id="RequestMapping源码分析"><a href="#RequestMapping源码分析" class="headerlink" title="@RequestMapping源码分析"></a>@RequestMapping源码分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Mapping</span><br><span class="line">public @interface RequestMapping &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 配置请求映射名称</span><br><span class="line"> */</span><br><span class="line">String name() default <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过路径映射</span><br><span class="line"> */</span><br><span class="line">@AliasFor(<span class="string">"path"</span>)</span><br><span class="line">String[] value() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过路径映射回path配置项</span><br><span class="line"> */</span><br><span class="line">@AliasFor(<span class="string">"value"</span>)</span><br><span class="line">String[] path() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 限定只响应http请求类型，如get/post/head/options/put等等，默认可以响应所有的请求类型</span><br><span class="line"> */</span><br><span class="line">RequestMethod[] method() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当存在http参数时才响应请求</span><br><span class="line"> */</span><br><span class="line">String[] params() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 限定header头存在对应参数时才响应</span><br><span class="line"> */</span><br><span class="line">String[] headers() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 限制http请求体的提交类型，比如application/json</span><br><span class="line"> */</span><br><span class="line">String[] consumes() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 限定返回内容类型，仅当http请求头中的Accept类型中包含该指定类型才返回</span><br><span class="line"> */</span><br><span class="line">String[] produces() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是RequestMapping  源码的内容，可以通过path  或者value  来设置请求的url，从而让对应的请求映射到控制器或者其方法上面，当然，配置项value 和path  也可以通过正则表达式来让方法匹配多个请求。但是如果不是很有必要，尽量不要这么做。</p><p>method属性就是指定请求的方法，比如post  还有get。<br>当然，为了方便开发，在Spring4.3以后，配置项中又新增了几个注解，比如像@PostMapping等等。这种注解也就是简化了配置而已，就比如上面那个就不需要再配置method = “post” 了。</p><h2 id="获取控制参数"><a href="#获取控制参数" class="headerlink" title="获取控制参数"></a>获取控制参数</h2><p>这里也就是我们经常的在Controller 里面使用的几种获取页面传过来的值的几种方法。</p><p>接下来采用代码加截图的形式来学习一下参数的获取</p><h3 id="在无注解下获取参数"><a href="#在无注解下获取参数" class="headerlink" title="在无注解下获取参数"></a>在无注解下获取参数</h3><p>在无注解的情况下获取参数，一般是要求参数名称和http请求参数名称一致。</p><h4 id="Controller代码"><a href="#Controller代码" class="headerlink" title="Controller代码"></a>Controller代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.wangshun.leaning.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">import com.wangshun.leaning.entity.Student;</span><br><span class="line">import com.wangshun.leaning.service.IStudentService;</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(<span class="string">"/student"</span>)</span><br><span class="line">public class StudentController implements WebMvcConfigurer&#123;</span><br><span class="line">@Autowired</span><br><span class="line">IStudentService batchStudent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 展示学生详情</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@GetMapping(<span class="string">"/details.do"</span>)</span><br><span class="line">public ModelAndView insert(Long id) &#123;</span><br><span class="line">//访问模型获取数据</span><br><span class="line">//Student student = batchStudent.get(id);</span><br><span class="line">//模型和试图</span><br><span class="line">ModelAndView mv = new ModelAndView();</span><br><span class="line">//定义模型视图</span><br><span class="line">mv.setViewName(<span class="string">"student/details"</span>);</span><br><span class="line">//加入数据模型</span><br><span class="line">//mv.addObject(<span class="string">"student"</span>,student);</span><br><span class="line">//返回模型和视图</span><br><span class="line"><span class="built_in">return</span> mv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debuge 模式启动项目，在浏览器地址栏输入：<a href="http://localhost:8080/student/details.do?id=1" target="_blank" rel="noopener">http://localhost:8080/student/details.do?id=1</a><br>进入debuge，如下图：<br><img src="/images/SpringBoot/SpringBoot8/sp8-1.png"></p><h3 id="使用-RequestParam-获取参数"><a href="#使用-RequestParam-获取参数" class="headerlink" title="使用@RequestParam 获取参数"></a>使用@RequestParam 获取参数</h3><p>在目前前后端分离的大趋势下，前端命名的规范可能和后端不一致，这时需要把前端的参数和后端的对应起来，那么就可以使用@RequestParam 来确定前后端参数名的映射关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 采用@RequestParam注解获取参数</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@GetMapping(<span class="string">"/details.do"</span>)</span><br><span class="line">public String insert(@RequestParam(<span class="string">"test_id"</span>)Long id) &#123;</span><br><span class="line">System.out.println(id);</span><br><span class="line"><span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中输入：<a href="http://localhost:8080/student/details.do?test_id=1" target="_blank" rel="noopener">http://localhost:8080/student/details.do?test_id=1</a><br>测试效果图如下：<br><img src="/images/SpringBoot/SpringBoot8/sp8-2.png"></p><h3 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 传递数组</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@GetMapping(<span class="string">"/details.do"</span>)</span><br><span class="line">public String insert(Integer[] intArr,String [] strArr) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器：<a href="http://localhost:8080/student/details.do?intArr=1,2,3&amp;strArr=str1,str2,str3" target="_blank" rel="noopener">http://localhost:8080/student/details.do?intArr=1,2,3&amp;strArr=str1,str2,str3</a><br>传递数组参数时，只要每个元素通过逗号分隔即可，而且string类型不需要加引号</p><h3 id="传递json"><a href="#传递json" class="headerlink" title="传递json"></a>传递json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用@requestBody传递Json</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@PostMapping(<span class="string">"/details.do"</span>)</span><br><span class="line">public String insert(@RequestBody Student student) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用@RequestBody注解来传递Json<br>这个注解的意思也就是接收Json 的参数  并将json中和Student实体类中属性相同的部分  赋值给Student 对象。</p><p>ps:由于本人较懒..所以干脆使用soapUI测试了…懒得再去写一个form表单…..(手动滑稽~)<br>下面是测试方法 以及测试结果的截图：<br>soapUI：<br><img src="/images/SpringBoot/SpringBoot8/sp8-3.png"></p><p>这里有两点需要注意一下，之前在调试的时候报错<br> Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Invalid UTF-8 middle byte 0xd0; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Invalid UTF-8 middle byte 0xd0</p><p> 这个在SoapUI中设置一下请求编码为UTF-8即可。</p><p> 第二点就是json中的key需要和实体类中的属性名一致~</p><p> 下面是测试结果图~<br> <img src="/images/SpringBoot/SpringBoot8/sp8-4.jpg"></p><h3 id="通过URL传递参数"><a href="#通过URL传递参数" class="headerlink" title="通过URL传递参数"></a>通过URL传递参数</h3><p>在一些Rest风格的网站中，这时候的参数需要通过url进行传递，比如获取用户的接口就应该是：/user/1<br>这样就变成了获取用户id 为1的接口<br>下面通过例子来演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用占位符+@PathVariable注解获取参数</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@GetMapping(<span class="string">"/details.do/&#123;id&#125;"</span>)</span><br><span class="line">public String insert(@PathVariable(<span class="string">"id"</span>) Long id) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问地址<a href="http://localhost:8080/student/details.do/1" target="_blank" rel="noopener">http://localhost:8080/student/details.do/1</a><br>测试结果：<br><img src="/images/SpringBoot/SpringBoot8/sp8-5.png"></p><p>首先是在@GetMapping 中指定url  以及占位符<br>然后在请求参数中 添加@PathVariable  注解 并指定参数名称，这样这里的参数就可以和url中的对应上了。</p><h3 id="获取格式化参数"><a href="#获取格式化参数" class="headerlink" title="获取格式化参数"></a>获取格式化参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用日期转换注解@DateTimeFormat</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@PostMapping(<span class="string">"/details.do"</span>)</span><br><span class="line">public String insert(@DateTimeFormat(iso = ISO.DATE) Date date) &#123;</span><br><span class="line">System.out.println(date.toString());</span><br><span class="line"><span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>soapUI测试：<br><img src="/images/SpringBoot/SpringBoot8/sp8-6.png"></p><p>测试结果图：<br><img src="/images/SpringBoot/SpringBoot8/sp8-7.png"></p><p>这样 我们传入的日期就按照指定格式进行转换了。</p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次说到SpringMVC的大致流程，这次就主要来深入的说说SpringMVC的开发细节，以及在SpringBoot中的应用&lt;/p&gt;
&lt;h2 id=&quot;处理器映射&quot;&gt;&lt;a href=&quot;#处理器映射&quot; class=&quot;headerlink&quot; title=&quot;处理器映射&quot;&gt;&lt;/a&gt;处理器映射&lt;/h2&gt;&lt;p&gt;如果Web工程使用了SpringMVC,那么在启动时就会将注解@RequestMapping中的信息存储到处理器映射(HandlerMapping)机制中去，然后当我们每次请求的时候，通过DispatcherServlet与HandlerMapping中的url进行匹配，找到对应的处理器(其包含控制器的逻辑)并将处理器和拦截器保存到HandlerExecutionChain对象中，并返回给DispatcherServlet。&lt;/p&gt;
&lt;p&gt;也就是说，HandlerMapping 的主要任务是将求情定位到具体的处理器上面…..
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(7)初识SpringMVC</title>
    <link href="http://yoursite.com/2018/12/26/SpringBoot-7-%E5%88%9D%E8%AF%86SpringMVC/"/>
    <id>http://yoursite.com/2018/12/26/SpringBoot-7-初识SpringMVC/</id>
    <published>2018-12-26T11:13:55.000Z</published>
    <updated>2018-12-26T13:55:05.247Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC 的定位是一个比较松散的组合，展示给用户的视图(View),控制器返回的数据模型(Model),定位视图的视图解析器(ViewResolver)和处理适配器(HandlerAdapter)等内容都是独立的。换句话说，通过SpringMVC很容易把后台的数据转换成各种类型的数据，以满足互联网多样化的需求，比如目前用的最多的JSON格式，也可以转换成PDF、Excel和XML，再加上SpringMVC是基于Spring基础框架派生出来的Web框架，所以它可以十分方便的就整合到Spring框架中…..<a id="more"></a></p><h2 id="SpringMVC的框架设计"><a href="#SpringMVC的框架设计" class="headerlink" title="SpringMVC的框架设计"></a>SpringMVC的框架设计</h2><p>SpringMVC ，也就是我们常说的三层架构(controller、Service、dao),下面用一张图来简单说一下SpringMVC的框架设计<br><img src="/images/SpringBoot/SpringBoot7/sp7-1.png"></p><p>简单点来说 就是发起请求–&gt;controller–&gt;service–&gt;Redis–&gt;dao–&gt;数据库–&gt;dao–&gt;service–&gt;controller–&gt;view<br>这里如果缓存中存在数据就不会访问dao层进而访问数据库了</p><h2 id="SpringMVC流程"><a href="#SpringMVC流程" class="headerlink" title="SpringMVC流程"></a>SpringMVC流程</h2><p>尽管在SpringBoot的开发中，我们可以很快速的通过配置去实现SpringMVC的开发，但是为了解决实际问题，我们还是很有必要去了解一下SpringMVC中运行流程和组件，否则很难理解SpringBoot自动为我们生成了啥，配置了什么，这有什么用。<br>流程和组件是SpriingMVC的核心，SpringMVC的流程是围绕DispatcherServlet而工作的，所以在SpringMVC中DispatcherServlet就是最最重要的内容。在其基础上，还有其他的组件，掌握流程和组件就是SpringMVC开发的基础。</p><h3 id="SpringMVC全过程图"><a href="#SpringMVC全过程图" class="headerlink" title="SpringMVC全过程图"></a>SpringMVC全过程图</h3><p><img src="/images/SpringBoot/SpringBoot7/sp7-2.png"></p><p><strong>注意:</strong> SpringMVC的流程图中，并非每次都需要走完全过程，比如说我们常用的一个注解@ResponseBody<br>这个注解的表演意思也就是把返回的内容不作为页面进行返回，否则你默认返回的index字符串的话，它默认就会返回一个index.html</p><h3 id="SpringMVC初始化"><a href="#SpringMVC初始化" class="headerlink" title="SpringMVC初始化"></a>SpringMVC初始化</h3><p>首先，在Web服务器的启动过程中，如果在SpringBoot机制下启动SpringMVC，它就开始初始化一些重要组件，比如DispactherServelt、HandlerAdapter的实现类RequestMappingHandlerAdapter等组件对象。</p><p>关于这些组件的初始化，我们可以看到spring-webmvc-xxx.jar包中的属性文件DispatcherServlet.properties,它定义的对象都是在SprngMVC开始时就初始化，并且存放在Spring IoC容器中，其源代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default implementation classes for DispatcherServlet's strategy interfaces.</span></span><br><span class="line"><span class="comment"># Used as fallback when no matching beans are found in the DispatcherServlet context.</span></span><br><span class="line"><span class="comment"># Not meant to be customized by application developers.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#国际化解析器</span></span><br><span class="line">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</span><br><span class="line"><span class="comment">#主题解析器</span></span><br><span class="line">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</span><br><span class="line"><span class="comment">#HandlerMapping实例</span></span><br><span class="line">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</span><br><span class="line"><span class="comment">#处理器适配器</span></span><br><span class="line">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span><br><span class="line">org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</span><br><span class="line"><span class="comment">#处理器异常解析器</span></span><br><span class="line">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\</span><br><span class="line">org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</span><br><span class="line">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br><span class="line"><span class="comment">#策略视图解析器，当你没有返回视图逻辑名称的时候，通过它可以生成默认的视图名称</span></span><br><span class="line">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</span><br><span class="line"><span class="comment">#视图解析器</span></span><br><span class="line">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</span><br><span class="line"><span class="comment">#FlashMap管理器。不常用.......</span></span><br><span class="line">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</span><br></pre></td></tr></table></figure></p><p>以上的这些组件，会在SpringMVC初始化的时候进行初始化，这也是为什么我们不需要进行很多配置就可以开发SpringMVC程序，尤其是在SpringBoot中，更是如此，我们可以通过SpringBoot中的配置来定制这些组件的初始化。接来下通过代码我们来聊聊它的运行流程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(<span class="string">"/student"</span>)</span><br><span class="line">public class StudentController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">IStudentService batchStudent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 展示学生详情</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> */</span><br><span class="line">@GetMapping(<span class="string">"/details.do"</span>)</span><br><span class="line">public ModelAndView insert(Long id) &#123;</span><br><span class="line">//访问模型获取数据</span><br><span class="line">Student student = batchStudent.get(id);</span><br><span class="line">//模型和试图</span><br><span class="line">ModelAndView mv = new ModelAndView();</span><br><span class="line">//定义模型视图</span><br><span class="line">mv.setViewName(<span class="string">"student/details"</span>);</span><br><span class="line">//加入数据模型</span><br><span class="line">mv.addObject(<span class="string">"student"</span>,student);</span><br><span class="line">//返回模型和视图</span><br><span class="line"><span class="built_in">return</span> mv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@Controller 表示这是一个控制器，@RequestMapping代表请求路径和控制器(或者其方法)的映射关系，它会在Web服务器启动SpringMVC时，就被扫描到HandlerMapping的机制中存储，之后用户在法器请求被DispatcherServlet拦截后，通过URI或者其他条件，通过HandlerMapping机制就能找到对应的控制器(或者方法)进行相应，只是通过HandlerMapping返回的是一个HandlerExecutionChain对象，这个对象的源码如下：<br>ps:这也就说通了为啥新增一个接口必须要重启程序才能生效了~啦啦啦~<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class HandlerExecutionChain &#123;</span><br><span class="line">//日志</span><br><span class="line">private static final Log logger = LogFactory.getLog(HandlerExecutionChain.class);</span><br><span class="line">//处理器</span><br><span class="line">private final Object handler;</span><br><span class="line">//拦截器数组</span><br><span class="line">@Nullable</span><br><span class="line">private HandlerInterceptor[] interceptors;</span><br><span class="line">//拦截器列表</span><br><span class="line">@Nullable</span><br><span class="line">private List&lt;HandlerInterceptor&gt; interceptorList;</span><br><span class="line">//拦截器当前下标</span><br><span class="line">private int interceptorIndex = -1;</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在HandlerExecutionChain对象中，有一个处理器(handler),这里的处理器是对于Controller的包装，因为我们的控制器可能存在参数，那么处理器就会读取Http中和上下文相关的参数，并且传入给控制器中的方法。而且在控制器执行完成返回后，处理器又可以根据配置信息对控制器的返回结果进行处理。从这段话可以看出，处理器包含了控制器方法的逻辑以及处理器的拦截器(interceptor),这样就可以通过拦截处理器进一步增强处理器的功能。</p><p>在处理器调用控制器时，它首先通过模型层获取数据，再放入数据模型中，最后将返回数据和视图的对象，这样就走到了视图解析器(ViewResolver)，去解析视图逻辑名称了。</p><p>在DispatcherServlet.properties中，我们看到了视图解析器的自动初始化，为了定制InternalResourceViewResolver初始化，我们可在配置文件中添加以下属性(也就是指明页面路径以及默认后缀)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置前缀</span></span><br><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line"><span class="comment">#指定后缀</span></span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure></p><p>这样的设置之后，上面的controller 返回的内容，就会定位到/WEB-INF/jsp/student/details.jsp<br>不过现在基本前后端分离…所以这种用的不多了….</p><h2 id="定制SpringMVC初始化"><a href="#定制SpringMVC初始化" class="headerlink" title="定制SpringMVC初始化"></a>定制SpringMVC初始化</h2><p>正如SpringBoot承诺的那样，它会尽可能的配置Spring，SpringMVC也是如此。但是无论如何都有可能无法满足我们的需求，需要进一步的对SpringMVC进行定制。</p><p>在Servlet3.0的规范中，web.xml不再是一个必须的配置文件。为了适应这个规范，SpringMVC从3.1开始也进行了支持，也就是我们再也不需要基于XML去对环境进行配置。</p><p>为了支持SpringMVC的配置，SpringBoot提供了一个<strong>WebMvcConfigurer</strong>接口，这是一个基于Java8的接口，所以其大部分方法都是defalut类型的，但是它都是空实现，所以我们只需要<strong>实现这个接口，重写需要自定义的方法即可</strong>,它有一个静态内部类<strong><em>WebMvcAutoConfigurationAdapter</em></strong>,通过它SpringBoot就自动配置了MVC的初始化。</p><p>在WebMvcAutoConfigurationAdapter类中，它会自动读取Spring中配置SpringMVC的属性来初始化对应组件，这样便在一定程度上可以实现自定义。</p><p>参考文献<br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringMVC 的定位是一个比较松散的组合，展示给用户的视图(View),控制器返回的数据模型(Model),定位视图的视图解析器(ViewResolver)和处理适配器(HandlerAdapter)等内容都是独立的。换句话说，通过SpringMVC很容易把后台的数据转换成各种类型的数据，以满足互联网多样化的需求，比如目前用的最多的JSON格式，也可以转换成PDF、Excel和XML，再加上SpringMVC是基于Spring基础框架派生出来的Web框架，所以它可以十分方便的就整合到Spring框架中…..
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>SprongBoot(6)Redis</title>
    <link href="http://yoursite.com/2018/12/24/SprongBoot-6-redis/"/>
    <id>http://yoursite.com/2018/12/24/SprongBoot-6-redis/</id>
    <published>2018-12-24T12:05:50.000Z</published>
    <updated>2018-12-24T16:26:44.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在如今互联网中，缓存的应用已经很广泛了，它能在互联网中起到加速系统的作用，有两种缓存使用最广泛，那就是Redis和MongoDB，下面就简单来说说Redis<br>  redis是一种运行在内存中的数据库，支持其中数据类型的存储，Redis是一个开源的、使用ANSIC语言编写、遵守BSD协议、支持网络、可基于内存也可以持久化的日志型、键值对数据库，并提供了多种语言API。由于Redis基于内存，所以运行速度很快，大概是关系型数据库的几倍到几十倍，使用Redis来代替关系数据库的查询访问，网站性能将得到很大的提升……<a id="more"></a></p><h2 id="在SpringBoot中使用Redis"><a href="#在SpringBoot中使用Redis" class="headerlink" title="在SpringBoot中使用Redis"></a>在SpringBoot中使用Redis</h2><h3 id="pom文件中引入相关依赖"><a href="#pom文件中引入相关依赖" class="headerlink" title="pom文件中引入相关依赖"></a>pom文件中引入相关依赖</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Redis缓存依赖  --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> 这里连接redis 一共有两种客户端，一种是引入redis依赖包的时候的默认依赖客户端lettuce，还有一种就是jedis<br> 两种都可以。这里就以默认的为例。</p><h3 id="在SpringBoot中配置Redis"><a href="#在SpringBoot中配置Redis" class="headerlink" title="在SpringBoot中配置Redis"></a>在SpringBoot中配置Redis</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">   host: localhost</span><br><span class="line">   password: password1</span><br><span class="line">   port: 6379</span><br><span class="line">   timeout:</span><br><span class="line">     10000</span><br><span class="line">   database: 0</span><br><span class="line">   lettuce:</span><br><span class="line">     pool:</span><br><span class="line">       max-active: 8</span><br><span class="line">       max-wait:</span><br><span class="line">         -1</span><br><span class="line">       max-idle: 8</span><br><span class="line">       min-idle: 0</span><br></pre></td></tr></table></figure><p> 这里配置了连接池和服务器的属性，用以连接Redis服务器，这样SpringBoot的自动装配机制就会读取这些属性并且自动帮我们生成RedisConnectionFactory、RedisTemplate、StringRedisTemplate等常用redis对象</p><h3 id="安装Redis单机版"><a href="#安装Redis单机版" class="headerlink" title="安装Redis单机版"></a>安装Redis单机版</h3><p>这里可能会有一个疑惑：就是说这个host  和password 怎么填写，这里其实在使用redis之前我们最起码需要在本地搭建一个redis(这里只是做单机redis，并没有做redis集群。)<br>参考地址：<a href="https://jingyan.baidu.com/article/7f766dafa0dae64100e1d052.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/7f766dafa0dae64100e1d052.html</a><br>安装完成就可以了，本地的环境变量的配置可以不做<br>然后我们进入到redis 的安装路径下 打开cmd 输入<br>redis-server.exe redis.windows.conf</p><p>启动的第一次可能会报错：creating server tcp listening socket 127.0.0.1:6379: bind No error(应该是系统默认启动了这个 然后你再启动一次导致的)<br>解决方案如下按顺序输入如下命令就可以连接成功</p><ol><li>redis-cli.exe</li><li>shutdown</li><li>exit</li><li>redis-server.exe redis.windows.conf</li></ol><p>下面是开启成功的截图<br><img src="/images/SpringBoot/SpringBoot6/sp6-1.png"></p><h3 id="设置redis密码"><a href="#设置redis密码" class="headerlink" title="设置redis密码"></a>设置redis密码</h3><p>密码是在redis.windows.conf文件中<br><img src="/images/SpringBoot/SpringBoot6/sp6-2.png"><br>这个位置 这里本来是带#的  去掉之后 后面输入你想设置的密码就可以了。</p><h3 id="使用Demo"><a href="#使用Demo" class="headerlink" title="使用Demo"></a>使用Demo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.annotation.CacheEvict;</span><br><span class="line">import org.springframework.cache.annotation.CachePut;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import com.ithwua.dao.IRouteDao;</span><br><span class="line">import com.ithwua.entity.Route;</span><br><span class="line">import com.ithwua.service.IRouteService;</span><br><span class="line">@Service</span><br><span class="line">public class RouteServiceImpl implements IRouteService&#123;</span><br><span class="line">       @Autowired</span><br><span class="line">       IRouteDao routeDao;</span><br><span class="line">       private static final Logger <span class="built_in">log</span> =  LoggerFactory.getLogger(RouteServiceImpl.class);</span><br><span class="line">       @Override</span><br><span class="line">       public List&lt;Route&gt; getAllInfo(String appid) &#123;</span><br><span class="line">             <span class="built_in">return</span> routeDao.getAllAddress(appid);</span><br><span class="line">       &#125;</span><br><span class="line">       /**</span><br><span class="line">        * value值其表示当前方法的返回值是会被缓存在哪个Cache上的，</span><br><span class="line">        * 对应Cache的名称。其可以是一个Cache也可以是多个Cache，</span><br><span class="line">        * 当需要指定多个Cache时其是一个数组 例如：&#123;<span class="string">"cache1"</span>, <span class="string">"cache2"</span>&#125;</span><br><span class="line">        *</span><br><span class="line">        * key值指的是参数的名字，写法：<span class="comment">#参数名,#p参数index(例如:#p0)</span></span><br><span class="line">        */</span><br><span class="line">       @Cacheable(value = <span class="string">"Route"</span>, key = <span class="string">"#appid"</span>)</span><br><span class="line">       @Override</span><br><span class="line">       public Route getInfoByAppid(String appid) &#123;</span><br><span class="line">             log.info(<span class="string">"进入 get 方法"</span>);</span><br><span class="line">             <span class="built_in">return</span> routeDao.getInfoByAppid(appid);</span><br><span class="line">       &#125;</span><br><span class="line">       @CachePut(value=<span class="string">"Route"</span>,key=<span class="string">"#route.appid"</span>)</span><br><span class="line">       @Override</span><br><span class="line">       public int saveOrUpdate(Route route) &#123;</span><br><span class="line">             </span><br><span class="line">             Route infoByAppid = routeDao.getInfoByAppid(route.getAppid());</span><br><span class="line">             <span class="keyword">if</span>(StringUtils.isEmpty(infoByAppid)) &#123;</span><br><span class="line">                    log.info(<span class="string">"进入 SaveOrUpdate 方法"</span>);</span><br><span class="line">                    routeDao.saveOrUpdate(route);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">return</span> 0;</span><br><span class="line">       &#125;</span><br><span class="line">       @CacheEvict(value=<span class="string">"route"</span>,key=<span class="string">"#id"</span>)</span><br><span class="line">       @Override</span><br><span class="line">       public int delete(String appid) &#123;</span><br><span class="line">             log.info(<span class="string">"进入 delete 方法"</span>);</span><br><span class="line">             <span class="built_in">return</span> routeDao.deleteByAppid(appid);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是这四个注解：@Cacheable    @CachePut  @CacheEvict @Caching</p><h4 id="Cacheable："><a href="#Cacheable：" class="headerlink" title="@Cacheable："></a>@Cacheable：</h4><p>@Cacheable可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。@Cacheable可以指定三个属性，value、key和condition</p><p>1.value属性指定Cache名称：<br>value属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组例如：{ “cache1”, “cache2”}</p><p>2.key属性是用来指定Spring缓存方法的返回结果时对应的key的。该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。我们这里先来看看自定义策略，至于默认策略会在后文单独介绍。</p><p>自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。下面是几个使用参数作为key的示例</p><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value=<span class="string">"users"</span>, key=<span class="string">"#id"</span>)</span><br><span class="line">   public User find(Integer id) &#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br><span class="line">   @Cacheable(value=<span class="string">"users"</span>, key=<span class="string">"#p0"</span>)</span><br><span class="line">   public User find(Integer id) &#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br><span class="line">   @Cacheable(value=<span class="string">"users"</span>, key=<span class="string">"#user.id"</span>)</span><br><span class="line">   public User find(User user) &#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br><span class="line">   @Cacheable(value=<span class="string">"users"</span>, key=<span class="string">"#p0.id"</span>)</span><br><span class="line">   public User find(User user) &#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>3.condition属性指定发生的条件：有的时候我们可能并不希望缓存一个方法所有的返回结果。通过condition属性可以实现这一功能。condition属性默认为空，表示将缓存所有的调用情形。其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下示例表示只有当user的id为偶数时才会进行缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value=&#123;<span class="string">"users"</span>&#125;, key=<span class="string">"#user.id"</span>, condition=<span class="string">"#user.id%2==0"</span>)</span><br><span class="line">   public User find(User user) &#123;</span><br><span class="line">      System.out.println(<span class="string">"find user by user "</span> + user);</span><br><span class="line">      <span class="built_in">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut:"></a>@CachePut:</h4><p>在支持Spring Cache的环境下，对于使用@Cacheable标注的方法，Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，如果存在就不再执行该方法，而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。@CachePut也可以声明一个方法支持缓存功能。与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中</p><h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict:"></a>@CacheEvict:</h4><p>@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。@CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。其中value、key和condition的语义与@Cacheable对应的属性类似。即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；condition表示清除操作发生的条件。</p><p>1.allEntries属性： allEntries是boolean类型，表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。有的时候我们需要Cache一下清除所有的元素，这比一个一个清除元素更有效率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@CacheEvict(value=<span class="string">"users"</span>, allEntries=<span class="literal">true</span>)</span><br><span class="line">   public void delete(Integer id) &#123;</span><br><span class="line">      System.out.println(<span class="string">"delete user by id: "</span> + id)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.beforeInvocation属性： 清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@CacheEvict(value=<span class="string">"users"</span>, beforeInvocation=<span class="literal">true</span>)</span><br><span class="line"> public void delete(Integer id) &#123;</span><br><span class="line">    System.out.println(<span class="string">"delete user by id: "</span> + id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h4><p>@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Caching(cacheable = @Cacheable(<span class="string">"users"</span>), evict = &#123; @CacheEvict(<span class="string">"cache2"</span>),</span><br><span class="line">         @CacheEvict(value = <span class="string">"cache3"</span>, allEntries = <span class="literal">true</span>) &#125;)</span><br><span class="line">   public User find(Integer id) &#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>注意:</strong> 需要在SpringBoot的启动项加上@EnableCaching注解，否则spring-data-cache相关注解不会生效…<br>测试结果(第一次执行get/saveOrUpdate/delete)<br><img src="/images/SpringBoot/SpringBoot6/sp6-3.png"></p><p>第二次执行结果<br><img src="/images/SpringBoot/SpringBoot6/sp6-4.png"><br>可以打开到这里是没有再执行get方法的，她是直接从缓存中获取的数据</p><p>参考文献<br>    <a href="https://jingyan.baidu.com/article/7f766dafa0dae64100e1d052.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/7f766dafa0dae64100e1d052.html</a><br>    《深入浅出SpringBoot2.x》——杨开振</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  在如今互联网中，缓存的应用已经很广泛了，它能在互联网中起到加速系统的作用，有两种缓存使用最广泛，那就是Redis和MongoDB，下面就简单来说说Redis&lt;br&gt;  redis是一种运行在内存中的数据库，支持其中数据类型的存储，Redis是一个开源的、使用ANSIC语言编写、遵守BSD协议、支持网络、可基于内存也可以持久化的日志型、键值对数据库，并提供了多种语言API。由于Redis基于内存，所以运行速度很快，大概是关系型数据库的几倍到几十倍，使用Redis来代替关系数据库的查询访问，网站性能将得到很大的提升……
    
    </summary>
    
      <category term="SpringBoot学习" scheme="http://yoursite.com/categories/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
</feed>
